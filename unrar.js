// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module.exports = Module;
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  Module['print'] = function(x) {
    console.log(x);
  };
  Module['printErr'] = function(x) {
    console.log(x);
  };
  this['Module'] = Module;
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
    dump(x);
  }) : (function(x) {
    // self.postMessage(x); // enable this if you want stdout to be sent as messages
  }));
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          alignSize = type.alignSize || QUANTUM_SIZE;
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  Module.printErr('Warning: Enlarging memory arrays, this is not fast, and ALLOW_MEMORY_GROWTH is not fully tested with all optimizations on! ' + [DYNAMICTOP, TOTAL_MEMORY]); // We perform safe elimination instead of elimination in this mode, but if you see this error, try to disable it and other optimizations entirely
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addOnPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
}
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 24320;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stderr;
var ___progname;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
var _err;
var _errx;
var _warn;
var _warnx;
var _verr;
var _verrx;
var _vwarn;
var _vwarnx;
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv120__si_class_type_infoE = __ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE = __ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([6,70,70,70,41,41,69,69,9,70,70,70,70,41,41,41,41,41,41,1,1,17,16,5,70,70,70,69,0,0,32,64,2,2,6,6,6,102,102,0,0,0,0,0,64,0,0,0,96,0,0,0,160,0,0,0,208,0,0,0,224,0,0,0,240,0,0,0,248,0,0,0,252,0,0,0,192,0,0,0,128,0,0,0,144,0,0,0,152,0,0,0,156,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,208,0,0,0,224,0,0,0,240,0,0,0,248,0,0,0,252,0,0,0,254,0,0,0,255,0,0,0,192,0,0,0,128,0,0,0,144,0,0,0,152,0,0,0,156,0,0,0,176,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,221,60,63,31,191,89,243,72,161,100,188,90,50,102,81,96,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,115,0,0,0,0,0,0,0,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,99,0,0,0,0,0,0,0,0,4,8,16,32,64,128,192,2,2,3,4,5,6,6,6,0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,36,0,0,0,40,0,0,0,44,0,0,0,48,0,0,0,52,0,0,0,56,0,0,0,60,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,4,8,16,32,64,128,192,2,2,3,4,5,6,6,6,0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,18,0,0,0,22,0,0,0,26,0,0,0,34,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,16,0,0,0,218,0,0,0,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,7,0,0,0,53,0,0,0,117,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,44,0,0,0,60,0,0,0,76,0,0,0,80,0,0,0,80,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,33,0,0,0,33,0,0,0,33,0,0,0,33,0,0,0,33,0,0,0,0,0,0,0,128,22,0,0,0,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,111,112,116,105,111,110,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,46,42,115,0,53,0,0,0,135,104,87,173,1,0,0,0,57,0,0,0,126,229,215,60,2,0,0,0,120,0,0,0,63,137,105,55,3,0,0,0,29,0,0,0,125,7,6,14,6,0,0,0,149,0,0,0,200,93,44,28,4,0,0,0,216,0,0,0,1,231,133,188,5,0,0,0,40,0,0,0,96,197,185,70,7,0,0,0,0,0,0,0,82,97,114,33,26,7,0,85,110,105,113,117,69,33,0,0,117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,115,0,0,0,0,117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,99,0,0,0,0,255,255,255,255,0,0,0,0,4,4,6,6,0,0,7,7,4,4,0,0,4,4,0,0,0,160,0,0,0,192,0,0,0,208,0,0,0,224,0,0,0,234,0,0,0,238,0,0,0,240,0,0,0,242,0,0,64,242,0,0,255,255,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,208,0,0,0,224,0,0,0,234,0,0,0,238,0,0,0,240,0,0,0,242,0,0,0,242,0,0,255,255,0,0,0,0,0,0,0,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,8,0,0,0,36,0,0,0,238,0,0,128,254,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,0,0,0,0,16,0,0,0,36,0,0,0,128,0,0,0,192,0,0,0,250,0,0,255,255,0,0,255,255,0,0,255,255,0,0,0,32,0,0,0,192,0,0,0,224,0,0,0,240,0,0,0,242,0,0,0,242,0,0,224,247,0,0,255,255,0,0,0,128,0,0,0,192,0,0,0,224,0,0,0,242,0,0,0,242,0,0,0,242,0,0,0,242,0,0,0,242,0,0,255,255,0,0,0,0,0,0,97,109,98,105,103,117,111,117,115,32,111,112,116,105,111,110,32,45,45,32,37,46,42,115,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,37,115,47,99,111,109,109,101,110,116,115,0,0,0,0,0,105,110,32,112,112,109,95,100,101,99,111,100,101,95,115,121,109,98,111,108,50,10,0,0,110,117,109,98,101,114,32,61,32,37,100,10,0,0,0,0,109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,105,110,32,99,114,101,97,116,101,95,99,104,105,108,100,10,0,0,0,0,0,0,0,0,80,80,77,32,108,101,110,103,116,104,58,32,37,100,10,0,105,110,32,99,114,101,97,116,101,95,115,117,99,99,101,115,115,111,114,115,10,0,0,0,80,80,77,32,110,101,120,116,32,99,104,97,114,58,32,37,100,10,0,0,0,0,0,0,105,110,32,114,101,115,116,97,114,116,95,109,111,100,101,108,95,114,97,114,101,10,0,0,80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0,80,80,77,32,99,104,97,114,58,32,37,100,10,0,0,0,105,110,32,117,112,100,97,116,101,95,109,111,100,101,108,10,0,0,0,0,0,0,0,0,85,110,112,80,116,114,32,61,32,37,100,10,0,0,0,0,112,112,109,95,100,101,99,111,100,101,95,105,110,105,116,32,100,111,110,101,58,32,37,100,10,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,58,32,37,100,0,0,114,97,114,95,103,101,116,95,99,104,97,114,32,61,32,37,117,10,0,0,0,0,0,0,105,110,32,117,110,112,95,119,114,105,116,101,95,100,97,116,97,32,108,101,110,103,116,104,61,37,100,10,0,0,0,0,100,101,99,111,100,101,95,110,117,109,98,101,114,58,32,98,105,116,115,61,37,100,10,0,112,112,109,95,100,101,99,111,100,101,95,105,110,105,116,32,69,115,99,67,104,97,114,61,37,100,10,0,0,0,0,0,82,101,97,100,84,97,98,108,101,115,32,102,105,110,105,115,104,101,100,10,0,0,0,0,67,97,108,108,105,110,103,32,112,112,109,95,100,101,99,111,100,101,95,105,110,105,116,10,0,0,0,0,0,0,0,0,66,105,116,70,105,101,108,100,32,61,32,48,120,37,120,10,0,0,0,0,0,0,0,0,103,108,111,98,97,108,95,115,105,122,101,58,32,37,108,100,10,0,0,0,0,0,0,0,112,112,109,95,100,101,99,111,100,101,95,105,110,105,116,32,109,97,120,95,111,114,100,101,114,61,37,100,10,0,0,0,105,110,32,101,120,101,99,117,116,101,95,99,111,100,101,10,0,0,0,0,0,0,0,0,105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,97,114,99,104,105,118,101,32,116,121,112,101,44,32,111,110,108,121,32,112,108,97,105,110,32,82,65,82,32,50,46,48,32,115,117,112,112,111,114,116,101,100,40,110,111,114,109,97,108,32,97,110,100,32,115,111,108,105,100,32,97,114,99,104,105,118,101,115,41,44,32,83,70,88,32,97,110,100,32,86,111,108,117,109,101,115,32,97,114,101,32,78,79,84,32,115,117,112,112,111,114,116,101,100,33,10,0,0,0,0,0,0,105,110,32,117,110,112,95,119,114,105,116,101,95,98,117,102,10,0,0,0,0,0,0,0,86,77,32,80,80,77,32,99,111,100,101,32,108,101,110,103,116,104,58,32,37,100,10,0,78,101,119,70,105,108,101,61,37,100,32,78,101,119,84,97,98,108,101,61,37,100,32,84,97,98,108,101,115,82,101,97,100,61,37,100,10,0,0,0,103,108,111,98,97,108,95,100,97,116,97,91,37,100,93,32,61,32,37,100,10,0,0,0,100,101,99,111,100,101,95,110,117,109,98,101,114,32,66,105,116,70,105,101,108,100,61,37,117,10,0,0,0,0,0,0,105,110,105,116,95,114,91,37,100,93,61,37,117,10,0,0,37,115,58,32,0,0,0,0,112,114,103,46,105,110,105,116,95,114,91,37,100,93,32,61,32,37,117,10,0,0,0,0,37,115,10,0,0,0,0,0,98,108,111,99,107,95,108,101,110,103,116,104,61,37,117,10,0,0,0,0,0,0,0,0,105,110,32,114,101,97,100,95,116,97,98,108,101,115,50,48,10,0,0,0,0,0,0,0,98,108,111,99,107,95,115,116,97,114,116,61,37,117,10,0,37,115,10,0,0,0,0,0,110,101,119,95,102,105,108,116,101,114,61,37,100,10,0,0,112,112,109,95,100,101,99,111,100,101,95,105,110,105,116,32,77,97,120,77,66,61,37,100,10,0,0,0,0,0,0,0,70,105,108,116,101,114,115,46,110,117,109,95,105,116,101,109,115,61,37,100,10,0,0,0,37,115,58,32,0,0,0,0,115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,102,105,108,116,101,114,95,112,111,115,32,61,32,37,117,10,0,0,0,0,0,0,0,0,105,110,32,97,100,100,95,118,109,95,99,111,100,101,32,102,105,114,115,116,95,98,121,116,101,61,48,120,37,120,32,99,111,100,101,95,115,105,122,101,61,37,100,10,0,0,0,0,86,77,32,99,111,100,101,32,108,101,110,103,116,104,58,32,37,100,10,0,0,0,0,0,37,115,58,32,0,0,0,0,114,101,97,100,95,98,108,111,99,107,32,111,117,116,32,111,102,102,115,101,116,61,37,108,100,10,0,0,0,0,0,0,105,110,32,114,97,114,95,117,110,112,97,99,107,50,48,10,0,0,0,0,0,0,0,0,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0,0,0,0,32,104,101,97,100,95,115,105,122,101,61,37,117,10,0,0,105,110,32,117,112,100,97,116,101,49,10,0,0,0,0,0,105,110,32,117,110,112,95,119,114,105,116,101,95,98,117,102,95,111,108,100,10,0,0,0,114,101,97,100,95,98,108,111,99,107,32,111,102,102,115,101,116,61,37,108,100,10,0,0,105,110,32,112,112,109,95,100,101,99,111,100,101,95,115,121,109,98,111,108,49,10,0,0,37,115,47,37,108,117,46,117,114,97,0,0,0,0,0,0,105,110,32,112,112,109,95,100,101,99,111,100,101,95,98,105,110,95,115,121,109,98,111,108,10,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,100,101,115,116,95,117,110,112,95,115,105,122,101,32,61,32,37,108,100,10,0,0,0,0,37,115,47,37,108,117,46,99,109,116,0,0,0,0,0,0,58,32,0,0,0,0,0,0,105,110,32,114,101,115,99,97,108,101,10,0,0,0,0,0,37,115,47,109,97,105,110,46,99,109,116,0,0,0,0,0,105,110,32,117,112,100,97,116,101,50,10,0,0,0,0,0,112,112,109,95,100,101,99,111,100,101,95,105,110,105,116,32,82,101,115,101,116,61,37,100,10,0,0,0,0,0,0,0,47,116,109,112,47,117,110,114,97,114,95,116,109,112,102,95,37,48,54,100,0,0,0,0,0,0,0,0,80,15,0,0,16,0,0,0,22,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,15,0,0,16,0,0,0,6,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,0,0,0,0,8,15,0,0,0,0,0,0,24,15,0,0,72,15,0,0,0,0,0,0,0,0,0,0,40,15,0,0,80,15,0,0,0,0,0,0,0,4,8,16,32,64,128,192,2,2,3,4,5,6,6,6,0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,7,0,0,0,0,0,0,0,96,31,0,0,232,35,0,0,112,40,0,0,248,44,0,0,124,0,0,0,0,0,0,0,215,19,149,35,73,197,192,205,249,28,16,119,48,221,2,42,232,1,177,233,14,88,219,25,223,195,244,90,87,239,153,137,255,199,147,70,92,66,246,13,216,40,62,29,217,230,86,6,71,24,171,196,101,113,218,123,93,91,163,178,202,67,44,235,107,250,75,234,49,167,125,211,83,114,157,144,32,193,143,36,158,124,247,187,89,214,141,47,121,228,61,130,213,194,174,251,97,110,54,229,115,57,152,94,105,243,212,55,209,245,63,11,164,200,31,156,81,176,227,21,76,99,139,188,127,17,248,51,207,120,189,210,8,226,41,72,183,203,135,165,166,60,98,7,122,38,155,170,69,172,252,238,39,134,59,128,236,27,240,80,131,3,85,206,145,79,154,142,159,220,201,133,74,64,20,129,224,185,138,103,173,182,43,34,254,82,198,151,231,180,58,10,118,26,102,12,50,132,22,191,136,111,162,179,45,4,148,108,161,56,78,126,242,222,15,175,146,23,33,241,181,190,77,225,0,46,169,186,68,95,237,65,53,208,253,168,9,18,100,52,116,184,160,96,109,37,30,106,140,104,150,5,204,117,112,84,7,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,25,14,9,7,5,5,4,4,4,3,3,3,2,2,2,2,0,128,0,0,0,0,0,0,0,64,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((3912)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((3920)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((3936)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var ___tm_current=allocate(4*26, "i8", ALLOC_STATIC);
  var ___tm_timezones={};
  var __tzname=allocate(8, "i32*", ALLOC_STATIC);
  var __daylight=allocate(1, "i32*", ALLOC_STATIC);
  var __timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:35,EIDRM:36,ECHRNG:37,EL2NSYNC:38,EL3HLT:39,EL3RST:40,ELNRNG:41,EUNATCH:42,ENOCSI:43,EL2HLT:44,EDEADLK:45,ENOLCK:46,EBADE:50,EBADR:51,EXFULL:52,ENOANO:53,EBADRQC:54,EBADSLT:55,EDEADLOCK:56,EBFONT:57,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:74,ELBIN:75,EDOTDOT:76,EBADMSG:77,EFTYPE:79,ENOTUNIQ:80,EBADFD:81,EREMCHG:82,ELIBACC:83,ELIBBAD:84,ELIBSCN:85,ELIBMAX:86,ELIBEXEC:87,ENOSYS:88,ENMFILE:89,ENOTEMPTY:90,ENAMETOOLONG:91,ELOOP:92,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:106,EPROTOTYPE:107,ENOTSOCK:108,ENOPROTOOPT:109,ESHUTDOWN:110,ECONNREFUSED:111,EADDRINUSE:112,ECONNABORTED:113,ENETUNREACH:114,ENETDOWN:115,ETIMEDOUT:116,EHOSTDOWN:117,EHOSTUNREACH:118,EINPROGRESS:119,EALREADY:120,EDESTADDRREQ:121,EMSGSIZE:122,EPROTONOSUPPORT:123,ESOCKTNOSUPPORT:124,EADDRNOTAVAIL:125,ENETRESET:126,EISCONN:127,ENOTCONN:128,ETOOMANYREFS:129,EPROCLIM:130,EUSERS:131,EDQUOT:132,ESTALE:133,ENOTSUP:134,ENOMEDIUM:135,ENOSHARE:136,ECASECLASH:137,EILSEQ:138,EOVERFLOW:139,ECANCELED:140,ENOTRECOVERABLE:141,EOWNERDEAD:142,ESTRPIPE:143};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,createFileHandle:function (stream, fd) {
        if (typeof stream === 'undefined') {
          stream = null;
        }
        if (!fd) {
          if (stream && stream.socket) {
            for (var i = 1; i < 64; i++) {
              if (!FS.streams[i]) {
                fd = i;
                break;
              }
            }
            assert(fd, 'ran out of low fds for sockets');
          } else {
            fd = Math.max(FS.streams.length, 64);
            for (var i = FS.streams.length; i < fd; i++) {
              FS.streams[i] = null; // Keep dense
            }
          }
        }
        // Close WebSocket first if we are about to replace the fd (i.e. dup2)
        if (FS.streams[fd] && FS.streams[fd].socket && FS.streams[fd].socket.close) {
          FS.streams[fd].socket.close();
        }
        FS.streams[fd] = stream;
        return fd;
      },removeFileHandle:function (fd) {
        FS.streams[fd] = null;
      },joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },staticInit:function () {
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        FS.createFolder('/', 'dev', true, true);
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function createSimpleOutput() {
          var fn = function (val) {
            if (val === null || val === 10) {
              fn.printer(fn.buffer.join(''));
              fn.buffer = [];
            } else {
              fn.buffer.push(utf8.processCChar(val));
            }
          };
          return fn;
        }
        if (!output) {
          stdoutOverridden = false;
          output = createSimpleOutput();
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = createSimpleOutput();
        }
        if (!error.printer) error.printer = Module['printErr'];
        if (!error.buffer) error.buffer = [];
        // Create the I/O devices.
        var stdin = FS.createDevice('/dev', 'stdin', input);
        stdin.isTerminal = !stdinOverridden;
        var stdout = FS.createDevice('/dev', 'stdout', null, output);
        stdout.isTerminal = !stdoutOverridden;
        var stderr = FS.createDevice('/dev', 'stderr', null, error);
        stderr.isTerminal = !stderrOverridden;
        FS.createDevice('/dev', 'tty', input, output);
        FS.createDevice('/dev', 'null', function(){}, function(){});
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        // see previous TODO on stdin etc.: assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].object.isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[(((s)+(i))|0)]=result.charCodeAt(i);
      }
      HEAP8[(((s)+(i))|0)]=0;
      return s;
    }
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
      var mode = HEAP32[((varargs)>>2)];
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id;
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        id = FS.createFileHandle({
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        });
      } else {
        id = FS.createFileHandle({
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        });
      }
      FS.checkStreams();
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }
  function _recv(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EAGAIN); // no data, and all sockets are nonblocking, so this is the right behavior
        return -1;
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else if (offset >= stream.object.contents.length) {
        return 0;
      } else {
        var bytesRead = 0;
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        assert(size >= 0);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
        return _recv(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === undefined && bytesRead === 0) {
                ___setErrNo(ERRNO_CODES.EAGAIN);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          assert(bytesRead >= -1);
          if (bytesRead != -1) {
            stream.position += bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.streams[stream];
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  var _abs=Math.abs;
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      var fmt = (mode & 0170000);
      if (fmt !== 0100000 && fmt !== 0020000 &&
          fmt !== 0060000 && fmt !== 0010000 &&
          fmt !== 0140000) {
        // not valid formats for mknod
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      if (fmt === 0020000 || fmt === 0060000 ||
          fmt === 0010000 || fmt === 0140000) {
        // not supported currently
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      path = FS.analyzePath(path);
      var properties = { contents: [], isFolder: false };  // S_IFDIR.
      try {
        FS.createObject(path.parentObject, path.name, properties,
                        mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        return 0;
      } catch (e) {
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      path = FS.analyzePath(path);
      var properties = { contents: [], isFolder: true };
      try {
        FS.createObject(path.parentObject, path.name, properties,
                        mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        return 0;
      } catch (e) {
        return -1;
      }
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
  function _send(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      info.sender(HEAPU8.subarray(buf, buf+len));
      return len;
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
          return _send(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }var _ntohs=_htons;
  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }var _ntohl=_htonl;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }function _strncasecmp(px, py, n) {
      px = px|0; py = py|0; n = n|0;
      var i = 0, x = 0, y = 0;
      while ((i>>>0) < (n>>>0)) {
        x = _tolower(HEAP8[(((px)+(i))|0)])|0;
        y = _tolower(HEAP8[(((py)+(i))|0)])|0;
        if (((x|0) == (y|0)) & ((x|0) == 0)) return 0;
        if ((x|0) == 0) return -1;
        if ((y|0) == 0) return 1;
        if ((x|0) == (y|0)) {
          i = (i + 1)|0;
          continue;
        } else {
          return ((x>>>0) > (y>>>0) ? 1 : -1)|0;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      px = px|0; py = py|0;
      return _strncasecmp(px, py, -1)|0;
    }
  function _abort() {
      Module['abort']();
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function ___gxx_personality_v0() {
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(((poolPtr)+(j))|0)]=line.charCodeAt(j);
        }
        HEAP8[(((poolPtr)+(j))|0)]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"No message of desired type",36:"Identifier removed",37:"Channel number out of range",38:"Level 2 not synchronized",39:"Level 3 halted",40:"Level 3 reset",41:"Link number out of range",42:"Protocol driver not attached",43:"No CSI structure available",44:"Level 2 halted",45:"Deadlock condition",46:"No record locks available",50:"Invalid exchange",51:"Invalid request descriptor",52:"Exchange full",53:"No anode",54:"Invalid request code",55:"Invalid slot",56:"File locking deadlock error",57:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",74:"Multihop attempted",75:"Inode is remote (not really error)",76:"Cross mount point (not really error)",77:"Trying to read unreadable message",79:"Inappropriate file type or format",80:"Given log. name not unique",81:"f.d. invalid for this operation",82:"Remote address changed",83:"Can\t access a needed shared lib",84:"Accessing a corrupted shared lib",85:".lib section in a.out corrupted",86:"Attempting to link in too many libs",87:"Attempting to exec a shared library",88:"Function not implemented",89:"No more files",90:"Directory not empty",91:"File or path name too long",92:"Too many symbolic links",95:"Operation not supported on transport endpoint",96:"Protocol family not supported",104:"Connection reset by peer",105:"No buffer space available",106:"Address family not supported by protocol family",107:"Protocol wrong type for socket",108:"Socket operation on non-socket",109:"Protocol not available",110:"Can't send after socket shutdown",111:"Connection refused",112:"Address already in use",113:"Connection aborted",114:"Network is unreachable",115:"Network interface is not configured",116:"Connection timed out",117:"Host is down",118:"Host is unreachable",119:"Connection already in progress",120:"Socket already connected",121:"Destination address required",122:"Message too long",123:"Unknown protocol",124:"Socket type not supported",125:"Address not available",126:"ENETRESET",127:"Socket is already connected",128:"Socket is not connected",129:"TOOMANYREFS",130:"EPROCLIM",131:"EUSERS",132:"EDQUOT",133:"ESTALE",134:"Not supported",135:"No medium (in tape drive)",136:"No such host or network path",137:"Filename exists with different case",138:"EILSEQ",139:"Value too large for defined data type",140:"Operation canceled",141:"State not recoverable",142:"Previous owner died",143:"Streams pipe error"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }
  function _isspace(chr) {
      switch(chr) {
        case 32:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          return true;
        default:
          return false;
      };
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
___buildEnvironment(ENV);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt20bad_array_new_lengthC2Ev,0,__verrx,0,__ZNSt20bad_array_new_lengthD0Ev,0,__warn,0,__verr
,0,__err,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt20bad_array_new_length4whatEv,0,__ZNSt9bad_allocC2Ev
,0,__ZNSt9bad_allocD0Ev,0,__vwarn,0,__errx,0,__warnx,0,__vwarnx];
// EMSCRIPTEN_START_FUNCS
function _get_item_from_archive_list($archive) {
 var label = 0;
 var $1;
 $1=$archive;
 var $2=$1;
 var $3=(($2)|0);
 return $3;
}
function _get_next_from_archive_list($archive) {
 var label = 0;
 var $1;
 $1=$archive;
 var $2=$1;
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _get_name_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _get_name_size_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP16[(($3)>>1)];
 return $4;
}
function _get_pack_size_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _get_unp_size_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _get_host_os_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP8[($3)];
 return $4;
}
function _get_file_crc_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _get_file_time_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _get_unp_ver_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+28)|0);
 var $4=HEAP8[($3)];
 return $4;
}
function _get_method_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+29)|0);
 var $4=HEAP8[($3)];
 return $4;
}
function _get_file_attr_from_archive_entry($entry) {
 var label = 0;
 var $1;
 $1=$entry;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _unpack_init_data15($solid, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$solid;
   $2=$unpack_data;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$2;
   var $7=(($6+4255676)|0);
   HEAP32[(($7)>>2)]=0;
   var $8=$2;
   var $9=(($8+4255680)|0);
   HEAP32[(($9)>>2)]=0;
   var $10=$2;
   var $11=(($10+4255672)|0);
   HEAP32[(($11)>>2)]=0;
   var $12=$2;
   var $13=(($12+4255668)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=$2;
   var $15=(($14+4255664)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=$2;
   var $17=(($16+4255660)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=$2;
   var $19=(($18+4255656)|0);
   HEAP32[(($19)>>2)]=13568;
   var $20=$2;
   var $21=(($20+4255704)|0);
   HEAP32[(($21)>>2)]=8193;
   var $22=$2;
   var $23=(($22+4255700)|0);
   HEAP32[(($23)>>2)]=128;
   var $24=$2;
   var $25=(($24+4255696)|0);
   HEAP32[(($25)>>2)]=128;
   label = 3; break;
  case 3: 
   var $27=$2;
   var $28=(($27+4255692)|0);
   HEAP32[(($28)>>2)]=0;
   var $29=$2;
   var $30=(($29+4255652)|0);
   HEAP32[(($30)>>2)]=0;
   var $31=$2;
   var $32=(($31+4255684)|0);
   HEAP32[(($32)>>2)]=0;
   var $33=$2;
   var $34=(($33+4255688)|0);
   HEAP32[(($34)>>2)]=0;
   var $35=$2;
   var $36=(($35+4227096)|0);
   HEAP32[(($36)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _dos_to_unix_time($dosdatetime) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $m_time;
   var $tm;
   var $now=sp;
   $1=$dosdatetime;
   var $2=_time(0);
   HEAP32[(($now)>>2)]=$2;
   var $3=_localtime($now);
   $tm=$3;
   var $4=$tm;
   var $5=(($4+32)|0);
   HEAP32[(($5)>>2)]=-1;
   var $6=$1;
   var $7=$6 >>> 25;
   var $8=$7 & 127;
   var $9=((($8)+(80))|0);
   var $10=$tm;
   var $11=(($10+20)|0);
   HEAP32[(($11)>>2)]=$9;
   var $12=$1;
   var $13=$12 >>> 21;
   var $14=$13 & 15;
   var $15=((($14)-(1))|0);
   var $16=$tm;
   var $17=(($16+16)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$1;
   var $19=$18 >>> 16;
   var $20=$19 & 31;
   var $21=$tm;
   var $22=(($21+12)|0);
   HEAP32[(($22)>>2)]=$20;
   var $23=$1;
   var $24=$23 >>> 11;
   var $25=$24 & 31;
   var $26=$tm;
   var $27=(($26+8)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$1;
   var $29=$28 >>> 5;
   var $30=$29 & 63;
   var $31=$tm;
   var $32=(($31+4)|0);
   HEAP32[(($32)>>2)]=$30;
   var $33=$1;
   var $34=$33 << 1;
   var $35=$34 & 62;
   var $36=$tm;
   var $37=(($36)|0);
   HEAP32[(($37)>>2)]=$35;
   var $38=$tm;
   var $39=_mktime($38);
   $m_time=$39;
   var $40=$1;
   var $41=(($40)>>>(0)) >= 1949433856;
   if ($41) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $43=$m_time;
   var $44=(($43)|(0)) < 1879048192;
   if ($44) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $m_time=-1;
   label = 4; break;
  case 4: 
   var $47=$m_time;
   var $48=(($47)|(0)) < 0;
   if ($48) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $m_time=2147483647;
   label = 6; break;
  case 6: 
   var $51=$m_time;
   STACKTOP = sp;
   return $51;
  default: assert(0, "bad label: " + label);
 }
}
function _UnpackXX_fileoutput($outputfile, $rarmethod, $inputfile, $DestUnpSize, $UnpPackedSize, $Flags) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $filepos;
   var $intfd;
   var $retval;
   $2=$outputfile;
   $3=$rarmethod;
   $4=$inputfile;
   $5=$DestUnpSize;
   $6=$UnpPackedSize;
   $7=$Flags;
   $retval=0;
   var $8=$4;
   var $9=_ftell($8);
   $filepos=$9;
   var $10=$2;
   var $11=(($10)|(0))==0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 10; break;
  case 3: 
   var $14=HEAP32[((6264)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=_malloc(4266976);
   var $18=$17;
   HEAP32[((6264)>>2)]=$18;
   var $19=HEAP32[((6264)>>2)];
   var $20=(($19+4229904)|0);
   _ppm_constructor($20);
   label = 5; break;
  case 5: 
   var $22=HEAP32[((6264)>>2)];
   var $23=(($22+4249556)|0);
   var $24=(($23)|0);
   HEAP32[(($24)>>2)]=0;
   var $25=HEAP32[((6264)>>2)];
   var $26=(($25+4249524)|0);
   HEAP32[(($26)>>2)]=0;
   var $27=HEAP32[((6264)>>2)];
   var $28=(($27+4249516)|0);
   var $29=(($28)|0);
   HEAP32[(($29)>>2)]=0;
   var $30=HEAP32[((6264)>>2)];
   var $31=(($30+4249508)|0);
   var $32=(($31)|0);
   HEAP32[(($32)>>2)]=0;
   var $33=HEAP32[((6264)>>2)];
   var $34=(($33+4249516)|0);
   var $35=(($34+4)|0);
   HEAP32[(($35)>>2)]=0;
   var $36=HEAP32[((6264)>>2)];
   var $37=(($36+4249508)|0);
   var $38=(($37+4)|0);
   HEAP32[(($38)>>2)]=0;
   var $39=HEAP32[((6264)>>2)];
   var $40=(($39+4249596)|0);
   HEAP32[(($40)>>2)]=-1;
   var $41=$5;
   var $42$0=$41;
   var $42$1=((($41)|(0)) < 0 ? -1 : 0);
   var $43=HEAP32[((6264)>>2)];
   var $44=(($43+4249544)|0);
   var $st$0$0=(($44)|0);
   HEAP32[(($st$0$0)>>2)]=$42$0;
   var $st$1$1=(($44+4)|0);
   HEAP32[(($st$1$1)>>2)]=$42$1;
   var $45=$6;
   var $46=HEAP32[((6264)>>2)];
   var $47=(($46+4249552)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$2;
   var $49=_fileno($48);
   var $50=HEAP32[((6264)>>2)];
   var $51=(($50)|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=$4;
   var $53=_fileno($52);
   $intfd=$53;
   var $54=$intfd;
   var $55=$filepos;
   var $56=_lseek($54, $55, 0);
   var $57=$3;
   if ((($57)|(0))==29) {
    label = 6; break;
   }
   else if ((($57)|(0))==15) {
    label = 7; break;
   }
   else if ((($57)|(0))==20 | (($57)|(0))==26) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 6: 
   var $59=$intfd;
   var $60=$7;
   var $61=$60 & 16;
   var $62=HEAP32[((6264)>>2)];
   var $63=_rar_unpack29($59, $61, $62);
   $retval=$63;
   label = 9; break;
  case 7: 
   var $65=$intfd;
   var $66=$7;
   var $67=$66 & 16;
   var $68=HEAP32[((6264)>>2)];
   var $69=_rar_unpack15($65, $67, $68);
   $retval=$69;
   label = 9; break;
  case 8: 
   var $71=$intfd;
   var $72=$7;
   var $73=$72 & 16;
   var $74=HEAP32[((6264)>>2)];
   var $75=_rar_unpack20($71, $73, $74);
   $retval=$75;
   label = 9; break;
  case 9: 
   var $77=$4;
   var $78=$filepos;
   var $79=$6;
   var $80=((($78)+($79))|0);
   var $81=_fseek($77, $80, 0);
   var $82=$2;
   var $83=_fflush($82);
   var $84=$retval;
   $1=$84;
   label = 10; break;
  case 10: 
   var $86=$1;
   return $86;
  default: assert(0, "bad label: " + label);
 }
}
function _Unpack29_fileoutput($outputfile, $inputfile, $DestUnpSize, $UnpPackedSize, $Flags) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$outputfile;
 $2=$inputfile;
 $3=$DestUnpSize;
 $4=$UnpPackedSize;
 $5=$Flags;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 var $11=_UnpackXX_fileoutput($6, 29, $7, $8, $9, $10);
 return $11;
}
function _Unpack29($inputfile, $DestUnpSize, $UnpPackedSize, $Flags) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ofile;
   var $c;
   var $tmpfilename=sp;
   $1=$inputfile;
   $2=$DestUnpSize;
   $3=$UnpPackedSize;
   $4=$Flags;
   var $5=(($tmpfilename)|0);
   var $6=HEAP32[((6272)>>2)];
   var $7=_snprintf($5, 99, ((3760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
   var $8=HEAP32[((6272)>>2)];
   var $9=((($8)+(1))|0);
   HEAP32[((6272)>>2)]=$9;
   var $10=_tmpfile();
   $ofile=$10;
   var $11=$ofile;
   var $12=(($11)|(0))==0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 13; break;
  case 3: 
   var $15=$ofile;
   var $16=$1;
   var $17=$2;
   var $18=$3;
   var $19=$4;
   var $20=_Unpack29_fileoutput($15, $16, $17, $18, $19);
   var $21=HEAP32[((4648)>>2)];
   var $22=(($21)|(0))!=0;
   if ($22) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $24=$ofile;
   var $25=_fseek($24, 0, 0);
   label = 5; break;
  case 5: 
   var $27=$ofile;
   var $28=_feof($27);
   var $29=(($28)|(0))!=0;
   var $30=$29 ^ 1;
   if ($30) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $32=HEAP32[((4640)>>2)];
   var $33=HEAP32[(($32)>>2)];
   var $34=$2;
   var $35=(($33)>>>(0)) > (($34)>>>(0));
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 11; break;
  case 8: 
   var $38=$ofile;
   var $39=_fgetc($38);
   $c=$39;
   var $40=$c;
   var $41=(($40)|(0))==-1;
   if ($41) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $44=$c;
   var $45=(($44) & 255);
   var $46=HEAP32[((4640)>>2)];
   var $47=HEAP32[(($46)>>2)];
   var $48=HEAP32[((4648)>>2)];
   var $49=(($48+$47)|0);
   HEAP8[($49)]=$45;
   var $50=HEAP32[((4640)>>2)];
   var $51=HEAP32[(($50)>>2)];
   var $52=((($51)+(1))|0);
   HEAP32[(($50)>>2)]=$52;
   label = 5; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $55=$ofile;
   var $56=_fclose($55);
   label = 13; break;
  case 13: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_unpack15($fd, $solid, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $2=$fd;
   $3=$solid;
   $4=$unpack_data;
   var $5=$3;
   var $6=$4;
   _unpack_init_data($5, $6);
   var $7=$3;
   var $8=$4;
   _unpack_init_data15($7, $8);
   var $9=$2;
   var $10=$4;
   var $11=_unp_read_buf($9, $10);
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 36; break;
  case 3: 
   var $15=$3;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $18=$4;
   _init_huff($18);
   var $19=$4;
   var $20=(($19+4227084)|0);
   HEAP32[(($20)>>2)]=0;
   label = 6; break;
  case 5: 
   var $22=$4;
   var $23=(($22+4227088)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$4;
   var $26=(($25+4227084)|0);
   HEAP32[(($26)>>2)]=$24;
   label = 6; break;
  case 6: 
   var $28=$4;
   var $29=(($28+4249544)|0);
   var $ld$0$0=(($29)|0);
   var $30$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($29+4)|0);
   var $30$1=HEAP32[(($ld$1$1)>>2)];
   var $$etemp$2$0=-1;
   var $$etemp$2$1=-1;
   var $31$0 = _i64Add($30$0,$30$1,$$etemp$2$0,$$etemp$2$1); var $31$1 = tempRet0;
   var $st$3$0=(($29)|0);
   HEAP32[(($st$3$0)>>2)]=$31$0;
   var $st$4$1=(($29+4)|0);
   HEAP32[(($st$4$1)>>2)]=$31$1;
   var $32=$4;
   var $33=(($32+4249544)|0);
   var $ld$5$0=(($33)|0);
   var $34$0=HEAP32[(($ld$5$0)>>2)];
   var $ld$6$1=(($33+4)|0);
   var $34$1=HEAP32[(($ld$6$1)>>2)];
   var $$etemp$7$0=0;
   var $$etemp$7$1=0;
   var $35=(($34$1|0) >= ($$etemp$7$1|0)) & (((($34$1|0) >  ($$etemp$7$1|0)) | ($34$0>>>0) >= ($$etemp$7$0>>>0)));
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $37=$4;
   _get_flag_buf($37);
   var $38=$4;
   var $39=(($38+4255692)|0);
   HEAP32[(($39)>>2)]=8;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $42=$4;
   var $43=(($42+4249544)|0);
   var $ld$8$0=(($43)|0);
   var $44$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($43+4)|0);
   var $44$1=HEAP32[(($ld$9$1)>>2)];
   var $$etemp$10$0=0;
   var $$etemp$10$1=0;
   var $45=(($44$1|0) >= ($$etemp$10$1|0)) & (((($44$1|0) >  ($$etemp$10$1|0)) | ($44$0>>>0) >= ($$etemp$10$0>>>0)));
   if ($45) { label = 10; break; } else { label = 35; break; }
  case 10: 
   var $47=$4;
   var $48=(($47+4227084)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 & 4194303;
   HEAP32[(($48)>>2)]=$50;
   var $51=$4;
   var $52=(($51+4227076)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$4;
   var $55=(($54+4227096)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)-(30))|0);
   var $58=(($53)|(0)) > (($57)|(0));
   if ($58) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $60=$2;
   var $61=$4;
   var $62=_unp_read_buf($60, $61);
   var $63=(($62)|(0))!=0;
   if ($63) { label = 13; break; } else { label = 12; break; }
  case 12: 
   label = 35; break;
  case 13: 
   var $66=$4;
   var $67=(($66+4227088)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$4;
   var $70=(($69+4227084)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=((($68)-($71))|0);
   var $73=$72 & 4194303;
   var $74=(($73)>>>(0)) < 270;
   if ($74) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $76=$4;
   var $77=(($76+4227088)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$4;
   var $80=(($79+4227084)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($78)|(0))!=(($81)|(0));
   if ($82) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $84=$4;
   _unp_write_buf_old($84);
   label = 16; break;
  case 16: 
   var $86=$4;
   var $87=(($86+4255684)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88)|(0))!=0;
   if ($89) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $91=$4;
   _huff_decode($91);
   label = 9; break;
  case 18: 
   var $93=$4;
   var $94=(($93+4255692)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=((($95)-(1))|0);
   HEAP32[(($94)>>2)]=$96;
   var $97=(($96)|(0)) < 0;
   if ($97) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $99=$4;
   _get_flag_buf($99);
   var $100=$4;
   var $101=(($100+4255692)|0);
   HEAP32[(($101)>>2)]=7;
   label = 20; break;
  case 20: 
   var $103=$4;
   var $104=(($103+4255652)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=$105 & 128;
   var $107=(($106)|(0))!=0;
   if ($107) { label = 21; break; } else { label = 25; break; }
  case 21: 
   var $109=$4;
   var $110=(($109+4255652)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=$111 << 1;
   HEAP32[(($110)>>2)]=$112;
   var $113=$4;
   var $114=(($113+4255700)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$4;
   var $117=(($116+4255696)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($115)>>>(0)) > (($118)>>>(0));
   if ($119) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $121=$4;
   _long_lz($121);
   label = 24; break;
  case 23: 
   var $123=$4;
   _huff_decode($123);
   label = 24; break;
  case 24: 
   label = 34; break;
  case 25: 
   var $126=$4;
   var $127=(($126+4255652)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=$128 << 1;
   HEAP32[(($127)>>2)]=$129;
   var $130=$4;
   var $131=(($130+4255692)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=((($132)-(1))|0);
   HEAP32[(($131)>>2)]=$133;
   var $134=(($133)|(0)) < 0;
   if ($134) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $136=$4;
   _get_flag_buf($136);
   var $137=$4;
   var $138=(($137+4255692)|0);
   HEAP32[(($138)>>2)]=7;
   label = 27; break;
  case 27: 
   var $140=$4;
   var $141=(($140+4255652)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=$142 & 128;
   var $144=(($143)|(0))!=0;
   if ($144) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $146=$4;
   var $147=(($146+4255652)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=$148 << 1;
   HEAP32[(($147)>>2)]=$149;
   var $150=$4;
   var $151=(($150+4255700)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=$4;
   var $154=(($153+4255696)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($152)>>>(0)) > (($155)>>>(0));
   if ($156) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $158=$4;
   _huff_decode($158);
   label = 31; break;
  case 30: 
   var $160=$4;
   _long_lz($160);
   label = 31; break;
  case 31: 
   label = 33; break;
  case 32: 
   var $163=$4;
   var $164=(($163+4255652)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=$165 << 1;
   HEAP32[(($164)>>2)]=$166;
   var $167=$4;
   _short_lz($167);
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   label = 9; break;
  case 35: 
   var $171=$4;
   _unp_write_buf_old($171);
   $1=1;
   label = 36; break;
  case 36: 
   var $173=$1;
   return $173;
  default: assert(0, "bad label: " + label);
 }
}
function _init_huff($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   $1=$unpack_data;
   $i=0;
   label = 2; break;
  case 2: 
   var $3=$i;
   var $4=(($3)>>>(0)) < 256;
   if ($4) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $6=$i;
   var $7=$i;
   var $8=$1;
   var $9=(($8+4261852)|0);
   var $10=(($9+($7<<2))|0);
   HEAP32[(($10)>>2)]=$6;
   var $11=$i;
   var $12=$1;
   var $13=(($12+4260828)|0);
   var $14=(($13+($11<<2))|0);
   HEAP32[(($14)>>2)]=$6;
   var $15=$i;
   var $16=$1;
   var $17=(($16+4259804)|0);
   var $18=(($17+($15<<2))|0);
   HEAP32[(($18)>>2)]=$6;
   var $19=$i;
   var $20=$19 ^ -1;
   var $21=((($20)+(1))|0);
   var $22=$21 & 255;
   var $23=$i;
   var $24=$1;
   var $25=(($24+4262876)|0);
   var $26=(($25+($23<<2))|0);
   HEAP32[(($26)>>2)]=$22;
   var $27=$i;
   var $28=$27 << 8;
   var $29=$i;
   var $30=$1;
   var $31=(($30+4257756)|0);
   var $32=(($31+($29<<2))|0);
   HEAP32[(($32)>>2)]=$28;
   var $33=$i;
   var $34=$1;
   var $35=(($34+4255708)|0);
   var $36=(($35+($33<<2))|0);
   HEAP32[(($36)>>2)]=$28;
   var $37=$i;
   var $38=$i;
   var $39=$1;
   var $40=(($39+4256732)|0);
   var $41=(($40+($38<<2))|0);
   HEAP32[(($41)>>2)]=$37;
   var $42=$i;
   var $43=$42 ^ -1;
   var $44=((($43)+(1))|0);
   var $45=$44 & 255;
   var $46=$45 << 8;
   var $47=$i;
   var $48=$1;
   var $49=(($48+4258780)|0);
   var $50=(($49+($47<<2))|0);
   HEAP32[(($50)>>2)]=$46;
   label = 4; break;
  case 4: 
   var $52=$i;
   var $53=((($52)+(1))|0);
   $i=$53;
   label = 2; break;
  case 5: 
   var $55=$1;
   var $56=(($55+4263900)|0);
   var $57=$56;
   _memset($57, 0, 1024);
   var $58=$1;
   var $59=(($58+4264924)|0);
   var $60=$59;
   _memset($60, 0, 1024);
   var $61=$1;
   var $62=(($61+4265948)|0);
   var $63=$62;
   _memset($63, 0, 1024);
   var $64=$1;
   var $65=$1;
   var $66=(($65+4257756)|0);
   var $67=(($66)|0);
   var $68=$1;
   var $69=(($68+4264924)|0);
   var $70=(($69)|0);
   _corr_huff($64, $67, $70);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_flag_buf($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $flags;
   var $new_flags_place;
   var $flags_place;
   $1=$unpack_data;
   var $2=$1;
   var $3=$1;
   var $4=_getbits($3);
   var $5=_decode_num($2, $4, 5, ((1976)|0), ((1400)|0));
   $flags_place=$5;
   label = 2; break;
  case 2: 
   var $7=$flags_place;
   var $8=$1;
   var $9=(($8+4258780)|0);
   var $10=(($9+($7<<2))|0);
   var $11=HEAP32[(($10)>>2)];
   $flags=$11;
   var $12=$flags;
   var $13=$12 >>> 8;
   var $14=$1;
   var $15=(($14+4255652)|0);
   HEAP32[(($15)>>2)]=$13;
   var $16=$flags;
   var $17=((($16)+(1))|0);
   $flags=$17;
   var $18=$16 & 255;
   var $19=$1;
   var $20=(($19+4265948)|0);
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)+(1))|0);
   HEAP32[(($21)>>2)]=$23;
   $new_flags_place=$22;
   var $24=$flags;
   var $25=$24 & 255;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 5; break;
  case 4: 
   var $29=$1;
   var $30=$1;
   var $31=(($30+4258780)|0);
   var $32=(($31)|0);
   var $33=$1;
   var $34=(($33+4265948)|0);
   var $35=(($34)|0);
   _corr_huff($29, $32, $35);
   label = 2; break;
  case 5: 
   var $37=$new_flags_place;
   var $38=$1;
   var $39=(($38+4258780)|0);
   var $40=(($39+($37<<2))|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$flags_place;
   var $43=$1;
   var $44=(($43+4258780)|0);
   var $45=(($44+($42<<2))|0);
   HEAP32[(($45)>>2)]=$41;
   var $46=$flags;
   var $47=$new_flags_place;
   var $48=$1;
   var $49=(($48+4258780)|0);
   var $50=(($49+($47<<2))|0);
   HEAP32[(($50)>>2)]=$46;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _huff_decode($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $cur_byte;
   var $new_byte_place;
   var $length;
   var $distance;
   var $bit_field;
   var $byte_place;
   $1=$unpack_data;
   var $2=$1;
   var $3=_getbits($2);
   $bit_field=$3;
   var $4=$1;
   var $5=(($4+4255656)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)>>>(0)) > 30207;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=$bit_field;
   var $11=_decode_num($9, $10, 8, ((1920)|0), ((1288)|0));
   $byte_place=$11;
   label = 13; break;
  case 3: 
   var $13=$1;
   var $14=(($13+4255656)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)>>>(0)) > 24063;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $18=$1;
   var $19=$bit_field;
   var $20=_decode_num($18, $19, 6, ((1944)|0), ((1344)|0));
   $byte_place=$20;
   label = 12; break;
  case 5: 
   var $22=$1;
   var $23=(($22+4255656)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)>>>(0)) > 13823;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=$1;
   var $28=$bit_field;
   var $29=_decode_num($27, $28, 5, ((1976)|0), ((1400)|0));
   $byte_place=$29;
   label = 11; break;
  case 7: 
   var $31=$1;
   var $32=(($31+4255656)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)>>>(0)) > 3583;
   if ($34) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $36=$1;
   var $37=$bit_field;
   var $38=_decode_num($36, $37, 5, ((2008)|0), ((1456)|0));
   $byte_place=$38;
   label = 10; break;
  case 9: 
   var $40=$1;
   var $41=$bit_field;
   var $42=_decode_num($40, $41, 4, ((2040)|0), ((1512)|0));
   $byte_place=$42;
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $47=$byte_place;
   var $48=$47 & 255;
   $byte_place=$48;
   var $49=$1;
   var $50=(($49+4255684)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51)|(0))!=0;
   if ($52) { label = 14; break; } else { label = 22; break; }
  case 14: 
   var $54=$byte_place;
   var $55=(($54)|(0))==0;
   if ($55) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $57=$bit_field;
   var $58=(($57)>>>(0)) > 4095;
   if ($58) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $byte_place=256;
   label = 17; break;
  case 17: 
   var $61=$byte_place;
   var $62=((($61)-(1))|0);
   $byte_place=$62;
   var $63=(($62)|(0))==-1;
   if ($63) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $65=$1;
   var $66=_getbits($65);
   $bit_field=$66;
   var $67=$1;
   _addbits($67, 1);
   var $68=$bit_field;
   var $69=$68 & 32768;
   var $70=(($69)|(0))!=0;
   if ($70) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $72=$1;
   var $73=(($72+4255684)|0);
   HEAP32[(($73)>>2)]=0;
   var $74=$1;
   var $75=(($74+4255680)|0);
   HEAP32[(($75)>>2)]=0;
   label = 34; break;
  case 20: 
   var $77=$bit_field;
   var $78=$77 & 16384;
   var $79=(($78)|(0))!=0;
   var $80=$79 ? 4 : 3;
   $length=$80;
   var $81=$1;
   _addbits($81, 1);
   var $82=$1;
   var $83=$1;
   var $84=_getbits($83);
   var $85=_decode_num($82, $84, 5, ((1976)|0), ((1400)|0));
   $distance=$85;
   var $86=$distance;
   var $87=$86 << 5;
   var $88=$1;
   var $89=_getbits($88);
   var $90=$89 >>> 11;
   var $91=$87 | $90;
   $distance=$91;
   var $92=$1;
   _addbits($92, 5);
   var $93=$1;
   var $94=$distance;
   var $95=$length;
   _copy_string15($93, $94, $95);
   label = 34; break;
  case 21: 
   label = 26; break;
  case 22: 
   var $98=$1;
   var $99=(($98+4255680)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   var $102=(($100)|(0)) >= 16;
   if ($102) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $104=$1;
   var $105=(($104+4255692)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0))==0;
   if ($107) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $109=$1;
   var $110=(($109+4255684)|0);
   HEAP32[(($110)>>2)]=1;
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $113=$byte_place;
   var $114=$1;
   var $115=(($114+4255656)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=((($116)+($113))|0);
   HEAP32[(($115)>>2)]=$117;
   var $118=$1;
   var $119=(($118+4255656)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=$120 >>> 8;
   var $122=$1;
   var $123=(($122+4255656)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=((($124)-($121))|0);
   HEAP32[(($123)>>2)]=$125;
   var $126=$1;
   var $127=(($126+4255696)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=((($128)+(16))|0);
   HEAP32[(($127)>>2)]=$129;
   var $130=$1;
   var $131=(($130+4255696)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132)>>>(0)) > 255;
   if ($133) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $135=$1;
   var $136=(($135+4255696)|0);
   HEAP32[(($136)>>2)]=144;
   var $137=$1;
   var $138=(($137+4255700)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=$139 >>> 1;
   HEAP32[(($138)>>2)]=$140;
   label = 28; break;
  case 28: 
   var $142=$byte_place;
   var $143=$1;
   var $144=(($143+4255708)|0);
   var $145=(($144+($142<<2))|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=$146 >>> 8;
   var $148=(($147) & 255);
   var $149=$1;
   var $150=(($149+4227084)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=((($151)+(1))|0);
   HEAP32[(($150)>>2)]=$152;
   var $153=$1;
   var $154=(($153+32772)|0);
   var $155=(($154+$151)|0);
   HEAP8[($155)]=$148;
   var $156=$1;
   var $157=(($156+4249544)|0);
   var $ld$0$0=(($157)|0);
   var $158$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($157+4)|0);
   var $158$1=HEAP32[(($ld$1$1)>>2)];
   var $$etemp$2$0=-1;
   var $$etemp$2$1=-1;
   var $159$0 = _i64Add($158$0,$158$1,$$etemp$2$0,$$etemp$2$1); var $159$1 = tempRet0;
   var $st$3$0=(($157)|0);
   HEAP32[(($st$3$0)>>2)]=$159$0;
   var $st$4$1=(($157+4)|0);
   HEAP32[(($st$4$1)>>2)]=$159$1;
   label = 29; break;
  case 29: 
   var $161=$byte_place;
   var $162=$1;
   var $163=(($162+4255708)|0);
   var $164=(($163+($161<<2))|0);
   var $165=HEAP32[(($164)>>2)];
   $cur_byte=$165;
   var $166=$cur_byte;
   var $167=((($166)+(1))|0);
   $cur_byte=$167;
   var $168=$166 & 255;
   var $169=$1;
   var $170=(($169+4263900)|0);
   var $171=(($170+($168<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=((($172)+(1))|0);
   HEAP32[(($171)>>2)]=$173;
   $new_byte_place=$172;
   var $174=$cur_byte;
   var $175=$174 & 255;
   var $176=(($175)>>>(0)) > 161;
   if ($176) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $178=$1;
   var $179=$1;
   var $180=(($179+4255708)|0);
   var $181=(($180)|0);
   var $182=$1;
   var $183=(($182+4263900)|0);
   var $184=(($183)|0);
   _corr_huff($178, $181, $184);
   label = 32; break;
  case 31: 
   label = 33; break;
  case 32: 
   label = 29; break;
  case 33: 
   var $188=$new_byte_place;
   var $189=$1;
   var $190=(($189+4255708)|0);
   var $191=(($190+($188<<2))|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=$byte_place;
   var $194=$1;
   var $195=(($194+4255708)|0);
   var $196=(($195+($193<<2))|0);
   HEAP32[(($196)>>2)]=$192;
   var $197=$cur_byte;
   var $198=$new_byte_place;
   var $199=$1;
   var $200=(($199+4255708)|0);
   var $201=(($200+($198<<2))|0);
   HEAP32[(($201)>>2)]=$197;
   label = 34; break;
  case 34: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _long_lz($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $length;
   var $distance;
   var $distance_place;
   var $new_distance_place;
   var $old_avr2;
   var $old_avr3;
   var $bit_field;
   $1=$unpack_data;
   var $2=$1;
   var $3=(($2+4255680)|0);
   HEAP32[(($3)>>2)]=0;
   var $4=$1;
   var $5=(($4+4255700)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=((($6)+(16))|0);
   HEAP32[(($5)>>2)]=$7;
   var $8=$1;
   var $9=(($8+4255700)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)>>>(0)) > 255;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$1;
   var $14=(($13+4255700)|0);
   HEAP32[(($14)>>2)]=144;
   var $15=$1;
   var $16=(($15+4255696)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 >>> 1;
   HEAP32[(($16)>>2)]=$18;
   label = 3; break;
  case 3: 
   var $20=$1;
   var $21=(($20+4255668)|0);
   var $22=HEAP32[(($21)>>2)];
   $old_avr2=$22;
   var $23=$1;
   var $24=_getbits($23);
   $bit_field=$24;
   var $25=$1;
   var $26=(($25+4255668)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)>>>(0)) >= 122;
   if ($28) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $30=$1;
   var $31=$bit_field;
   var $32=_decode_num($30, $31, 3, ((1832)|0), ((1176)|0));
   $length=$32;
   label = 16; break;
  case 5: 
   var $34=$1;
   var $35=(($34+4255668)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)>>>(0)) >= 64;
   if ($37) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $39=$1;
   var $40=$bit_field;
   var $41=_decode_num($39, $40, 2, ((1872)|0), ((1232)|0));
   $length=$41;
   label = 15; break;
  case 7: 
   var $43=$bit_field;
   var $44=(($43)>>>(0)) < 256;
   if ($44) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $46=$bit_field;
   $length=$46;
   var $47=$1;
   _addbits($47, 16);
   label = 14; break;
  case 9: 
   $length=0;
   label = 10; break;
  case 10: 
   var $50=$bit_field;
   var $51=$length;
   var $52=$50 << $51;
   var $53=$52 & 32768;
   var $54=(($53)|(0))==0;
   if ($54) { label = 11; break; } else { label = 13; break; }
  case 11: 
   label = 12; break;
  case 12: 
   var $57=$length;
   var $58=((($57)+(1))|0);
   $length=$58;
   label = 10; break;
  case 13: 
   var $60=$1;
   var $61=$length;
   var $62=((($61)+(1))|0);
   _addbits($60, $62);
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $66=$length;
   var $67=$1;
   var $68=(($67+4255668)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=((($69)+($66))|0);
   HEAP32[(($68)>>2)]=$70;
   var $71=$1;
   var $72=(($71+4255668)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$73 >>> 5;
   var $75=$1;
   var $76=(($75+4255668)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=((($77)-($74))|0);
   HEAP32[(($76)>>2)]=$78;
   var $79=$1;
   var $80=_getbits($79);
   $bit_field=$80;
   var $81=$1;
   var $82=(($81+4255660)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83)>>>(0)) > 10495;
   if ($84) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $86=$1;
   var $87=$bit_field;
   var $88=_decode_num($86, $87, 5, ((1976)|0), ((1400)|0));
   $distance_place=$88;
   label = 22; break;
  case 18: 
   var $90=$1;
   var $91=(($90+4255660)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)>>>(0)) > 1791;
   if ($93) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $95=$1;
   var $96=$bit_field;
   var $97=_decode_num($95, $96, 5, ((2008)|0), ((1456)|0));
   $distance_place=$97;
   label = 21; break;
  case 20: 
   var $99=$1;
   var $100=$bit_field;
   var $101=_decode_num($99, $100, 4, ((2040)|0), ((1512)|0));
   $distance_place=$101;
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $104=$distance_place;
   var $105=$1;
   var $106=(($105+4255660)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=((($107)+($104))|0);
   HEAP32[(($106)>>2)]=$108;
   var $109=$1;
   var $110=(($109+4255660)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=$111 >>> 8;
   var $113=$1;
   var $114=(($113+4255660)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=((($115)-($112))|0);
   HEAP32[(($114)>>2)]=$116;
   label = 23; break;
  case 23: 
   var $118=$distance_place;
   var $119=$118 & 255;
   var $120=$1;
   var $121=(($120+4257756)|0);
   var $122=(($121+($119<<2))|0);
   var $123=HEAP32[(($122)>>2)];
   $distance=$123;
   var $124=$distance;
   var $125=((($124)+(1))|0);
   $distance=$125;
   var $126=$124 & 255;
   var $127=$1;
   var $128=(($127+4264924)|0);
   var $129=(($128+($126<<2))|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=((($130)+(1))|0);
   HEAP32[(($129)>>2)]=$131;
   $new_distance_place=$130;
   var $132=$distance;
   var $133=$132 & 255;
   var $134=(($133)|(0))!=0;
   if ($134) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $136=$1;
   var $137=$1;
   var $138=(($137+4257756)|0);
   var $139=(($138)|0);
   var $140=$1;
   var $141=(($140+4264924)|0);
   var $142=(($141)|0);
   _corr_huff($136, $139, $142);
   label = 26; break;
  case 25: 
   label = 27; break;
  case 26: 
   label = 23; break;
  case 27: 
   var $146=$new_distance_place;
   var $147=$1;
   var $148=(($147+4257756)|0);
   var $149=(($148+($146<<2))|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=$distance_place;
   var $152=$1;
   var $153=(($152+4257756)|0);
   var $154=(($153+($151<<2))|0);
   HEAP32[(($154)>>2)]=$150;
   var $155=$distance;
   var $156=$new_distance_place;
   var $157=$1;
   var $158=(($157+4257756)|0);
   var $159=(($158+($156<<2))|0);
   HEAP32[(($159)>>2)]=$155;
   var $160=$distance;
   var $161=$160 & 65280;
   var $162=$1;
   var $163=_getbits($162);
   var $164=$163 >>> 8;
   var $165=$161 | $164;
   var $166=$165 >>> 1;
   $distance=$166;
   var $167=$1;
   _addbits($167, 7);
   var $168=$1;
   var $169=(($168+4255672)|0);
   var $170=HEAP32[(($169)>>2)];
   $old_avr3=$170;
   var $171=$length;
   var $172=(($171)|(0))!=1;
   if ($172) { label = 28; break; } else { label = 36; break; }
  case 28: 
   var $174=$length;
   var $175=(($174)|(0))!=4;
   if ($175) { label = 29; break; } else { label = 36; break; }
  case 29: 
   var $177=$length;
   var $178=(($177)|(0))==0;
   if ($178) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $180=$distance;
   var $181=$1;
   var $182=(($181+4255704)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($180)>>>(0)) <= (($183)>>>(0));
   if ($184) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $186=$1;
   var $187=(($186+4255672)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=((($188)+(1))|0);
   HEAP32[(($187)>>2)]=$189;
   var $190=$1;
   var $191=(($190+4255672)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=$192 >>> 8;
   var $194=$1;
   var $195=(($194+4255672)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=((($196)-($193))|0);
   HEAP32[(($195)>>2)]=$197;
   label = 35; break;
  case 32: 
   var $199=$1;
   var $200=(($199+4255672)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201)>>>(0)) > 0;
   if ($202) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $204=$1;
   var $205=(($204+4255672)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=((($206)-(1))|0);
   HEAP32[(($205)>>2)]=$207;
   label = 34; break;
  case 34: 
   label = 35; break;
  case 35: 
   label = 36; break;
  case 36: 
   var $211=$length;
   var $212=((($211)+(3))|0);
   $length=$212;
   var $213=$distance;
   var $214=$1;
   var $215=(($214+4255704)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($213)>>>(0)) >= (($216)>>>(0));
   if ($217) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $219=$length;
   var $220=((($219)+(1))|0);
   $length=$220;
   label = 38; break;
  case 38: 
   var $222=$distance;
   var $223=(($222)>>>(0)) <= 256;
   if ($223) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $225=$length;
   var $226=((($225)+(8))|0);
   $length=$226;
   label = 40; break;
  case 40: 
   var $228=$old_avr3;
   var $229=(($228)>>>(0)) > 176;
   if ($229) { label = 43; break; } else { label = 41; break; }
  case 41: 
   var $231=$1;
   var $232=(($231+4255656)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=(($233)>>>(0)) >= 10752;
   if ($234) { label = 42; break; } else { label = 44; break; }
  case 42: 
   var $236=$old_avr2;
   var $237=(($236)>>>(0)) < 64;
   if ($237) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $239=$1;
   var $240=(($239+4255704)|0);
   HEAP32[(($240)>>2)]=32512;
   label = 45; break;
  case 44: 
   var $242=$1;
   var $243=(($242+4255704)|0);
   HEAP32[(($243)>>2)]=8193;
   label = 45; break;
  case 45: 
   var $245=$distance;
   var $246=$1;
   var $247=(($246+4229892)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=((($248)+(1))|0);
   HEAP32[(($247)>>2)]=$249;
   var $250=$1;
   var $251=(($250+4229876)|0);
   var $252=(($251+($248<<2))|0);
   HEAP32[(($252)>>2)]=$245;
   var $253=$1;
   var $254=(($253+4229892)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=$255 & 3;
   var $257=$1;
   var $258=(($257+4229892)|0);
   HEAP32[(($258)>>2)]=$256;
   var $259=$length;
   var $260=$1;
   var $261=(($260+4229900)|0);
   HEAP32[(($261)>>2)]=$259;
   var $262=$distance;
   var $263=$1;
   var $264=(($263+4229896)|0);
   HEAP32[(($264)>>2)]=$262;
   var $265=$1;
   var $266=$distance;
   var $267=$length;
   _copy_string15($265, $266, $267);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_dbgmsg($fmt, varrp) {
 var label = 0;
 var $1;
 $1=$fmt;
 return;
}
function _copy_string15($unpack_data, $distance, $length) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$unpack_data;
   $2=$distance;
   $3=$length;
   var $4=$3;
   var $5$0=$4;
   var $5$1=0;
   var $6=$1;
   var $7=(($6+4249544)|0);
   var $ld$0$0=(($7)|0);
   var $8$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($7+4)|0);
   var $8$1=HEAP32[(($ld$1$1)>>2)];
   var $9$0 = _i64Subtract($8$0,$8$1,$5$0,$5$1); var $9$1 = tempRet0;
   var $st$2$0=(($7)|0);
   HEAP32[(($st$2$0)>>2)]=$9$0;
   var $st$3$1=(($7+4)|0);
   HEAP32[(($st$3$1)>>2)]=$9$1;
   label = 2; break;
  case 2: 
   var $11=$3;
   var $12=((($11)-(1))|0);
   $3=$12;
   var $13=(($11)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$1;
   var $16=(($15+4227084)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$2;
   var $19=((($17)-($18))|0);
   var $20=$19 & 4194303;
   var $21=$1;
   var $22=(($21+32772)|0);
   var $23=(($22+$20)|0);
   var $24=HEAP8[($23)];
   var $25=$1;
   var $26=(($25+4227084)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$1;
   var $29=(($28+32772)|0);
   var $30=(($29+$27)|0);
   HEAP8[($30)]=$24;
   var $31=$1;
   var $32=(($31+4227084)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=((($33)+(1))|0);
   var $35=$34 & 4194303;
   var $36=$1;
   var $37=(($36+4227084)|0);
   HEAP32[(($37)>>2)]=$35;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_cmd_array_init($cmd_a) {
 var label = 0;
 var $1;
 $1=$cmd_a;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=$1;
 var $5=(($4+4)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function _sub_allocator_init($sub_alloc) {
 var label = 0;
 var $1;
 $1=$sub_alloc;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function _sub_allocator_get_allocated_memory($sub_alloc) {
 var label = 0;
 var $1;
 $1=$sub_alloc;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _short_lz($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $length;
   var $save_length;
   var $last_distance;
   var $distance;
   var $bit_field;
   var $distance_place;
   $1=$unpack_data;
   var $2=$1;
   var $3=(($2+4255680)|0);
   HEAP32[(($3)>>2)]=0;
   var $4=$1;
   var $5=_getbits($4);
   $bit_field=$5;
   var $6=$1;
   var $7=(($6+4255688)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==2;
   if ($9) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $11=$1;
   _addbits($11, 1);
   var $12=$bit_field;
   var $13=(($12)>>>(0)) >= 32768;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$1;
   var $16=$1;
   var $17=(($16+4229896)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$1;
   var $20=(($19+4229900)|0);
   var $21=HEAP32[(($20)>>2)];
   _copy_string15($15, $18, $21);
   label = 34; break;
  case 4: 
   var $23=$bit_field;
   var $24=$23 << 1;
   $bit_field=$24;
   var $25=$1;
   var $26=(($25+4255688)|0);
   HEAP32[(($26)>>2)]=0;
   label = 5; break;
  case 5: 
   var $28=$bit_field;
   var $29=$28 >>> 8;
   $bit_field=$29;
   var $30=$1;
   var $31=(($30+4255676)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)+(3))|0);
   HEAP32[((((188)|0))>>2)]=$33;
   HEAP32[((((244)|0))>>2)]=$33;
   var $34=$1;
   var $35=(($34+4255664)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)>>>(0)) < 37;
   if ($37) { label = 6; break; } else { label = 12; break; }
  case 6: 
   $length=0;
   label = 7; break;
  case 7: 
   var $40=$bit_field;
   var $41=$length;
   var $42=((112+($41<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$40 ^ $43;
   var $45=$length;
   var $46=((240+($45<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=255 >> (($47)|(0));
   var $49=$48 ^ -1;
   var $50=$44 & $49;
   var $51=(($50)|(0))==0;
   if ($51) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 11; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $55=$length;
   var $56=((($55)+(1))|0);
   $length=$56;
   label = 7; break;
  case 11: 
   var $58=$1;
   var $59=$length;
   var $60=((240+($59<<2))|0);
   var $61=HEAP32[(($60)>>2)];
   _addbits($58, $61);
   label = 18; break;
  case 12: 
   $length=0;
   label = 13; break;
  case 13: 
   var $64=$bit_field;
   var $65=$length;
   var $66=((48+($65<<2))|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$64 ^ $67;
   var $69=$length;
   var $70=((176+($69<<2))|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=255 >> (($71)|(0));
   var $73=$72 ^ -1;
   var $74=$68 & $73;
   var $75=(($74)|(0))==0;
   if ($75) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 17; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $79=$length;
   var $80=((($79)+(1))|0);
   $length=$80;
   label = 13; break;
  case 17: 
   var $82=$1;
   var $83=$length;
   var $84=((176+($83<<2))|0);
   var $85=HEAP32[(($84)>>2)];
   _addbits($82, $85);
   label = 18; break;
  case 18: 
   var $87=$length;
   var $88=(($87)>>>(0)) >= 9;
   if ($88) { label = 19; break; } else { label = 31; break; }
  case 19: 
   var $90=$length;
   var $91=(($90)|(0))==9;
   if ($91) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $93=$1;
   var $94=(($93+4255688)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=((($95)+(1))|0);
   HEAP32[(($94)>>2)]=$96;
   var $97=$1;
   var $98=$1;
   var $99=(($98+4229896)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$1;
   var $102=(($101+4229900)|0);
   var $103=HEAP32[(($102)>>2)];
   _copy_string15($97, $100, $103);
   label = 34; break;
  case 21: 
   var $105=$length;
   var $106=(($105)|(0))==14;
   if ($106) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $108=$1;
   var $109=(($108+4255688)|0);
   HEAP32[(($109)>>2)]=0;
   var $110=$1;
   var $111=$1;
   var $112=_getbits($111);
   var $113=_decode_num($110, $112, 3, ((1832)|0), ((1176)|0));
   var $114=((($113)+(5))|0);
   $length=$114;
   var $115=$1;
   var $116=_getbits($115);
   var $117=$116 >>> 1;
   var $118=$117 | 32768;
   $distance=$118;
   var $119=$1;
   _addbits($119, 15);
   var $120=$length;
   var $121=$1;
   var $122=(($121+4229900)|0);
   HEAP32[(($122)>>2)]=$120;
   var $123=$distance;
   var $124=$1;
   var $125=(($124+4229896)|0);
   HEAP32[(($125)>>2)]=$123;
   var $126=$1;
   var $127=$distance;
   var $128=$length;
   _copy_string15($126, $127, $128);
   label = 34; break;
  case 23: 
   var $130=$1;
   var $131=(($130+4255688)|0);
   HEAP32[(($131)>>2)]=0;
   var $132=$length;
   $save_length=$132;
   var $133=$1;
   var $134=(($133+4229892)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$length;
   var $137=((($136)-(9))|0);
   var $138=((($135)-($137))|0);
   var $139=$138 & 3;
   var $140=$1;
   var $141=(($140+4229876)|0);
   var $142=(($141+($139<<2))|0);
   var $143=HEAP32[(($142)>>2)];
   $distance=$143;
   var $144=$1;
   var $145=$1;
   var $146=_getbits($145);
   var $147=_decode_num($144, $146, 2, ((1872)|0), ((1232)|0));
   var $148=((($147)+(2))|0);
   $length=$148;
   var $149=$length;
   var $150=(($149)|(0))==257;
   if ($150) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $152=$save_length;
   var $153=(($152)|(0))==10;
   if ($153) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $155=$1;
   var $156=(($155+4255676)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=$157 ^ 1;
   HEAP32[(($156)>>2)]=$158;
   label = 34; break;
  case 26: 
   var $160=$distance;
   var $161=(($160)>>>(0)) > 256;
   if ($161) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $163=$length;
   var $164=((($163)+(1))|0);
   $length=$164;
   label = 28; break;
  case 28: 
   var $166=$distance;
   var $167=$1;
   var $168=(($167+4255704)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($166)>>>(0)) >= (($169)>>>(0));
   if ($170) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $172=$length;
   var $173=((($172)+(1))|0);
   $length=$173;
   label = 30; break;
  case 30: 
   var $175=$distance;
   var $176=$1;
   var $177=(($176+4229892)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=((($178)+(1))|0);
   HEAP32[(($177)>>2)]=$179;
   var $180=$1;
   var $181=(($180+4229876)|0);
   var $182=(($181+($178<<2))|0);
   HEAP32[(($182)>>2)]=$175;
   var $183=$1;
   var $184=(($183+4229892)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=$185 & 3;
   var $187=$1;
   var $188=(($187+4229892)|0);
   HEAP32[(($188)>>2)]=$186;
   var $189=$length;
   var $190=$1;
   var $191=(($190+4229900)|0);
   HEAP32[(($191)>>2)]=$189;
   var $192=$distance;
   var $193=$1;
   var $194=(($193+4229896)|0);
   HEAP32[(($194)>>2)]=$192;
   var $195=$1;
   var $196=$distance;
   var $197=$length;
   _copy_string15($195, $196, $197);
   label = 34; break;
  case 31: 
   var $199=$1;
   var $200=(($199+4255688)|0);
   HEAP32[(($200)>>2)]=0;
   var $201=$length;
   var $202=$1;
   var $203=(($202+4255664)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=((($204)+($201))|0);
   HEAP32[(($203)>>2)]=$205;
   var $206=$1;
   var $207=(($206+4255664)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=$208 >>> 4;
   var $210=$1;
   var $211=(($210+4255664)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=((($212)-($209))|0);
   HEAP32[(($211)>>2)]=$213;
   var $214=$1;
   var $215=$1;
   var $216=_getbits($215);
   var $217=_decode_num($214, $216, 5, ((1976)|0), ((1400)|0));
   var $218=$217 & 255;
   $distance_place=$218;
   var $219=$distance_place;
   var $220=$1;
   var $221=(($220+4256732)|0);
   var $222=(($221+($219<<2))|0);
   var $223=HEAP32[(($222)>>2)];
   $distance=$223;
   var $224=$distance_place;
   var $225=((($224)-(1))|0);
   $distance_place=$225;
   var $226=(($225)|(0))!=-1;
   if ($226) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $228=$distance;
   var $229=$1;
   var $230=(($229+4260828)|0);
   var $231=(($230+($228<<2))|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=((($232)-(1))|0);
   HEAP32[(($231)>>2)]=$233;
   var $234=$distance_place;
   var $235=$1;
   var $236=(($235+4256732)|0);
   var $237=(($236+($234<<2))|0);
   var $238=HEAP32[(($237)>>2)];
   $last_distance=$238;
   var $239=$last_distance;
   var $240=$1;
   var $241=(($240+4260828)|0);
   var $242=(($241+($239<<2))|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=((($243)+(1))|0);
   HEAP32[(($242)>>2)]=$244;
   var $245=$last_distance;
   var $246=$distance_place;
   var $247=((($246)+(1))|0);
   var $248=$1;
   var $249=(($248+4256732)|0);
   var $250=(($249+($247<<2))|0);
   HEAP32[(($250)>>2)]=$245;
   var $251=$distance;
   var $252=$distance_place;
   var $253=$1;
   var $254=(($253+4256732)|0);
   var $255=(($254+($252<<2))|0);
   HEAP32[(($255)>>2)]=$251;
   label = 33; break;
  case 33: 
   var $257=$length;
   var $258=((($257)+(2))|0);
   $length=$258;
   var $259=$distance;
   var $260=((($259)+(1))|0);
   $distance=$260;
   var $261=$1;
   var $262=(($261+4229892)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=((($263)+(1))|0);
   HEAP32[(($262)>>2)]=$264;
   var $265=$1;
   var $266=(($265+4229876)|0);
   var $267=(($266+($263<<2))|0);
   HEAP32[(($267)>>2)]=$260;
   var $268=$1;
   var $269=(($268+4229892)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=$270 & 3;
   var $272=$1;
   var $273=(($272+4229892)|0);
   HEAP32[(($273)>>2)]=$271;
   var $274=$length;
   var $275=$1;
   var $276=(($275+4229900)|0);
   HEAP32[(($276)>>2)]=$274;
   var $277=$distance;
   var $278=$1;
   var $279=(($278+4229896)|0);
   HEAP32[(($279)>>2)]=$277;
   var $280=$1;
   var $281=$distance;
   var $282=$length;
   _copy_string15($280, $281, $282);
   label = 34; break;
  case 34: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_num($unpack_data, $num, $start_pos, $dec_tab, $pos_tab) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   $1=$unpack_data;
   $2=$num;
   $3=$start_pos;
   $4=$dec_tab;
   $5=$pos_tab;
   var $6=$2;
   var $7=$6 & 65520;
   $2=$7;
   $i=0;
   label = 2; break;
  case 2: 
   var $9=$i;
   var $10=$4;
   var $11=(($10+($9<<2))|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$2;
   var $14=(($12)>>>(0)) <= (($13)>>>(0));
   if ($14) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $16=$3;
   var $17=((($16)+(1))|0);
   $3=$17;
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=((($19)+(1))|0);
   $i=$20;
   label = 2; break;
  case 5: 
   var $22=$1;
   var $23=$3;
   _addbits($22, $23);
   var $24=$2;
   var $25=$i;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=$i;
   var $29=((($28)-(1))|0);
   var $30=$4;
   var $31=(($30+($29<<2))|0);
   var $32=HEAP32[(($31)>>2)];
   var $35 = $32;label = 8; break;
  case 7: 
   var $35 = 0;label = 8; break;
  case 8: 
   var $35;
   var $36=((($24)-($35))|0);
   var $37=$3;
   var $38=(((16)-($37))|0);
   var $39=$36 >>> (($38)>>>(0));
   var $40=$3;
   var $41=$5;
   var $42=(($41+($40<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($39)+($43))|0);
   return $44;
  default: assert(0, "bad label: " + label);
 }
}
function _corr_huff($unpack_data, $char_set, $num_to_place) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $j;
   $1=$unpack_data;
   $2=$char_set;
   $3=$num_to_place;
   $i=7;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=(($5)|(0)) >= 0;
   if ($6) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $9=$j;
   var $10=(($9)|(0)) < 32;
   if ($10) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $12=$2;
   var $13=HEAP32[(($12)>>2)];
   var $14=$13 & -256;
   var $15=$i;
   var $16=$14 | $15;
   var $17=$2;
   HEAP32[(($17)>>2)]=$16;
   label = 6; break;
  case 6: 
   var $19=$j;
   var $20=((($19)+(1))|0);
   $j=$20;
   var $21=$2;
   var $22=(($21+4)|0);
   $2=$22;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $25=$i;
   var $26=((($25)-(1))|0);
   $i=$26;
   label = 2; break;
  case 9: 
   var $28=$3;
   var $29=$28;
   _memset($29, 0, 1024);
   $i=6;
   label = 10; break;
  case 10: 
   var $31=$i;
   var $32=(($31)|(0)) >= 0;
   if ($32) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $34=$i;
   var $35=(((7)-($34))|0);
   var $36=($35<<5);
   var $37=$i;
   var $38=$3;
   var $39=(($38+($37<<2))|0);
   HEAP32[(($39)>>2)]=$36;
   label = 12; break;
  case 12: 
   var $41=$i;
   var $42=((($41)-(1))|0);
   $i=$42;
   label = 10; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_cmd_array_reset($cmd_a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$cmd_a;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 6; break;
  case 3: 
   var $6=$1;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$1;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   _free($14);
   label = 5; break;
  case 5: 
   var $16=$1;
   var $17=(($16)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=$1;
   var $19=(($18+4)|0);
   HEAP32[(($19)>>2)]=0;
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_cmd_array_add($cmd_a, $num) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$cmd_a;
   $3=$num;
   var $4=$3;
   var $5=$2;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)+($4))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=$2;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=$2;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)*(40))&-1);
   var $17=_realloc($12, $16);
   var $18=$17;
   var $19=$2;
   var $20=(($19)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$2;
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $27=$2;
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)-(1))|0);
   var $31=$2;
   var $32=(($31)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+((($30)*(40))&-1))|0);
   var $35=$34;
   _memset($35, 0, 40);
   $1=1;
   label = 4; break;
  case 4: 
   var $37=$1;
   return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _ppm_constructor($ppm_data) {
 var label = 0;
 var $1;
 $1=$ppm_data;
 var $2=$1;
 var $3=(($2)|0);
 _sub_allocator_init($3);
 var $4=$1;
 var $5=(($4+568)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$1;
 var $7=(($6+572)|0);
 HEAP32[(($7)>>2)]=0;
 return;
}
function _ppm_destructor($ppm_data) {
 var label = 0;
 var $1;
 $1=$ppm_data;
 var $2=$1;
 var $3=(($2)|0);
 _sub_allocator_stop_sub_allocator($3);
 return;
}
function _sub_allocator_stop_sub_allocator($sub_alloc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$sub_alloc;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($7)|0);
   HEAP32[(($8)>>2)]=0;
   var $9=$1;
   var $10=(($9+340)|0);
   var $11=HEAP32[(($10)>>2)];
   _free($11);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ppm_decode_init($ppm_data, $fd, $unpack_data, $EscChar) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $max_order;
   var $Reset;
   var $MaxMB;
   $2=$ppm_data;
   $3=$fd;
   $4=$unpack_data;
   $5=$EscChar;
   var $6=$3;
   var $7=$4;
   var $8=_rar_get_char($6, $7);
   $max_order=$8;
   var $9=$max_order;
   _rar_dbgmsg(((2688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$9,tempInt));
   var $10=$max_order;
   var $11=$10 & 32;
   var $12=(($11)|(0))!=0;
   var $13=$12 ? 1 : 0;
   $Reset=$13;
   var $14=$Reset;
   _rar_dbgmsg(((3728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
   var $15=$Reset;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$3;
   var $19=$4;
   var $20=_rar_get_char($18, $19);
   $MaxMB=$20;
   var $21=$MaxMB;
   _rar_dbgmsg(((3184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
   label = 6; break;
  case 3: 
   var $23=$2;
   var $24=(($23)|0);
   var $25=_sub_allocator_get_allocated_memory($24);
   var $26=(($25)|(0))==0;
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=0;
   label = 19; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $30=$max_order;
   var $31=$30 & 64;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $34=$3;
   var $35=$4;
   var $36=_rar_get_char($34, $35);
   var $37=$5;
   HEAP32[(($37)>>2)]=$36;
   var $38=$5;
   var $39=HEAP32[(($38)>>2)];
   _rar_dbgmsg(((2552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$39,tempInt));
   label = 8; break;
  case 8: 
   var $41=$2;
   var $42=(($41+520)|0);
   var $43=$3;
   var $44=$4;
   _range_coder_init_decoder($42, $43, $44);
   var $45=$Reset;
   var $46=(($45)|(0))!=0;
   if ($46) { label = 9; break; } else { label = 18; break; }
  case 9: 
   var $48=$max_order;
   var $49=$48 & 31;
   var $50=((($49)+(1))|0);
   $max_order=$50;
   var $51=$max_order;
   var $52=(($51)|(0)) > 16;
   if ($52) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $54=$max_order;
   var $55=((($54)-(16))|0);
   var $56=((($55)*(3))&-1);
   var $57=((($56)+(16))|0);
   $max_order=$57;
   label = 11; break;
  case 11: 
   var $59=$max_order;
   var $60=(($59)|(0))==1;
   if ($60) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $62=$2;
   var $63=(($62)|0);
   _sub_allocator_stop_sub_allocator($63);
   $1=0;
   label = 19; break;
  case 13: 
   var $65=$2;
   var $66=(($65)|0);
   var $67=$MaxMB;
   var $68=((($67)+(1))|0);
   var $69=_sub_allocator_start_sub_allocator($66, $68);
   var $70=(($69)|(0))!=0;
   if ($70) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $72=$2;
   var $73=(($72)|0);
   _sub_allocator_stop_sub_allocator($73);
   $1=0;
   label = 19; break;
  case 15: 
   var $75=$2;
   var $76=$max_order;
   var $77=_start_model_rare($75, $76);
   var $78=(($77)|(0))!=0;
   if ($78) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $80=$2;
   var $81=(($80)|0);
   _sub_allocator_stop_sub_allocator($81);
   $1=0;
   label = 19; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $84=$2;
   var $85=(($84+568)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86)|(0))!=0;
   var $88=(($87)&(1));
   _rar_dbgmsg(((2392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$88,tempInt));
   var $89=$2;
   var $90=(($89+568)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|(0))!=0;
   var $93=(($92)&(1));
   $1=$93;
   label = 19; break;
  case 19: 
   var $95=$1;
   STACKTOP = sp;
   return $95;
  default: assert(0, "bad label: " + label);
 }
}
function _range_coder_init_decoder($coder, $fd, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   $1=$coder;
   $2=$fd;
   $3=$unpack_data;
   var $4=$1;
   var $5=(($4+4)|0);
   HEAP32[(($5)>>2)]=0;
   var $6=$1;
   var $7=(($6)|0);
   HEAP32[(($7)>>2)]=0;
   var $8=$1;
   var $9=(($8+8)|0);
   HEAP32[(($9)>>2)]=-1;
   $i=0;
   label = 2; break;
  case 2: 
   var $11=$i;
   var $12=(($11)|(0)) < 4;
   if ($12) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $14=$1;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 << 8;
   var $18=$2;
   var $19=$3;
   var $20=_rar_get_char($18, $19);
   var $21=$17 | $20;
   var $22=$1;
   var $23=(($22+4)|0);
   HEAP32[(($23)>>2)]=$21;
   label = 4; break;
  case 4: 
   var $25=$i;
   var $26=((($25)+(1))|0);
   $i=$26;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_start_sub_allocator($sub_alloc, $sa_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $t;
   var $alloc_size;
   $2=$sub_alloc;
   $3=$sa_size;
   var $4=$3;
   var $5=$4 << 20;
   $t=$5;
   var $6=$2;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$t;
   var $10=(($8)|(0))==(($9)|(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 6; break;
  case 3: 
   var $13=$2;
   _sub_allocator_stop_sub_allocator($13);
   var $14=$t;
   var $15=((((($14)>>>(0)))/(12))&-1);
   var $16=($15<<4);
   var $17=((($16)+(16))|0);
   $alloc_size=$17;
   var $18=$alloc_size;
   var $19=_malloc($18);
   var $20=$2;
   var $21=(($20+340)|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=(($19)|(0))==0;
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=0;
   label = 6; break;
  case 5: 
   var $25=$2;
   var $26=(($25+340)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$alloc_size;
   var $29=(($27+$28)|0);
   var $30=((($29)-(16))|0);
   var $31=$2;
   var $32=(($31+512)|0);
   HEAP32[(($32)>>2)]=$30;
   var $33=$t;
   var $34=$2;
   var $35=(($34)|0);
   HEAP32[(($35)>>2)]=$33;
   $1=1;
   label = 6; break;
  case 6: 
   var $37=$1;
   return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _start_model_rare($ppm_data, $max_order) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $k;
   var $m;
   var $step;
   var $ret;
   $2=$ppm_data;
   $3=$max_order;
   var $4=$2;
   var $5=(($4+1604)|0);
   HEAP8[($5)]=1;
   var $6=$3;
   var $7=$2;
   var $8=(($7+556)|0);
   HEAP32[(($8)>>2)]=$6;
   var $9=$2;
   var $10=_restart_model_rare($9);
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 14; break;
  case 3: 
   var $14=$2;
   var $15=(($14+1092)|0);
   var $16=(($15)|0);
   HEAP8[($16)]=0;
   var $17=$2;
   var $18=(($17+1092)|0);
   var $19=(($18+1)|0);
   HEAP8[($19)]=2;
   var $20=$2;
   var $21=(($20+1092)|0);
   var $22=(($21)|0);
   var $23=(($22+2)|0);
   _memset($23, 4, 9);
   var $24=$2;
   var $25=(($24+1092)|0);
   var $26=(($25)|0);
   var $27=(($26+11)|0);
   _memset($27, 6, 245);
   $i=0;
   label = 4; break;
  case 4: 
   var $29=$i;
   var $30=(($29)|(0)) < 3;
   if ($30) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $32=$i;
   var $33=(($32) & 255);
   var $34=$i;
   var $35=$2;
   var $36=(($35+836)|0);
   var $37=(($36+$34)|0);
   HEAP8[($37)]=$33;
   label = 6; break;
  case 6: 
   var $39=$i;
   var $40=((($39)+(1))|0);
   $i=$40;
   label = 4; break;
  case 7: 
   var $42=$i;
   $m=$42;
   $step=1;
   $k=1;
   label = 8; break;
  case 8: 
   var $44=$i;
   var $45=(($44)|(0)) < 256;
   if ($45) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $47=$m;
   var $48=(($47) & 255);
   var $49=$i;
   var $50=$2;
   var $51=(($50+836)|0);
   var $52=(($51+$49)|0);
   HEAP8[($52)]=$48;
   var $53=$k;
   var $54=((($53)-(1))|0);
   $k=$54;
   var $55=(($54)|(0))!=0;
   if ($55) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $57=$step;
   var $58=((($57)+(1))|0);
   $step=$58;
   $k=$58;
   var $59=$m;
   var $60=((($59)+(1))|0);
   $m=$60;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $63=$i;
   var $64=((($63)+(1))|0);
   $i=$64;
   label = 8; break;
  case 13: 
   var $66=$2;
   var $67=(($66+1348)|0);
   var $68=$67;
   _memset($68, 0, 64);
   var $69=$2;
   var $70=(($69+1348)|0);
   var $71=(($70)|0);
   var $72=(($71+64)|0);
   _memset($72, 8, 192);
   var $73=$2;
   var $74=(($73+3208)|0);
   var $75=(($74+2)|0);
   HEAP8[($75)]=7;
   $1=1;
   label = 14; break;
  case 14: 
   var $77=$1;
   return $77;
  default: assert(0, "bad label: " + label);
 }
}
function _ppm_decode_char($ppm_data, $fd, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $symbol;
   $2=$ppm_data;
   $3=$fd;
   $4=$unpack_data;
   var $5=$2;
   var $6=(($5+568)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   var $9=$2;
   var $10=(($9)|0);
   var $11=(($10+504)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($8)>>>(0)) <= (($12)>>>(0));
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $15=$2;
   var $16=(($15+568)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=$2;
   var $20=(($19)|0);
   var $21=(($20+512)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($18)>>>(0)) > (($22)>>>(0));
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=-1;
   label = 46; break;
  case 4: 
   var $26=$2;
   var $27=(($26+568)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30)&(65535));
   var $32=(($31)|(0))!=1;
   if ($32) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $34=$2;
   var $35=(($34+568)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+4)|0);
   var $38=$37;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$40;
   var $42=$2;
   var $43=(($42)|0);
   var $44=(($43+504)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($41)>>>(0)) <= (($45)>>>(0));
   if ($46) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $48=$2;
   var $49=(($48+568)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50+4)|0);
   var $52=$51;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$54;
   var $56=$2;
   var $57=(($56)|0);
   var $58=(($57+512)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($55)>>>(0)) > (($59)>>>(0));
   if ($60) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $1=-1;
   label = 46; break;
  case 8: 
   var $63=$2;
   var $64=$2;
   var $65=(($64+568)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=_ppm_decode_symbol1($63, $66);
   var $68=(($67)|(0))!=0;
   if ($68) { label = 10; break; } else { label = 9; break; }
  case 9: 
   $1=-1;
   label = 46; break;
  case 10: 
   label = 12; break;
  case 11: 
   var $72=$2;
   var $73=$2;
   var $74=(($73+568)|0);
   var $75=HEAP32[(($74)>>2)];
   _ppm_decode_bin_symbol($72, $75);
   label = 12; break;
  case 12: 
   var $77=$2;
   var $78=(($77+520)|0);
   _coder_decode($78);
   label = 13; break;
  case 13: 
   var $80=$2;
   var $81=(($80+576)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($82)|(0))!=0;
   var $84=$83 ^ 1;
   if ($84) { label = 14; break; } else { label = 30; break; }
  case 14: 
   label = 15; break;
  case 15: 
   var $87=$2;
   var $88=(($87+520)|0);
   var $89=(($88)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$2;
   var $92=(($91+520)|0);
   var $93=(($92)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=$2;
   var $96=(($95+520)|0);
   var $97=(($96+8)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=((($94)+($98))|0);
   var $100=$90 ^ $99;
   var $101=(($100)>>>(0)) < 16777216;
   if ($101) { var $121 = 1;label = 19; break; } else { label = 16; break; }
  case 16: 
   var $103=$2;
   var $104=(($103+520)|0);
   var $105=(($104+8)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)>>>(0)) < 32768;
   if ($107) { label = 17; break; } else { var $119 = 0;label = 18; break; }
  case 17: 
   var $109=$2;
   var $110=(($109+520)|0);
   var $111=(($110)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(((-$112))|0);
   var $114=$113 & 32767;
   var $115=$2;
   var $116=(($115+520)|0);
   var $117=(($116+8)|0);
   HEAP32[(($117)>>2)]=$114;
   var $119 = 1;label = 18; break;
  case 18: 
   var $119;
   var $121 = $119;label = 19; break;
  case 19: 
   var $121;
   if ($121) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $123=$2;
   var $124=(($123+520)|0);
   var $125=(($124+4)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$126 << 8;
   var $128=$3;
   var $129=$4;
   var $130=_rar_get_char($128, $129);
   var $131=$127 | $130;
   var $132=$2;
   var $133=(($132+520)|0);
   var $134=(($133+4)|0);
   HEAP32[(($134)>>2)]=$131;
   var $135=$2;
   var $136=(($135+520)|0);
   var $137=(($136+8)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$138 << 8;
   HEAP32[(($137)>>2)]=$139;
   var $140=$2;
   var $141=(($140+520)|0);
   var $142=(($141)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$143 << 8;
   HEAP32[(($142)>>2)]=$144;
   label = 15; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $147=$2;
   var $148=(($147+552)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=((($149)+(1))|0);
   HEAP32[(($148)>>2)]=$150;
   var $151=$2;
   var $152=(($151+568)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($153+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=$2;
   var $157=(($156+568)|0);
   HEAP32[(($157)>>2)]=$155;
   var $158=$2;
   var $159=(($158+568)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=$160;
   var $162=$2;
   var $163=(($162)|0);
   var $164=(($163+504)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($161)>>>(0)) <= (($165)>>>(0));
   if ($166) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $168=$2;
   var $169=(($168+568)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=$170;
   var $172=$2;
   var $173=(($172)|0);
   var $174=(($173+512)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($171)>>>(0)) > (($175)>>>(0));
   if ($176) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $1=-1;
   label = 46; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $180=$2;
   var $181=(($180+568)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182)|0);
   var $184=HEAP16[(($183)>>1)];
   var $185=(($184)&(65535));
   var $186=$2;
   var $187=(($186+544)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($185)|(0))==(($188)|(0));
   if ($189) { label = 22; break; } else { label = 27; break; }
  case 27: 
   var $191=$2;
   var $192=$2;
   var $193=(($192+568)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=_ppm_decode_symbol2($191, $194);
   var $196=(($195)|(0))!=0;
   if ($196) { label = 29; break; } else { label = 28; break; }
  case 28: 
   $1=-1;
   label = 46; break;
  case 29: 
   var $199=$2;
   var $200=(($199+520)|0);
   _coder_decode($200);
   label = 13; break;
  case 30: 
   var $202=$2;
   var $203=(($202+576)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204)|0);
   var $206=HEAP8[($205)];
   var $207=(($206)&(255));
   $symbol=$207;
   var $208=$2;
   var $209=(($208+552)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=(($210)|(0))!=0;
   if ($211) { label = 33; break; } else { label = 31; break; }
  case 31: 
   var $213=$2;
   var $214=(($213+576)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=(($215+4)|0);
   var $217=HEAP32[(($216)>>2)];
   var $218=$217;
   var $219=$2;
   var $220=(($219)|0);
   var $221=(($220+504)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=(($218)>>>(0)) > (($222)>>>(0));
   if ($223) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $225=$2;
   var $226=(($225+576)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=$2;
   var $231=(($230+572)|0);
   HEAP32[(($231)>>2)]=$229;
   var $232=$2;
   var $233=(($232+568)|0);
   HEAP32[(($233)>>2)]=$229;
   label = 38; break;
  case 33: 
   var $235=$2;
   var $236=_update_model($235);
   var $237=(($236)|(0))!=0;
   if ($237) { label = 35; break; } else { label = 34; break; }
  case 34: 
   $1=-1;
   label = 46; break;
  case 35: 
   var $240=$2;
   var $241=(($240+1604)|0);
   var $242=HEAP8[($241)];
   var $243=(($242)&(255));
   var $244=(($243)|(0))==0;
   if ($244) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $246=$2;
   _clear_mask($246);
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $250=$2;
   var $251=(($250+520)|0);
   var $252=(($251)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=$2;
   var $255=(($254+520)|0);
   var $256=(($255)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=$2;
   var $259=(($258+520)|0);
   var $260=(($259+8)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=((($257)+($261))|0);
   var $263=$253 ^ $262;
   var $264=(($263)>>>(0)) < 16777216;
   if ($264) { var $284 = 1;label = 43; break; } else { label = 40; break; }
  case 40: 
   var $266=$2;
   var $267=(($266+520)|0);
   var $268=(($267+8)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=(($269)>>>(0)) < 32768;
   if ($270) { label = 41; break; } else { var $282 = 0;label = 42; break; }
  case 41: 
   var $272=$2;
   var $273=(($272+520)|0);
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(((-$275))|0);
   var $277=$276 & 32767;
   var $278=$2;
   var $279=(($278+520)|0);
   var $280=(($279+8)|0);
   HEAP32[(($280)>>2)]=$277;
   var $282 = 1;label = 42; break;
  case 42: 
   var $282;
   var $284 = $282;label = 43; break;
  case 43: 
   var $284;
   if ($284) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $286=$2;
   var $287=(($286+520)|0);
   var $288=(($287+4)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=$289 << 8;
   var $291=$3;
   var $292=$4;
   var $293=_rar_get_char($291, $292);
   var $294=$290 | $293;
   var $295=$2;
   var $296=(($295+520)|0);
   var $297=(($296+4)|0);
   HEAP32[(($297)>>2)]=$294;
   var $298=$2;
   var $299=(($298+520)|0);
   var $300=(($299+8)|0);
   var $301=HEAP32[(($300)>>2)];
   var $302=$301 << 8;
   HEAP32[(($300)>>2)]=$302;
   var $303=$2;
   var $304=(($303+520)|0);
   var $305=(($304)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=$306 << 8;
   HEAP32[(($305)>>2)]=$307;
   label = 39; break;
  case 45: 
   var $309=$symbol;
   $1=$309;
   label = 46; break;
  case 46: 
   var $311=$1;
   return $311;
  default: assert(0, "bad label: " + label);
 }
}
function _ppm_decode_symbol1($ppm_data, $context) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p;
   var $i;
   var $hi_cnt;
   var $count;
   $2=$ppm_data;
   $3=$context;
   _rar_dbgmsg(((3552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $4=$3;
   var $5=(($4+4)|0);
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP16[(($7)>>1)];
   var $9=(($8)&(65535));
   var $10=$2;
   var $11=(($10+520)|0);
   var $12=(($11+20)|0);
   HEAP32[(($12)>>2)]=$9;
   var $13=$3;
   var $14=(($13+4)|0);
   var $15=$14;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   $p=$17;
   var $18=$2;
   var $19=(($18+520)|0);
   var $20=_coder_get_current_count($19);
   $count=$20;
   var $21=$count;
   var $22=$2;
   var $23=(($22+520)|0);
   var $24=(($23+20)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($21)>>>(0)) >= (($25)>>>(0));
   if ($26) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 19; break;
  case 3: 
   var $29=$count;
   var $30=$p;
   var $31=(($30+1)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   $hi_cnt=$33;
   var $34=(($29)|(0)) < (($33)|(0));
   if ($34) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $36=$hi_cnt;
   var $37=$2;
   var $38=(($37+520)|0);
   var $39=(($38+16)|0);
   HEAP32[(($39)>>2)]=$36;
   var $40=($36<<1);
   var $41=$2;
   var $42=(($41+520)|0);
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($40)>>>(0)) > (($44)>>>(0));
   var $46=(($45)&(1));
   var $47=(($46) & 255);
   var $48=$2;
   var $49=(($48+1605)|0);
   HEAP8[($49)]=$47;
   var $50=$2;
   var $51=(($50+1605)|0);
   var $52=HEAP8[($51)];
   var $53=(($52)&(255));
   var $54=$2;
   var $55=(($54+560)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)+($53))|0);
   HEAP32[(($55)>>2)]=$57;
   var $58=$hi_cnt;
   var $59=((($58)+(4))|0);
   $hi_cnt=$59;
   var $60=(($59) & 255);
   var $61=$p;
   var $62=$2;
   var $63=(($62+576)|0);
   HEAP32[(($63)>>2)]=$61;
   var $64=(($61+1)|0);
   HEAP8[($64)]=$60;
   var $65=$3;
   var $66=(($65+4)|0);
   var $67=$66;
   var $68=(($67)|0);
   var $69=HEAP16[(($68)>>1)];
   var $70=(($69)&(65535));
   var $71=((($70)+(4))|0);
   var $72=(($71) & 65535);
   HEAP16[(($68)>>1)]=$72;
   var $73=$hi_cnt;
   var $74=(($73)|(0)) > 124;
   if ($74) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $76=$2;
   var $77=$3;
   _rescale($76, $77);
   label = 6; break;
  case 6: 
   var $79=$2;
   var $80=(($79+520)|0);
   var $81=(($80+12)|0);
   HEAP32[(($81)>>2)]=0;
   $1=1;
   label = 19; break;
  case 7: 
   var $83=$2;
   var $84=(($83+576)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==0;
   if ($86) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $1=0;
   label = 19; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $90=$2;
   var $91=(($90+1605)|0);
   HEAP8[($91)]=0;
   var $92=$3;
   var $93=(($92)|0);
   var $94=HEAP16[(($93)>>1)];
   var $95=(($94)&(65535));
   var $96=((($95)-(1))|0);
   $i=$96;
   label = 11; break;
  case 11: 
   var $98=$p;
   var $99=(($98+8)|0);
   $p=$99;
   var $100=(($99+1)|0);
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   var $103=$hi_cnt;
   var $104=((($103)+($102))|0);
   $hi_cnt=$104;
   var $105=$count;
   var $106=(($104)|(0)) <= (($105)|(0));
   if ($106) { label = 12; break; } else { label = 18; break; }
  case 12: 
   var $108=$i;
   var $109=((($108)-(1))|0);
   $i=$109;
   var $110=(($109)|(0))==0;
   if ($110) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $112=$2;
   var $113=(($112+576)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114)|0);
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=$2;
   var $119=(($118+1348)|0);
   var $120=(($119+$117)|0);
   var $121=HEAP8[($120)];
   var $122=$2;
   var $123=(($122+1606)|0);
   HEAP8[($123)]=$121;
   var $124=$hi_cnt;
   var $125=$2;
   var $126=(($125+520)|0);
   var $127=(($126+12)|0);
   HEAP32[(($127)>>2)]=$124;
   var $128=$2;
   var $129=(($128+1604)|0);
   var $130=HEAP8[($129)];
   var $131=$p;
   var $132=(($131)|0);
   var $133=HEAP8[($132)];
   var $134=(($133)&(255));
   var $135=$2;
   var $136=(($135+580)|0);
   var $137=(($136+$134)|0);
   HEAP8[($137)]=$130;
   var $138=$3;
   var $139=(($138)|0);
   var $140=HEAP16[(($139)>>1)];
   var $141=(($140)&(65535));
   var $142=$2;
   var $143=(($142+544)|0);
   HEAP32[(($143)>>2)]=$141;
   var $144=((($141)-(1))|0);
   $i=$144;
   var $145=$2;
   var $146=(($145+576)|0);
   HEAP32[(($146)>>2)]=0;
   label = 14; break;
  case 14: 
   var $148=$2;
   var $149=(($148+1604)|0);
   var $150=HEAP8[($149)];
   var $151=$p;
   var $152=((($151)-(8))|0);
   $p=$152;
   var $153=(($152)|0);
   var $154=HEAP8[($153)];
   var $155=(($154)&(255));
   var $156=$2;
   var $157=(($156+580)|0);
   var $158=(($157+$155)|0);
   HEAP8[($158)]=$150;
   label = 15; break;
  case 15: 
   var $160=$i;
   var $161=((($160)-(1))|0);
   $i=$161;
   var $162=(($161)|(0))!=0;
   if ($162) { label = 14; break; } else { label = 16; break; }
  case 16: 
   var $164=$2;
   var $165=(($164+520)|0);
   var $166=(($165+20)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$2;
   var $169=(($168+520)|0);
   var $170=(($169+16)|0);
   HEAP32[(($170)>>2)]=$167;
   $1=1;
   label = 19; break;
  case 17: 
   label = 11; break;
  case 18: 
   var $173=$hi_cnt;
   var $174=$2;
   var $175=(($174+520)|0);
   var $176=(($175+16)|0);
   HEAP32[(($176)>>2)]=$173;
   var $177=$p;
   var $178=(($177+1)|0);
   var $179=HEAP8[($178)];
   var $180=(($179)&(255));
   var $181=((($173)-($180))|0);
   var $182=$2;
   var $183=(($182+520)|0);
   var $184=(($183+12)|0);
   HEAP32[(($184)>>2)]=$181;
   var $185=$2;
   var $186=$p;
   var $187=$3;
   _update1($185, $186, $187);
   $1=1;
   label = 19; break;
  case 19: 
   var $189=$1;
   STACKTOP = sp;
   return $189;
  default: assert(0, "bad label: " + label);
 }
}
function _coder_decode($coder) {
 var label = 0;
 var $1;
 $1=$coder;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+12)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(Math.imul($4,$7)|0);
 var $9=$1;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=((($11)+($8))|0);
 HEAP32[(($10)>>2)]=$12;
 var $13=$1;
 var $14=(($13+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$1;
 var $17=(($16+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=((($15)-($18))|0);
 var $20=$1;
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(Math.imul($22,$19)|0);
 HEAP32[(($21)>>2)]=$23;
 return;
}
function _ppm_decode_bin_symbol($ppm_data, $context) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $rs;
   var $bs;
   $1=$ppm_data;
   $2=$context;
   _rar_dbgmsg(((3592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=$4;
   $rs=$5;
   var $6=$1;
   var $7=(($6+576)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|0);
   var $10=HEAP8[($9)];
   var $11=(($10)&(255));
   var $12=$1;
   var $13=(($12+1348)|0);
   var $14=(($13+$11)|0);
   var $15=HEAP8[($14)];
   var $16=$1;
   var $17=(($16+1606)|0);
   HEAP8[($17)]=$15;
   var $18=$1;
   var $19=(($18+1605)|0);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   var $22=$2;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|0);
   var $26=HEAP16[(($25)>>1)];
   var $27=(($26)&(65535));
   var $28=((($27)-(1))|0);
   var $29=$1;
   var $30=(($29+1092)|0);
   var $31=(($30+$28)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=((($21)+($33))|0);
   var $35=$1;
   var $36=(($35+1606)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=((($34)+($38))|0);
   var $40=$rs;
   var $41=(($40)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=$1;
   var $45=(($44+1348)|0);
   var $46=(($45+$43)|0);
   var $47=HEAP8[($46)];
   var $48=(($47)&(255));
   var $49=($48<<1);
   var $50=((($39)+($49))|0);
   var $51=$1;
   var $52=(($51+560)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$53 >> 26;
   var $55=$54 & 32;
   var $56=((($50)+($55))|0);
   var $57=$rs;
   var $58=(($57+1)|0);
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=((($60)-(1))|0);
   var $62=$1;
   var $63=(($62+3212)|0);
   var $64=(($63+($61<<7))|0);
   var $65=(($64+($56<<1))|0);
   $bs=$65;
   var $66=$1;
   var $67=(($66+520)|0);
   var $68=_coder_get_current_shift_count($67, 14);
   var $69=$bs;
   var $70=HEAP16[(($69)>>1)];
   var $71=(($70)&(65535));
   var $72=(($68)>>>(0)) < (($71)>>>(0));
   if ($72) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $74=$rs;
   var $75=$1;
   var $76=(($75+576)|0);
   HEAP32[(($76)>>2)]=$74;
   var $77=$rs;
   var $78=(($77+1)|0);
   var $79=HEAP8[($78)];
   var $80=(($79)&(255));
   var $81=(($80)|(0)) < 128;
   var $82=(($81)&(1));
   var $83=$rs;
   var $84=(($83+1)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=((($86)+($82))|0);
   var $88=(($87) & 255);
   HEAP8[($84)]=$88;
   var $89=$1;
   var $90=(($89+520)|0);
   var $91=(($90+12)|0);
   HEAP32[(($91)>>2)]=0;
   var $92=$bs;
   var $93=HEAP16[(($92)>>1)];
   var $94=(($93)&(65535));
   var $95=$1;
   var $96=(($95+520)|0);
   var $97=(($96+16)|0);
   HEAP32[(($97)>>2)]=$94;
   var $98=$bs;
   var $99=HEAP16[(($98)>>1)];
   var $100=(($99)&(65535));
   var $101=((($100)+(128))|0);
   var $102=$bs;
   var $103=HEAP16[(($102)>>1)];
   var $104=(($103)&(65535));
   var $105=((($104)+(32))|0);
   var $106=$105 >> 7;
   var $107=((($101)-($106))|0);
   var $108=(($107) & 65535);
   var $109=$bs;
   HEAP16[(($109)>>1)]=$108;
   var $110=$1;
   var $111=(($110+1605)|0);
   HEAP8[($111)]=1;
   var $112=$1;
   var $113=(($112+560)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=((($114)+(1))|0);
   HEAP32[(($113)>>2)]=$115;
   label = 4; break;
  case 3: 
   var $117=$bs;
   var $118=HEAP16[(($117)>>1)];
   var $119=(($118)&(65535));
   var $120=$1;
   var $121=(($120+520)|0);
   var $122=(($121+12)|0);
   HEAP32[(($122)>>2)]=$119;
   var $123=$bs;
   var $124=HEAP16[(($123)>>1)];
   var $125=(($124)&(65535));
   var $126=$bs;
   var $127=HEAP16[(($126)>>1)];
   var $128=(($127)&(65535));
   var $129=((($128)+(32))|0);
   var $130=$129 >> 7;
   var $131=((($125)-($130))|0);
   var $132=(($131) & 65535);
   var $133=$bs;
   HEAP16[(($133)>>1)]=$132;
   var $134=$1;
   var $135=(($134+520)|0);
   var $136=(($135+16)|0);
   HEAP32[(($136)>>2)]=16384;
   var $137=$bs;
   var $138=HEAP16[(($137)>>1)];
   var $139=(($138)&(65535));
   var $140=$139 >> 10;
   var $141=((4608+$140)|0);
   var $142=HEAP8[($141)];
   var $143=(($142)&(255));
   var $144=$1;
   var $145=(($144+548)|0);
   HEAP32[(($145)>>2)]=$143;
   var $146=$1;
   var $147=(($146+544)|0);
   HEAP32[(($147)>>2)]=1;
   var $148=$1;
   var $149=(($148+1604)|0);
   var $150=HEAP8[($149)];
   var $151=$rs;
   var $152=(($151)|0);
   var $153=HEAP8[($152)];
   var $154=(($153)&(255));
   var $155=$1;
   var $156=(($155+580)|0);
   var $157=(($156+$154)|0);
   HEAP8[($157)]=$150;
   var $158=$1;
   var $159=(($158+1605)|0);
   HEAP8[($159)]=0;
   var $160=$1;
   var $161=(($160+576)|0);
   HEAP32[(($161)>>2)]=0;
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ppm_decode_symbol2($ppm_data, $context) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $count;
   var $hi_cnt;
   var $i;
   var $psee2c;
   var $ps=sp;
   var $pps;
   var $p;
   $2=$ppm_data;
   $3=$context;
   _rar_dbgmsg(((2136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $4=$3;
   var $5=(($4)|0);
   var $6=HEAP16[(($5)>>1)];
   var $7=(($6)&(65535));
   var $8=$2;
   var $9=(($8+544)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=((($7)-($10))|0);
   $i=$11;
   var $12=$2;
   var $13=$3;
   var $14=$i;
   var $15=_make_esc_freq($12, $13, $14);
   $psee2c=$15;
   var $16=(($ps)|0);
   $pps=$16;
   var $17=$3;
   var $18=(($17+4)|0);
   var $19=$18;
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=((($21)-(8))|0);
   $p=$22;
   $hi_cnt=0;
   label = 2; break;
  case 2: 
   label = 3; break;
  case 3: 
   var $25=$p;
   var $26=(($25+8)|0);
   $p=$26;
   label = 4; break;
  case 4: 
   var $28=$p;
   var $29=(($28)|0);
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=$2;
   var $33=(($32+580)|0);
   var $34=(($33+$31)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=$2;
   var $38=(($37+1604)|0);
   var $39=HEAP8[($38)];
   var $40=(($39)&(255));
   var $41=(($36)|(0))==(($40)|(0));
   if ($41) { label = 3; break; } else { label = 5; break; }
  case 5: 
   var $43=$p;
   var $44=(($43+1)|0);
   var $45=HEAP8[($44)];
   var $46=(($45)&(255));
   var $47=$hi_cnt;
   var $48=((($47)+($46))|0);
   $hi_cnt=$48;
   var $49=$p;
   var $50=$pps;
   var $51=(($50+4)|0);
   $pps=$51;
   HEAP32[(($50)>>2)]=$49;
   label = 6; break;
  case 6: 
   var $53=$i;
   var $54=((($53)-(1))|0);
   $i=$54;
   var $55=(($54)|(0))!=0;
   if ($55) { label = 2; break; } else { label = 7; break; }
  case 7: 
   var $57=$hi_cnt;
   var $58=$2;
   var $59=(($58+520)|0);
   var $60=(($59+20)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($61)+($57))|0);
   HEAP32[(($60)>>2)]=$62;
   var $63=$2;
   var $64=(($63+520)|0);
   var $65=_coder_get_current_count($64);
   $count=$65;
   var $66=$count;
   var $67=$2;
   var $68=(($67+520)|0);
   var $69=(($68+20)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($66)>>>(0)) >= (($70)>>>(0));
   if ($71) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $1=0;
   label = 19; break;
  case 9: 
   var $74=(($ps)|0);
   $pps=$74;
   var $75=HEAP32[(($74)>>2)];
   $p=$75;
   var $76=$count;
   var $77=$hi_cnt;
   var $78=(($76)|(0)) < (($77)|(0));
   if ($78) { label = 10; break; } else { label = 14; break; }
  case 10: 
   $hi_cnt=0;
   label = 11; break;
  case 11: 
   var $81=$p;
   var $82=(($81+1)|0);
   var $83=HEAP8[($82)];
   var $84=(($83)&(255));
   var $85=$hi_cnt;
   var $86=((($85)+($84))|0);
   $hi_cnt=$86;
   var $87=$count;
   var $88=(($86)|(0)) <= (($87)|(0));
   if ($88) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $90=$pps;
   var $91=(($90+4)|0);
   $pps=$91;
   var $92=HEAP32[(($91)>>2)];
   $p=$92;
   label = 11; break;
  case 13: 
   var $94=$hi_cnt;
   var $95=$2;
   var $96=(($95+520)|0);
   var $97=(($96+16)|0);
   HEAP32[(($97)>>2)]=$94;
   var $98=$p;
   var $99=(($98+1)|0);
   var $100=HEAP8[($99)];
   var $101=(($100)&(255));
   var $102=((($94)-($101))|0);
   var $103=$2;
   var $104=(($103+520)|0);
   var $105=(($104+12)|0);
   HEAP32[(($105)>>2)]=$102;
   var $106=$psee2c;
   _update($106);
   var $107=$2;
   var $108=$p;
   var $109=$3;
   _update2($107, $108, $109);
   label = 18; break;
  case 14: 
   var $111=$hi_cnt;
   var $112=$2;
   var $113=(($112+520)|0);
   var $114=(($113+12)|0);
   HEAP32[(($114)>>2)]=$111;
   var $115=$2;
   var $116=(($115+520)|0);
   var $117=(($116+20)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$2;
   var $120=(($119+520)|0);
   var $121=(($120+16)|0);
   HEAP32[(($121)>>2)]=$118;
   var $122=$3;
   var $123=(($122)|0);
   var $124=HEAP16[(($123)>>1)];
   var $125=(($124)&(65535));
   var $126=$2;
   var $127=(($126+544)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=((($125)-($128))|0);
   $i=$129;
   var $130=$pps;
   var $131=((($130)-(4))|0);
   $pps=$131;
   label = 15; break;
  case 15: 
   var $133=$2;
   var $134=(($133+1604)|0);
   var $135=HEAP8[($134)];
   var $136=$pps;
   var $137=(($136+4)|0);
   $pps=$137;
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|0);
   var $140=HEAP8[($139)];
   var $141=(($140)&(255));
   var $142=$2;
   var $143=(($142+580)|0);
   var $144=(($143+$141)|0);
   HEAP8[($144)]=$135;
   label = 16; break;
  case 16: 
   var $146=$i;
   var $147=((($146)-(1))|0);
   $i=$147;
   var $148=(($147)|(0))!=0;
   if ($148) { label = 15; break; } else { label = 17; break; }
  case 17: 
   var $150=$2;
   var $151=(($150+520)|0);
   var $152=(($151+20)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$psee2c;
   var $155=(($154)|0);
   var $156=HEAP16[(($155)>>1)];
   var $157=(($156)&(65535));
   var $158=((($157)+($153))|0);
   var $159=(($158) & 65535);
   HEAP16[(($155)>>1)]=$159;
   var $160=$3;
   var $161=(($160)|0);
   var $162=HEAP16[(($161)>>1)];
   var $163=(($162)&(65535));
   var $164=$2;
   var $165=(($164+544)|0);
   HEAP32[(($165)>>2)]=$163;
   label = 18; break;
  case 18: 
   $1=1;
   label = 19; break;
  case 19: 
   var $168=$1;
   STACKTOP = sp;
   return $168;
  default: assert(0, "bad label: " + label);
 }
}
function _update_model($ppm_data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $fs=sp;
   var $p;
   var $pc;
   var $successor;
   var $ns1;
   var $ns;
   var $cf;
   var $sf;
   var $s0;
   var $ret;
   $2=$ppm_data;
   _rar_dbgmsg(((2352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $3=$2;
   var $4=(($3+576)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$fs;
   var $7=$5;
   assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
   $p=0;
   var $8=(($fs+1)|0);
   var $9=HEAP8[($8)];
   var $10=(($9)&(255));
   var $11=(($10)|(0)) < 31;
   if ($11) { label = 2; break; } else { label = 16; break; }
  case 2: 
   var $13=$2;
   var $14=(($13+568)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   $pc=$17;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $20=$pc;
   var $21=(($20)|0);
   var $22=HEAP16[(($21)>>1)];
   var $23=(($22)&(65535));
   var $24=(($23)|(0))!=1;
   if ($24) { label = 4; break; } else { label = 14; break; }
  case 4: 
   var $26=$pc;
   var $27=(($26+4)|0);
   var $28=$27;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   $p=$30;
   var $31=(($30)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=(($fs)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=(($33)|(0))!=(($36)|(0));
   if ($37) { label = 5; break; } else { label = 11; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $40=$p;
   var $41=(($40+8)|0);
   $p=$41;
   label = 7; break;
  case 7: 
   var $43=$p;
   var $44=(($43)|0);
   var $45=HEAP8[($44)];
   var $46=(($45)&(255));
   var $47=(($fs)|0);
   var $48=HEAP8[($47)];
   var $49=(($48)&(255));
   var $50=(($46)|(0))!=(($49)|(0));
   if ($50) { label = 6; break; } else { label = 8; break; }
  case 8: 
   var $52=$p;
   var $53=(($52)|0);
   var $54=(($53+1)|0);
   var $55=HEAP8[($54)];
   var $56=(($55)&(255));
   var $57=$p;
   var $58=((($57)-(8))|0);
   var $59=(($58+1)|0);
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   var $62=(($56)|(0)) >= (($61)|(0));
   if ($62) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $64=$p;
   var $65=(($64)|0);
   var $66=$p;
   var $67=((($66)-(8))|0);
   _ppmd_swap($65, $67);
   var $68=$p;
   var $69=((($68)-(8))|0);
   $p=$69;
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $72=$p;
   var $73=(($72+1)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=(($75)|(0)) < 115;
   if ($76) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $78=$p;
   var $79=(($78+1)|0);
   var $80=HEAP8[($79)];
   var $81=(($80)&(255));
   var $82=((($81)+(2))|0);
   var $83=(($82) & 255);
   HEAP8[($79)]=$83;
   var $84=$pc;
   var $85=(($84+4)|0);
   var $86=$85;
   var $87=(($86)|0);
   var $88=HEAP16[(($87)>>1)];
   var $89=(($88)&(65535));
   var $90=((($89)+(2))|0);
   var $91=(($90) & 65535);
   HEAP16[(($87)>>1)]=$91;
   label = 13; break;
  case 13: 
   label = 15; break;
  case 14: 
   var $94=$pc;
   var $95=(($94+4)|0);
   var $96=$95;
   $p=$96;
   var $97=$p;
   var $98=(($97+1)|0);
   var $99=HEAP8[($98)];
   var $100=(($99)&(255));
   var $101=(($100)|(0)) < 32;
   var $102=(($101)&(1));
   var $103=$p;
   var $104=(($103+1)|0);
   var $105=HEAP8[($104)];
   var $106=(($105)&(255));
   var $107=((($106)+($102))|0);
   var $108=(($107) & 255);
   HEAP8[($104)]=$108;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $111=$2;
   var $112=(($111+552)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113)|(0))!=0;
   if ($114) { label = 20; break; } else { label = 17; break; }
  case 17: 
   var $116=$2;
   var $117=$p;
   var $118=_create_successors($116, 1, $117);
   var $119=$2;
   var $120=(($119+576)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+4)|0);
   HEAP32[(($122)>>2)]=$118;
   var $123=$2;
   var $124=(($123+572)|0);
   HEAP32[(($124)>>2)]=$118;
   var $125=$2;
   var $126=(($125+568)|0);
   HEAP32[(($126)>>2)]=$118;
   var $127=$2;
   var $128=(($127+568)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129)|(0))!=0;
   if ($130) { label = 19; break; } else { label = 18; break; }
  case 18: 
   label = 50; break;
  case 19: 
   $1=1;
   label = 53; break;
  case 20: 
   var $134=(($fs)|0);
   var $135=HEAP8[($134)];
   var $136=$2;
   var $137=(($136)|0);
   var $138=(($137+504)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=(($139+1)|0);
   HEAP32[(($138)>>2)]=$140;
   HEAP8[($139)]=$135;
   var $141=$2;
   var $142=(($141)|0);
   var $143=(($142+504)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=$144;
   $successor=$145;
   var $146=$2;
   var $147=(($146)|0);
   var $148=(($147+504)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=$2;
   var $151=(($150)|0);
   var $152=(($151+516)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($149)>>>(0)) >= (($153)>>>(0));
   if ($154) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 50; break;
  case 22: 
   var $157=(($fs+4)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($158)|(0))!=0;
   if ($159) { label = 23; break; } else { label = 29; break; }
  case 23: 
   var $161=(($fs+4)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$162;
   var $164=$2;
   var $165=(($164)|0);
   var $166=(($165+504)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($163)>>>(0)) <= (($167)>>>(0));
   if ($168) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $170=$2;
   var $171=$p;
   var $172=_create_successors($170, 0, $171);
   var $173=(($fs+4)|0);
   HEAP32[(($173)>>2)]=$172;
   var $174=(($172)|(0))==0;
   if ($174) { label = 25; break; } else { label = 26; break; }
  case 25: 
   label = 50; break;
  case 26: 
   var $177=$2;
   var $178=(($177+552)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=((($179)-(1))|0);
   HEAP32[(($178)>>2)]=$180;
   var $181=(($180)|(0))!=0;
   if ($181) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $183=(($fs+4)|0);
   var $184=HEAP32[(($183)>>2)];
   $successor=$184;
   var $185=$2;
   var $186=(($185+572)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$2;
   var $189=(($188+568)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=(($187)|(0))!=(($190)|(0));
   var $192=(($191)&(1));
   var $193=$2;
   var $194=(($193)|0);
   var $195=(($194+504)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(((-$192))|0);
   var $198=(($196+$197)|0);
   HEAP32[(($195)>>2)]=$198;
   label = 28; break;
  case 28: 
   label = 30; break;
  case 29: 
   var $201=$successor;
   var $202=$2;
   var $203=(($202+576)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+4)|0);
   HEAP32[(($205)>>2)]=$201;
   var $206=$2;
   var $207=(($206+568)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($fs+4)|0);
   HEAP32[(($209)>>2)]=$208;
   label = 30; break;
  case 30: 
   var $211=$2;
   var $212=(($211+568)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=(($213+4)|0);
   var $215=$214;
   var $216=(($215)|0);
   var $217=HEAP16[(($216)>>1)];
   var $218=(($217)&(65535));
   var $219=$2;
   var $220=(($219+568)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221)|0);
   var $223=HEAP16[(($222)>>1)];
   var $224=(($223)&(65535));
   $ns=$224;
   var $225=((($218)-($224))|0);
   var $226=(($fs+1)|0);
   var $227=HEAP8[($226)];
   var $228=(($227)&(255));
   var $229=((($228)-(1))|0);
   var $230=((($225)-($229))|0);
   $s0=$230;
   var $231=$2;
   var $232=(($231+572)|0);
   var $233=HEAP32[(($232)>>2)];
   $pc=$233;
   label = 31; break;
  case 31: 
   var $235=$pc;
   var $236=$2;
   var $237=(($236+568)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=(($235)|(0))!=(($238)|(0));
   if ($239) { label = 32; break; } else { label = 49; break; }
  case 32: 
   var $241=$pc;
   var $242=(($241)|0);
   var $243=HEAP16[(($242)>>1)];
   var $244=(($243)&(65535));
   $ns1=$244;
   var $245=(($244)|(0))!=1;
   if ($245) { label = 33; break; } else { label = 38; break; }
  case 33: 
   var $247=$ns1;
   var $248=$247 & 1;
   var $249=(($248)|(0))==0;
   if ($249) { label = 34; break; } else { label = 37; break; }
  case 34: 
   var $251=$2;
   var $252=(($251)|0);
   var $253=$pc;
   var $254=(($253+4)|0);
   var $255=$254;
   var $256=(($255+4)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=$257;
   var $259=$ns1;
   var $260=$259 >>> 1;
   var $261=_sub_allocator_expand_units($252, $258, $260);
   var $262=$261;
   var $263=$pc;
   var $264=(($263+4)|0);
   var $265=$264;
   var $266=(($265+4)|0);
   HEAP32[(($266)>>2)]=$262;
   var $267=$pc;
   var $268=(($267+4)|0);
   var $269=$268;
   var $270=(($269+4)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))!=0;
   if ($272) { label = 36; break; } else { label = 35; break; }
  case 35: 
   label = 50; break;
  case 36: 
   label = 37; break;
  case 37: 
   var $276=$ns1;
   var $277=($276<<1);
   var $278=$ns;
   var $279=(($277)>>>(0)) < (($278)>>>(0));
   var $280=(($279)&(1));
   var $281=$ns1;
   var $282=($281<<2);
   var $283=$ns;
   var $284=(($282)>>>(0)) <= (($283)>>>(0));
   var $285=(($284)&(1));
   var $286=$pc;
   var $287=(($286+4)|0);
   var $288=$287;
   var $289=(($288)|0);
   var $290=HEAP16[(($289)>>1)];
   var $291=(($290)&(65535));
   var $292=$ns1;
   var $293=($292<<3);
   var $294=(($291)>>>(0)) <= (($293)>>>(0));
   var $295=(($294)&(1));
   var $296=$285 & $295;
   var $297=($296<<1);
   var $298=((($280)+($297))|0);
   var $299=$pc;
   var $300=(($299+4)|0);
   var $301=$300;
   var $302=(($301)|0);
   var $303=HEAP16[(($302)>>1)];
   var $304=(($303)&(65535));
   var $305=((($304)+($298))|0);
   var $306=(($305) & 65535);
   HEAP16[(($302)>>1)]=$306;
   label = 44; break;
  case 38: 
   var $308=$2;
   var $309=(($308)|0);
   var $310=_sub_allocator_alloc_units($309, 1);
   var $311=$310;
   $p=$311;
   var $312=$p;
   var $313=(($312)|(0))!=0;
   if ($313) { label = 40; break; } else { label = 39; break; }
  case 39: 
   label = 50; break;
  case 40: 
   var $316=$p;
   var $317=$pc;
   var $318=(($317+4)|0);
   var $319=$318;
   var $320=$316;
   var $321=$319;
   assert(8 % 1 === 0);HEAP32[(($320)>>2)]=HEAP32[(($321)>>2)];HEAP32[((($320)+(4))>>2)]=HEAP32[((($321)+(4))>>2)];
   var $322=$p;
   var $323=$pc;
   var $324=(($323+4)|0);
   var $325=$324;
   var $326=(($325+4)|0);
   HEAP32[(($326)>>2)]=$322;
   var $327=$p;
   var $328=(($327+1)|0);
   var $329=HEAP8[($328)];
   var $330=(($329)&(255));
   var $331=(($330)|(0)) < 30;
   if ($331) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $333=$p;
   var $334=(($333+1)|0);
   var $335=HEAP8[($334)];
   var $336=(($335)&(255));
   var $337=$p;
   var $338=(($337+1)|0);
   var $339=HEAP8[($338)];
   var $340=(($339)&(255));
   var $341=((($340)+($336))|0);
   var $342=(($341) & 255);
   HEAP8[($338)]=$342;
   label = 43; break;
  case 42: 
   var $344=$p;
   var $345=(($344+1)|0);
   HEAP8[($345)]=120;
   label = 43; break;
  case 43: 
   var $347=$p;
   var $348=(($347+1)|0);
   var $349=HEAP8[($348)];
   var $350=(($349)&(255));
   var $351=$2;
   var $352=(($351+548)|0);
   var $353=HEAP32[(($352)>>2)];
   var $354=((($350)+($353))|0);
   var $355=$ns;
   var $356=(($355)>>>(0)) > 3;
   var $357=(($356)&(1));
   var $358=((($354)+($357))|0);
   var $359=(($358) & 65535);
   var $360=$pc;
   var $361=(($360+4)|0);
   var $362=$361;
   var $363=(($362)|0);
   HEAP16[(($363)>>1)]=$359;
   label = 44; break;
  case 44: 
   var $365=(($fs+1)|0);
   var $366=HEAP8[($365)];
   var $367=(($366)&(255));
   var $368=($367<<1);
   var $369=$pc;
   var $370=(($369+4)|0);
   var $371=$370;
   var $372=(($371)|0);
   var $373=HEAP16[(($372)>>1)];
   var $374=(($373)&(65535));
   var $375=((($374)+(6))|0);
   var $376=(Math.imul($368,$375)|0);
   $cf=$376;
   var $377=$s0;
   var $378=$pc;
   var $379=(($378+4)|0);
   var $380=$379;
   var $381=(($380)|0);
   var $382=HEAP16[(($381)>>1)];
   var $383=(($382)&(65535));
   var $384=((($377)+($383))|0);
   $sf=$384;
   var $385=$cf;
   var $386=$sf;
   var $387=((($386)*(6))&-1);
   var $388=(($385)>>>(0)) < (($387)>>>(0));
   if ($388) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $390=$cf;
   var $391=$sf;
   var $392=(($390)>>>(0)) > (($391)>>>(0));
   var $393=(($392)&(1));
   var $394=((($393)+(1))|0);
   var $395=$cf;
   var $396=$sf;
   var $397=($396<<2);
   var $398=(($395)>>>(0)) >= (($397)>>>(0));
   var $399=(($398)&(1));
   var $400=((($394)+($399))|0);
   $cf=$400;
   var $401=$pc;
   var $402=(($401+4)|0);
   var $403=$402;
   var $404=(($403)|0);
   var $405=HEAP16[(($404)>>1)];
   var $406=(($405)&(65535));
   var $407=((($406)+(3))|0);
   var $408=(($407) & 65535);
   HEAP16[(($404)>>1)]=$408;
   label = 47; break;
  case 46: 
   var $410=$cf;
   var $411=$sf;
   var $412=((($411)*(9))&-1);
   var $413=(($410)>>>(0)) >= (($412)>>>(0));
   var $414=(($413)&(1));
   var $415=((($414)+(4))|0);
   var $416=$cf;
   var $417=$sf;
   var $418=((($417)*(12))&-1);
   var $419=(($416)>>>(0)) >= (($418)>>>(0));
   var $420=(($419)&(1));
   var $421=((($415)+($420))|0);
   var $422=$cf;
   var $423=$sf;
   var $424=((($423)*(15))&-1);
   var $425=(($422)>>>(0)) >= (($424)>>>(0));
   var $426=(($425)&(1));
   var $427=((($421)+($426))|0);
   $cf=$427;
   var $428=$cf;
   var $429=$pc;
   var $430=(($429+4)|0);
   var $431=$430;
   var $432=(($431)|0);
   var $433=HEAP16[(($432)>>1)];
   var $434=(($433)&(65535));
   var $435=((($434)+($428))|0);
   var $436=(($435) & 65535);
   HEAP16[(($432)>>1)]=$436;
   label = 47; break;
  case 47: 
   var $438=$pc;
   var $439=(($438+4)|0);
   var $440=$439;
   var $441=(($440+4)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=$ns1;
   var $444=(($442+($443<<3))|0);
   $p=$444;
   var $445=$successor;
   var $446=$p;
   var $447=(($446+4)|0);
   HEAP32[(($447)>>2)]=$445;
   var $448=(($fs)|0);
   var $449=HEAP8[($448)];
   var $450=$p;
   var $451=(($450)|0);
   HEAP8[($451)]=$449;
   var $452=$cf;
   var $453=(($452) & 255);
   var $454=$p;
   var $455=(($454+1)|0);
   HEAP8[($455)]=$453;
   var $456=$ns1;
   var $457=((($456)+(1))|0);
   $ns1=$457;
   var $458=(($457) & 65535);
   var $459=$pc;
   var $460=(($459)|0);
   HEAP16[(($460)>>1)]=$458;
   label = 48; break;
  case 48: 
   var $462=$pc;
   var $463=(($462+12)|0);
   var $464=HEAP32[(($463)>>2)];
   $pc=$464;
   label = 31; break;
  case 49: 
   var $466=(($fs+4)|0);
   var $467=HEAP32[(($466)>>2)];
   var $468=$2;
   var $469=(($468+568)|0);
   HEAP32[(($469)>>2)]=$467;
   var $470=$2;
   var $471=(($470+572)|0);
   HEAP32[(($471)>>2)]=$467;
   $1=1;
   label = 53; break;
  case 50: 
   var $473=$2;
   var $474=_restart_model_rare($473);
   var $475=(($474)|(0))!=0;
   if ($475) { label = 52; break; } else { label = 51; break; }
  case 51: 
   $1=0;
   label = 53; break;
  case 52: 
   var $478=$2;
   var $479=(($478+1604)|0);
   HEAP8[($479)]=0;
   $1=1;
   label = 53; break;
  case 53: 
   var $481=$1;
   STACKTOP = sp;
   return $481;
  default: assert(0, "bad label: " + label);
 }
}
function _clear_mask($ppm_data) {
 var label = 0;
 var $1;
 $1=$ppm_data;
 var $2=$1;
 var $3=(($2+1604)|0);
 HEAP8[($3)]=1;
 var $4=$1;
 var $5=(($4+580)|0);
 var $6=$5;
 _memset($6, 0, 256);
 return;
}
function _ppmd_swap($p0, $p1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $tmp=sp;
 $1=$p0;
 $2=$p1;
 var $3=$1;
 var $4=$tmp;
 var $5=$3;
 assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
 var $6=$1;
 var $7=$2;
 var $8=$6;
 var $9=$7;
 assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
 var $10=$2;
 var $11=$10;
 var $12=$tmp;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 STACKTOP = sp;
 return;
}
function _create_successors($ppm_data, $skip, $p1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $up_state=sp;
   var $pc;
   var $up_branch;
   var $p;
   var $ps=(sp)+(8);
   var $pps;
   var $cf;
   var $s0;
   $2=$ppm_data;
   $3=$skip;
   $4=$p1;
   _rar_dbgmsg(((2248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $5=$2;
   var $6=(($5+568)|0);
   var $7=HEAP32[(($6)>>2)];
   $pc=$7;
   var $8=$2;
   var $9=(($8+576)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   $up_branch=$12;
   var $13=(($ps)|0);
   $pps=$13;
   var $14=$3;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $17=$2;
   var $18=(($17+576)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$pps;
   var $21=(($20+4)|0);
   $pps=$21;
   HEAP32[(($20)>>2)]=$19;
   var $22=$pc;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))!=0;
   if ($25) { label = 4; break; } else { label = 3; break; }
  case 3: 
   label = 22; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $29=$4;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $32=$4;
   $p=$32;
   var $33=$pc;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   $pc=$35;
   label = 17; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $38=$pc;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   $pc=$40;
   var $41=$pc;
   var $42=(($41)|0);
   var $43=HEAP16[(($42)>>1)];
   var $44=(($43)&(65535));
   var $45=(($44)|(0))!=1;
   if ($45) { label = 9; break; } else { label = 15; break; }
  case 9: 
   var $47=$pc;
   var $48=(($47+4)|0);
   var $49=$48;
   var $50=(($49+4)|0);
   var $51=HEAP32[(($50)>>2)];
   $p=$51;
   var $52=(($51)|0);
   var $53=HEAP8[($52)];
   var $54=(($53)&(255));
   var $55=$2;
   var $56=(($55+576)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|0);
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=(($54)|(0))!=(($60)|(0));
   if ($61) { label = 10; break; } else { label = 14; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $64=$p;
   var $65=(($64+8)|0);
   $p=$65;
   label = 12; break;
  case 12: 
   var $67=$p;
   var $68=(($67)|0);
   var $69=HEAP8[($68)];
   var $70=(($69)&(255));
   var $71=$2;
   var $72=(($71+576)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73)|0);
   var $75=HEAP8[($74)];
   var $76=(($75)&(255));
   var $77=(($70)|(0))!=(($76)|(0));
   if ($77) { label = 11; break; } else { label = 13; break; }
  case 13: 
   label = 14; break;
  case 14: 
   label = 16; break;
  case 15: 
   var $81=$pc;
   var $82=(($81+4)|0);
   var $83=$82;
   $p=$83;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $86=$p;
   var $87=(($86+4)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$up_branch;
   var $90=(($88)|(0))!=(($89)|(0));
   if ($90) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $92=$p;
   var $93=(($92+4)|0);
   var $94=HEAP32[(($93)>>2)];
   $pc=$94;
   label = 21; break;
  case 19: 
   var $96=$p;
   var $97=$pps;
   var $98=(($97+4)|0);
   $pps=$98;
   HEAP32[(($97)>>2)]=$96;
   label = 20; break;
  case 20: 
   var $100=$pc;
   var $101=(($100+12)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))!=0;
   if ($103) { label = 8; break; } else { label = 21; break; }
  case 21: 
   label = 22; break;
  case 22: 
   var $106=$pps;
   var $107=(($ps)|0);
   var $108=(($106)|(0))==(($107)|(0));
   if ($108) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $110=$pc;
   $1=$110;
   label = 43; break;
  case 24: 
   var $112=$up_branch;
   var $113=$112;
   var $114=HEAP8[($113)];
   var $115=(($up_state)|0);
   HEAP8[($115)]=$114;
   var $116=$up_branch;
   var $117=$116;
   var $118=(($117+1)|0);
   var $119=$118;
   var $120=(($up_state+4)|0);
   HEAP32[(($120)>>2)]=$119;
   var $121=$pc;
   var $122=(($121)|0);
   var $123=HEAP16[(($122)>>1)];
   var $124=(($123)&(65535));
   var $125=(($124)|(0))!=1;
   if ($125) { label = 25; break; } else { label = 36; break; }
  case 25: 
   var $127=$pc;
   var $128=$127;
   var $129=$2;
   var $130=(($129)|0);
   var $131=(($130+504)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($128)>>>(0)) <= (($132)>>>(0));
   if ($133) { label = 26; break; } else { label = 27; break; }
  case 26: 
   $1=0;
   label = 43; break;
  case 27: 
   var $136=$pc;
   var $137=(($136+4)|0);
   var $138=$137;
   var $139=(($138+4)|0);
   var $140=HEAP32[(($139)>>2)];
   $p=$140;
   var $141=(($140)|0);
   var $142=HEAP8[($141)];
   var $143=(($142)&(255));
   var $144=(($up_state)|0);
   var $145=HEAP8[($144)];
   var $146=(($145)&(255));
   var $147=(($143)|(0))!=(($146)|(0));
   if ($147) { label = 28; break; } else { label = 32; break; }
  case 28: 
   label = 29; break;
  case 29: 
   var $150=$p;
   var $151=(($150+8)|0);
   $p=$151;
   label = 30; break;
  case 30: 
   var $153=$p;
   var $154=(($153)|0);
   var $155=HEAP8[($154)];
   var $156=(($155)&(255));
   var $157=(($up_state)|0);
   var $158=HEAP8[($157)];
   var $159=(($158)&(255));
   var $160=(($156)|(0))!=(($159)|(0));
   if ($160) { label = 29; break; } else { label = 31; break; }
  case 31: 
   label = 32; break;
  case 32: 
   var $163=$p;
   var $164=(($163+1)|0);
   var $165=HEAP8[($164)];
   var $166=(($165)&(255));
   var $167=((($166)-(1))|0);
   $cf=$167;
   var $168=$pc;
   var $169=(($168+4)|0);
   var $170=$169;
   var $171=(($170)|0);
   var $172=HEAP16[(($171)>>1)];
   var $173=(($172)&(65535));
   var $174=$pc;
   var $175=(($174)|0);
   var $176=HEAP16[(($175)>>1)];
   var $177=(($176)&(65535));
   var $178=((($173)-($177))|0);
   var $179=$cf;
   var $180=((($178)-($179))|0);
   $s0=$180;
   var $181=$cf;
   var $182=($181<<1);
   var $183=$s0;
   var $184=(($182)>>>(0)) <= (($183)>>>(0));
   if ($184) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $186=$cf;
   var $187=((($186)*(5))&-1);
   var $188=$s0;
   var $189=(($187)>>>(0)) > (($188)>>>(0));
   var $190=(($189)&(1));
   var $202 = $190;label = 35; break;
  case 34: 
   var $192=$cf;
   var $193=($192<<1);
   var $194=$s0;
   var $195=((($194)*(3))&-1);
   var $196=((($193)+($195))|0);
   var $197=((($196)-(1))|0);
   var $198=$s0;
   var $199=($198<<1);
   var $200=((((($197)>>>(0)))/((($199)>>>(0))))&-1);
   var $202 = $200;label = 35; break;
  case 35: 
   var $202;
   var $203=((($202)+(1))|0);
   var $204=(($203) & 255);
   var $205=(($up_state+1)|0);
   HEAP8[($205)]=$204;
   label = 37; break;
  case 36: 
   var $207=$pc;
   var $208=(($207+4)|0);
   var $209=$208;
   var $210=(($209+1)|0);
   var $211=HEAP8[($210)];
   var $212=(($up_state+1)|0);
   HEAP8[($212)]=$211;
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $215=$2;
   var $216=$pc;
   var $217=$pps;
   var $218=((($217)-(4))|0);
   $pps=$218;
   var $219=HEAP32[(($218)>>2)];
   var $220=_create_child($215, $216, $219, $up_state);
   $pc=$220;
   var $221=$pc;
   var $222=(($221)|(0))!=0;
   if ($222) { label = 40; break; } else { label = 39; break; }
  case 39: 
   $1=0;
   label = 43; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $226=$pps;
   var $227=(($ps)|0);
   var $228=(($226)|(0))!=(($227)|(0));
   if ($228) { label = 38; break; } else { label = 42; break; }
  case 42: 
   var $230=$pc;
   $1=$230;
   label = 43; break;
  case 43: 
   var $232=$1;
   STACKTOP = sp;
   return $232;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_expand_units($sub_alloc, $old_ptr, $old_nu) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i0;
   var $i1;
   var $ptr;
   $2=$sub_alloc;
   $3=$old_ptr;
   $4=$old_nu;
   var $5=$4;
   var $6=((($5)-(1))|0);
   var $7=$2;
   var $8=(($7+80)|0);
   var $9=(($8+($6<<1))|0);
   var $10=HEAP16[(($9)>>1)];
   var $11=(($10 << 16) >> 16);
   $i0=$11;
   var $12=$4;
   var $13=$2;
   var $14=(($13+80)|0);
   var $15=(($14+($12<<1))|0);
   var $16=HEAP16[(($15)>>1)];
   var $17=(($16 << 16) >> 16);
   $i1=$17;
   var $18=$i0;
   var $19=$i1;
   var $20=(($18)|(0))==(($19)|(0));
   if ($20) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $22=$3;
   $1=$22;
   label = 6; break;
  case 3: 
   var $24=$2;
   var $25=$4;
   var $26=((($25)+(1))|0);
   var $27=_sub_allocator_alloc_units($24, $26);
   $ptr=$27;
   var $28=$ptr;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $31=$ptr;
   var $32=$3;
   var $33=$4;
   var $34=_sub_allocator_u2b($33);
   assert($34 % 1 === 0);(_memcpy($31, $32, $34)|0);
   var $35=$2;
   var $36=$3;
   var $37=$i0;
   _sub_allocator_insert_node($35, $36, $37);
   label = 5; break;
  case 5: 
   var $39=$ptr;
   $1=$39;
   label = 6; break;
  case 6: 
   var $41=$1;
   return $41;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_alloc_units($sub_alloc, $nu) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $indx;
   var $ret_val;
   $2=$sub_alloc;
   $3=$nu;
   var $4=$3;
   var $5=((($4)-(1))|0);
   var $6=$2;
   var $7=(($6+80)|0);
   var $8=(($7+($5<<1))|0);
   var $9=HEAP16[(($8)>>1)];
   var $10=(($9 << 16) >> 16);
   $indx=$10;
   var $11=$indx;
   var $12=$2;
   var $13=(($12+352)|0);
   var $14=(($13+($11<<2))|0);
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$2;
   var $20=$indx;
   var $21=_sub_allocator_remove_node($19, $20);
   $1=$21;
   label = 6; break;
  case 3: 
   var $23=$2;
   var $24=(($23+344)|0);
   var $25=HEAP32[(($24)>>2)];
   $ret_val=$25;
   var $26=$indx;
   var $27=$2;
   var $28=(($27+4)|0);
   var $29=(($28+($26<<1))|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30 << 16) >> 16);
   var $32=_sub_allocator_u2b($31);
   var $33=$2;
   var $34=(($33+344)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+$32)|0);
   HEAP32[(($34)>>2)]=$36;
   var $37=$2;
   var $38=(($37+344)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$2;
   var $41=(($40+348)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($39)>>>(0)) <= (($42)>>>(0));
   if ($43) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $45=$ret_val;
   $1=$45;
   label = 6; break;
  case 5: 
   var $47=$indx;
   var $48=$2;
   var $49=(($48+4)|0);
   var $50=(($49+($47<<1))|0);
   var $51=HEAP16[(($50)>>1)];
   var $52=(($51 << 16) >> 16);
   var $53=_sub_allocator_u2b($52);
   var $54=$2;
   var $55=(($54+344)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(((-$53))|0);
   var $58=(($56+$57)|0);
   HEAP32[(($55)>>2)]=$58;
   var $59=$2;
   var $60=$indx;
   var $61=_sub_allocator_alloc_units_rare($59, $60);
   $1=$61;
   label = 6; break;
  case 6: 
   var $63=$1;
   return $63;
  default: assert(0, "bad label: " + label);
 }
}
function _restart_model_rare($ppm_data) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $k;
   var $m;
   $2=$ppm_data;
   _rar_dbgmsg(((2296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $3=$2;
   var $4=(($3+580)|0);
   var $5=$4;
   _memset($5, 0, 256);
   var $6=$2;
   var $7=(($6)|0);
   _sub_allocator_init_sub_allocator($7);
   var $8=$2;
   var $9=(($8+556)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0)) < 12;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=(($13+556)|0);
   var $15=HEAP32[(($14)>>2)];
   var $18 = $15;label = 4; break;
  case 3: 
   var $18 = 12;label = 4; break;
  case 4: 
   var $18;
   var $19=(((-$18))|0);
   var $20=((($19)-(1))|0);
   var $21=$2;
   var $22=(($21+564)|0);
   HEAP32[(($22)>>2)]=$20;
   var $23=$2;
   var $24=(($23)|0);
   var $25=_sub_allocator_alloc_context($24);
   var $26=$25;
   var $27=$2;
   var $28=(($27+572)|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=$2;
   var $30=(($29+568)|0);
   HEAP32[(($30)>>2)]=$26;
   var $31=$2;
   var $32=(($31+568)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))!=0;
   if ($34) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $1=0;
   label = 33; break;
  case 6: 
   var $37=$2;
   var $38=(($37+568)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+12)|0);
   HEAP32[(($40)>>2)]=0;
   var $41=$2;
   var $42=(($41+556)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$2;
   var $45=(($44+552)|0);
   HEAP32[(($45)>>2)]=$43;
   var $46=$2;
   var $47=(($46+568)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|0);
   HEAP16[(($49)>>1)]=256;
   var $50=$2;
   var $51=(($50+568)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+4)|0);
   var $54=$53;
   var $55=(($54)|0);
   HEAP16[(($55)>>1)]=257;
   var $56=$2;
   var $57=(($56)|0);
   var $58=_sub_allocator_alloc_units($57, 128);
   var $59=$58;
   var $60=$2;
   var $61=(($60+568)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+4)|0);
   var $64=$63;
   var $65=(($64+4)|0);
   HEAP32[(($65)>>2)]=$59;
   var $66=$2;
   var $67=(($66+576)|0);
   HEAP32[(($67)>>2)]=$59;
   var $68=$2;
   var $69=(($68+576)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 8; break; } else { label = 7; break; }
  case 7: 
   $1=0;
   label = 33; break;
  case 8: 
   var $74=$2;
   var $75=(($74+564)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$2;
   var $78=(($77+560)|0);
   HEAP32[(($78)>>2)]=$76;
   $i=0;
   var $79=$2;
   var $80=(($79+1605)|0);
   HEAP8[($80)]=0;
   label = 9; break;
  case 9: 
   var $82=$i;
   var $83=(($82)|(0)) < 256;
   if ($83) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $85=$i;
   var $86=(($85) & 255);
   var $87=$i;
   var $88=$2;
   var $89=(($88+568)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+4)|0);
   var $92=$91;
   var $93=(($92+4)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94+($87<<3))|0);
   var $96=(($95)|0);
   HEAP8[($96)]=$86;
   var $97=$i;
   var $98=$2;
   var $99=(($98+568)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+4)|0);
   var $102=$101;
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+($97<<3))|0);
   var $106=(($105+1)|0);
   HEAP8[($106)]=1;
   var $107=$i;
   var $108=$2;
   var $109=(($108+568)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+4)|0);
   var $112=$111;
   var $113=(($112+4)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114+($107<<3))|0);
   var $116=(($115+4)|0);
   HEAP32[(($116)>>2)]=0;
   label = 11; break;
  case 11: 
   var $118=$i;
   var $119=((($118)+(1))|0);
   $i=$119;
   label = 9; break;
  case 12: 
   $i=0;
   label = 13; break;
  case 13: 
   var $122=$i;
   var $123=(($122)|(0)) < 128;
   if ($123) { label = 14; break; } else { label = 24; break; }
  case 14: 
   $k=0;
   label = 15; break;
  case 15: 
   var $126=$k;
   var $127=(($126)|(0)) < 8;
   if ($127) { label = 16; break; } else { label = 22; break; }
  case 16: 
   $m=0;
   label = 17; break;
  case 17: 
   var $130=$m;
   var $131=(($130)|(0)) < 64;
   if ($131) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $133=$k;
   var $134=((304+($133<<1))|0);
   var $135=HEAP16[(($134)>>1)];
   var $136=(($135)&(65535));
   var $137=$i;
   var $138=((($137)+(2))|0);
   var $139=((((($136)|(0)))/((($138)|(0))))&-1);
   var $140=(((16384)-($139))|0);
   var $141=(($140) & 65535);
   var $142=$k;
   var $143=$m;
   var $144=((($142)+($143))|0);
   var $145=$i;
   var $146=$2;
   var $147=(($146+3212)|0);
   var $148=(($147+($145<<7))|0);
   var $149=(($148+($144<<1))|0);
   HEAP16[(($149)>>1)]=$141;
   label = 19; break;
  case 19: 
   var $151=$m;
   var $152=((($151)+(8))|0);
   $m=$152;
   label = 17; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $155=$k;
   var $156=((($155)+(1))|0);
   $k=$156;
   label = 15; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $159=$i;
   var $160=((($159)+(1))|0);
   $i=$160;
   label = 13; break;
  case 24: 
   $i=0;
   label = 25; break;
  case 25: 
   var $163=$i;
   var $164=(($163)|(0)) < 25;
   if ($164) { label = 26; break; } else { label = 32; break; }
  case 26: 
   $k=0;
   label = 27; break;
  case 27: 
   var $167=$k;
   var $168=(($167)|(0)) < 16;
   if ($168) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $170=$k;
   var $171=$i;
   var $172=$2;
   var $173=(($172+1608)|0);
   var $174=(($173+($171<<6))|0);
   var $175=(($174+($170<<2))|0);
   var $176=$i;
   var $177=((($176)*(5))&-1);
   var $178=((($177)+(10))|0);
   _see2_init($175, $178);
   label = 29; break;
  case 29: 
   var $180=$k;
   var $181=((($180)+(1))|0);
   $k=$181;
   label = 27; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $184=$i;
   var $185=((($184)+(1))|0);
   $i=$185;
   label = 25; break;
  case 32: 
   $1=1;
   label = 33; break;
  case 33: 
   var $188=$1;
   STACKTOP = sp;
   return $188;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_u2b($nu) {
 var label = 0;
 var $1;
 $1=$nu;
 var $2=$1;
 var $3=($2<<4);
 return $3;
}
function _see2_init($see2_cont, $init_val) {
 var label = 0;
 var $1;
 var $2;
 $1=$see2_cont;
 $2=$init_val;
 var $3=$2;
 var $4=$1;
 var $5=(($4+2)|0);
 HEAP8[($5)]=3;
 var $6=$3 << 3;
 var $7=(($6) & 65535);
 var $8=$1;
 var $9=(($8)|0);
 HEAP16[(($9)>>1)]=$7;
 var $10=$1;
 var $11=(($10+3)|0);
 HEAP8[($11)]=4;
 return;
}
function _sub_allocator_remove_node($sub_alloc, $indx) {
 var label = 0;
 var $1;
 var $2;
 var $ret_val;
 $1=$sub_alloc;
 $2=$indx;
 var $3=$2;
 var $4=$1;
 var $5=(($4+352)|0);
 var $6=(($5+($3<<2))|0);
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 $ret_val=$8;
 var $9=$ret_val;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 var $13=$1;
 var $14=(($13+352)|0);
 var $15=(($14+($12<<2))|0);
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=$11;
 var $17=$ret_val;
 var $18=$17;
 return $18;
}
function _sub_allocator_insert_node($sub_alloc, $p, $indx) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$sub_alloc;
 $2=$p;
 $3=$indx;
 var $4=$3;
 var $5=$1;
 var $6=(($5+352)|0);
 var $7=(($6+($4<<2))|0);
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=$10;
 var $12=(($11)|0);
 HEAP32[(($12)>>2)]=$9;
 var $13=$2;
 var $14=$13;
 var $15=$3;
 var $16=$1;
 var $17=(($16+352)|0);
 var $18=(($17+($15<<2))|0);
 var $19=(($18)|0);
 HEAP32[(($19)>>2)]=$14;
 return;
}
function _rar_mem_blk_insertAt($a, $p) {
 var label = 0;
 var $1;
 var $2;
 $1=$a;
 $2=$p;
 var $3=$2;
 var $4=$1;
 var $5=(($4+8)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=(($3+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$1;
 var $9=(($8+4)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$1;
 var $11=$1;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+8)|0);
 HEAP32[(($14)>>2)]=$10;
 var $15=$2;
 var $16=(($15+4)|0);
 HEAP32[(($16)>>2)]=$10;
 return;
}
function _rar_mem_blk_remove($a) {
 var label = 0;
 var $1;
 $1=$a;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+4)|0);
 HEAP32[(($8)>>2)]=$4;
 var $9=$1;
 var $10=(($9+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+8)|0);
 HEAP32[(($15)>>2)]=$11;
 return;
}
function _sub_allocator_init_sub_allocator($sub_alloc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $k;
   var $size1;
   var $real_size1;
   var $size2;
   var $real_size2;
   $1=$sub_alloc;
   var $2=$1;
   var $3=(($2+352)|0);
   var $4=$3;
   _memset($4, 0, 152);
   var $5=$1;
   var $6=(($5+340)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$1;
   var $9=(($8+504)|0);
   HEAP32[(($9)>>2)]=$7;
   var $10=$1;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((((($12)|(0)))/(8))&-1);
   var $14=((((($13)>>>(0)))/(12))&-1);
   var $15=((($14)*(7))&-1);
   var $16=((($15)*(12))&-1);
   $size2=$16;
   var $17=$size2;
   var $18=((((($17)>>>(0)))/(12))&-1);
   var $19=($18<<4);
   $real_size2=$19;
   var $20=$1;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$size2;
   var $24=((($22)-($23))|0);
   $size1=$24;
   var $25=$size1;
   var $26=((((($25)>>>(0)))/(12))&-1);
   var $27=($26<<4);
   var $28=$size1;
   var $29=((((($28)>>>(0)))%(12))&-1);
   var $30=((($27)+($29))|0);
   $real_size1=$30;
   var $31=$1;
   var $32=(($31+340)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$1;
   var $35=(($34)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($33+$36)|0);
   var $38=$1;
   var $39=(($38+348)|0);
   HEAP32[(($39)>>2)]=$37;
   var $40=$1;
   var $41=(($40+340)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$real_size1;
   var $44=(($42+$43)|0);
   var $45=$1;
   var $46=(($45+508)|0);
   HEAP32[(($46)>>2)]=$44;
   var $47=$1;
   var $48=(($47+344)|0);
   HEAP32[(($48)>>2)]=$44;
   var $49=$1;
   var $50=(($49+340)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$size1;
   var $53=(($51+$52)|0);
   var $54=$1;
   var $55=(($54+516)|0);
   HEAP32[(($55)>>2)]=$53;
   var $56=$1;
   var $57=(($56+344)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$real_size2;
   var $60=(($58+$59)|0);
   var $61=$1;
   var $62=(($61+348)|0);
   HEAP32[(($62)>>2)]=$60;
   $i=0;
   $k=1;
   label = 2; break;
  case 2: 
   var $64=$i;
   var $65=(($64)|(0)) < 4;
   if ($65) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $67=$k;
   var $68=(($67) & 65535);
   var $69=$i;
   var $70=$1;
   var $71=(($70+4)|0);
   var $72=(($71+($69<<1))|0);
   HEAP16[(($72)>>1)]=$68;
   label = 4; break;
  case 4: 
   var $74=$i;
   var $75=((($74)+(1))|0);
   $i=$75;
   var $76=$k;
   var $77=((($76)+(1))|0);
   $k=$77;
   label = 2; break;
  case 5: 
   var $79=$k;
   var $80=((($79)+(1))|0);
   $k=$80;
   label = 6; break;
  case 6: 
   var $82=$i;
   var $83=(($82)|(0)) < 8;
   if ($83) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $85=$k;
   var $86=(($85) & 65535);
   var $87=$i;
   var $88=$1;
   var $89=(($88+4)|0);
   var $90=(($89+($87<<1))|0);
   HEAP16[(($90)>>1)]=$86;
   label = 8; break;
  case 8: 
   var $92=$i;
   var $93=((($92)+(1))|0);
   $i=$93;
   var $94=$k;
   var $95=((($94)+(2))|0);
   $k=$95;
   label = 6; break;
  case 9: 
   var $97=$k;
   var $98=((($97)+(1))|0);
   $k=$98;
   label = 10; break;
  case 10: 
   var $100=$i;
   var $101=(($100)|(0)) < 12;
   if ($101) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $103=$k;
   var $104=(($103) & 65535);
   var $105=$i;
   var $106=$1;
   var $107=(($106+4)|0);
   var $108=(($107+($105<<1))|0);
   HEAP16[(($108)>>1)]=$104;
   label = 12; break;
  case 12: 
   var $110=$i;
   var $111=((($110)+(1))|0);
   $i=$111;
   var $112=$k;
   var $113=((($112)+(3))|0);
   $k=$113;
   label = 10; break;
  case 13: 
   var $115=$k;
   var $116=((($115)+(1))|0);
   $k=$116;
   label = 14; break;
  case 14: 
   var $118=$i;
   var $119=(($118)|(0)) < 38;
   if ($119) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $121=$k;
   var $122=(($121) & 65535);
   var $123=$i;
   var $124=$1;
   var $125=(($124+4)|0);
   var $126=(($125+($123<<1))|0);
   HEAP16[(($126)>>1)]=$122;
   label = 16; break;
  case 16: 
   var $128=$i;
   var $129=((($128)+(1))|0);
   $i=$129;
   var $130=$k;
   var $131=((($130)+(4))|0);
   $k=$131;
   label = 14; break;
  case 17: 
   $i=0;
   $k=0;
   var $133=$1;
   var $134=(($133+336)|0);
   HEAP16[(($134)>>1)]=0;
   label = 18; break;
  case 18: 
   var $136=$k;
   var $137=(($136)|(0)) < 128;
   if ($137) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $139=$i;
   var $140=$1;
   var $141=(($140+4)|0);
   var $142=(($141+($139<<1))|0);
   var $143=HEAP16[(($142)>>1)];
   var $144=(($143 << 16) >> 16);
   var $145=$k;
   var $146=((($145)+(1))|0);
   var $147=(($144)|(0)) < (($146)|(0));
   var $148=(($147)&(1));
   var $149=$i;
   var $150=((($149)+($148))|0);
   $i=$150;
   var $151=$i;
   var $152=(($151) & 65535);
   var $153=$k;
   var $154=$1;
   var $155=(($154+80)|0);
   var $156=(($155+($153<<1))|0);
   HEAP16[(($156)>>1)]=$152;
   label = 20; break;
  case 20: 
   var $158=$k;
   var $159=((($158)+(1))|0);
   $k=$159;
   label = 18; break;
  case 21: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_alloc_context($sub_alloc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$sub_alloc;
   var $3=$2;
   var $4=(($3+348)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=(($6+344)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)|(0))!=(($8)|(0));
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$2;
   var $12=(($11+348)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(16))|0);
   HEAP32[(($12)>>2)]=$14;
   $1=$14;
   label = 6; break;
  case 3: 
   var $16=$2;
   var $17=(($16+352)|0);
   var $18=(($17)|0);
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=$2;
   var $24=_sub_allocator_remove_node($23, 0);
   $1=$24;
   label = 6; break;
  case 5: 
   var $26=$2;
   var $27=_sub_allocator_alloc_units_rare($26, 0);
   $1=$27;
   label = 6; break;
  case 6: 
   var $29=$1;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_alloc_units_rare($sub_alloc, $indx) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $j;
   var $ret_val;
   $2=$sub_alloc;
   $3=$indx;
   var $4=$2;
   var $5=(($4+336)|0);
   var $6=HEAP16[(($5)>>1)];
   var $7=(($6 << 16) >> 16)!=0;
   if ($7) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $9=$2;
   var $10=(($9+336)|0);
   HEAP16[(($10)>>1)]=255;
   var $11=$2;
   _sub_allocator_glue_free_blocks($11);
   var $12=$3;
   var $13=$2;
   var $14=(($13+352)|0);
   var $15=(($14+($12<<2))|0);
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $20=$2;
   var $21=$3;
   var $22=_sub_allocator_remove_node($20, $21);
   $1=$22;
   label = 13; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $25=$3;
   $i=$25;
   label = 6; break;
  case 6: 
   var $27=$i;
   var $28=((($27)+(1))|0);
   $i=$28;
   var $29=(($28)|(0))==38;
   if ($29) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $31=$2;
   var $32=(($31+336)|0);
   var $33=HEAP16[(($32)>>1)];
   var $34=((($33)-(1))&65535);
   HEAP16[(($32)>>1)]=$34;
   var $35=$3;
   var $36=$2;
   var $37=(($36+4)|0);
   var $38=(($37+($35<<1))|0);
   var $39=HEAP16[(($38)>>1)];
   var $40=(($39 << 16) >> 16);
   var $41=_sub_allocator_u2b($40);
   $i=$41;
   var $42=$3;
   var $43=$2;
   var $44=(($43+4)|0);
   var $45=(($44+($42<<1))|0);
   var $46=HEAP16[(($45)>>1)];
   var $47=(($46 << 16) >> 16);
   var $48=((($47)*(12))&-1);
   $j=$48;
   var $49=$2;
   var $50=(($49+516)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$2;
   var $53=(($52+504)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$51;
   var $56=$54;
   var $57=((($55)-($56))|0);
   var $58=$j;
   var $59=(($57)|(0)) > (($58)|(0));
   if ($59) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $61=$j;
   var $62=$2;
   var $63=(($62+516)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(((-$61))|0);
   var $66=(($64+$65)|0);
   HEAP32[(($63)>>2)]=$66;
   var $67=$i;
   var $68=$2;
   var $69=(($68+508)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(((-$67))|0);
   var $72=(($70+$71)|0);
   HEAP32[(($69)>>2)]=$72;
   var $73=$2;
   var $74=(($73+508)|0);
   var $75=HEAP32[(($74)>>2)];
   $1=$75;
   label = 13; break;
  case 9: 
   $1=0;
   label = 13; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $79=$i;
   var $80=$2;
   var $81=(($80+352)|0);
   var $82=(($81+($79<<2))|0);
   var $83=(($82)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   var $86=$85 ^ 1;
   if ($86) { label = 6; break; } else { label = 12; break; }
  case 12: 
   var $88=$2;
   var $89=$i;
   var $90=_sub_allocator_remove_node($88, $89);
   $ret_val=$90;
   var $91=$2;
   var $92=$ret_val;
   var $93=$i;
   var $94=$3;
   _sub_allocator_split_block($91, $92, $93, $94);
   var $95=$ret_val;
   $1=$95;
   label = 13; break;
  case 13: 
   var $97=$1;
   return $97;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_glue_free_blocks($sub_alloc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s0=sp;
   var $p;
   var $p1;
   var $i;
   var $k;
   var $sz;
   $1=$sub_alloc;
   var $2=$1;
   var $3=(($2+344)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$1;
   var $6=(($5+348)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($4)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=(($10+344)|0);
   var $12=HEAP32[(($11)>>2)];
   HEAP8[($12)]=0;
   label = 3; break;
  case 3: 
   $i=0;
   var $14=(($s0+8)|0);
   HEAP32[(($14)>>2)]=$s0;
   var $15=(($s0+4)|0);
   HEAP32[(($15)>>2)]=$s0;
   label = 4; break;
  case 4: 
   var $17=$i;
   var $18=(($17)|(0)) < 38;
   if ($18) { label = 5; break; } else { label = 10; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $21=$i;
   var $22=$1;
   var $23=(($22+352)|0);
   var $24=(($23+($21<<2))|0);
   var $25=(($24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   if ($27) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $29=$1;
   var $30=$i;
   var $31=_sub_allocator_remove_node($29, $30);
   var $32=$31;
   $p=$32;
   var $33=$p;
   _rar_mem_blk_insertAt($33, $s0);
   var $34=$p;
   var $35=(($34)|0);
   HEAP16[(($35)>>1)]=-1;
   var $36=$i;
   var $37=$1;
   var $38=(($37+4)|0);
   var $39=(($38+($36<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   var $41=$p;
   var $42=(($41+2)|0);
   HEAP16[(($42)>>1)]=$40;
   label = 6; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $45=$i;
   var $46=((($45)+(1))|0);
   $i=$46;
   label = 4; break;
  case 10: 
   var $48=(($s0+4)|0);
   var $49=HEAP32[(($48)>>2)];
   $p=$49;
   label = 11; break;
  case 11: 
   var $51=$p;
   var $52=(($51)|(0))!=(($s0)|(0));
   if ($52) { label = 12; break; } else { label = 19; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $55=$p;
   var $56=$p;
   var $57=(($56+2)|0);
   var $58=HEAP16[(($57)>>1)];
   var $59=(($58)&(65535));
   var $60=_sub_allocator_mbptr($55, $59);
   $p1=$60;
   var $61=(($60)|0);
   var $62=HEAP16[(($61)>>1)];
   var $63=(($62)&(65535));
   var $64=(($63)|(0))==65535;
   if ($64) { label = 14; break; } else { var $77 = 0;label = 15; break; }
  case 14: 
   var $66=$p;
   var $67=(($66+2)|0);
   var $68=HEAP16[(($67)>>1)];
   var $69=(($68)&(65535));
   var $70=$p1;
   var $71=(($70+2)|0);
   var $72=HEAP16[(($71)>>1)];
   var $73=(($72)&(65535));
   var $74=((($69)+($73))|0);
   var $75=(($74)|(0)) < 65536;
   var $77 = $75;label = 15; break;
  case 15: 
   var $77;
   if ($77) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $79=$p1;
   _rar_mem_blk_remove($79);
   var $80=$p1;
   var $81=(($80+2)|0);
   var $82=HEAP16[(($81)>>1)];
   var $83=(($82)&(65535));
   var $84=$p;
   var $85=(($84+2)|0);
   var $86=HEAP16[(($85)>>1)];
   var $87=(($86)&(65535));
   var $88=((($87)+($83))|0);
   var $89=(($88) & 65535);
   HEAP16[(($85)>>1)]=$89;
   label = 13; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $92=$p;
   var $93=(($92+4)|0);
   var $94=HEAP32[(($93)>>2)];
   $p=$94;
   label = 11; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $97=(($s0+4)|0);
   var $98=HEAP32[(($97)>>2)];
   $p=$98;
   var $99=(($98)|(0))!=(($s0)|(0));
   if ($99) { label = 21; break; } else { label = 28; break; }
  case 21: 
   var $101=$p;
   _rar_mem_blk_remove($101);
   var $102=$p;
   var $103=(($102+2)|0);
   var $104=HEAP16[(($103)>>1)];
   var $105=(($104)&(65535));
   $sz=$105;
   label = 22; break;
  case 22: 
   var $107=$sz;
   var $108=(($107)|(0)) > 128;
   if ($108) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $110=$1;
   var $111=$p;
   var $112=$111;
   _sub_allocator_insert_node($110, $112, 37);
   label = 24; break;
  case 24: 
   var $114=$sz;
   var $115=((($114)-(128))|0);
   $sz=$115;
   var $116=$p;
   var $117=_sub_allocator_mbptr($116, 128);
   $p=$117;
   label = 22; break;
  case 25: 
   var $119=$sz;
   var $120=((($119)-(1))|0);
   var $121=$1;
   var $122=(($121+80)|0);
   var $123=(($122+($120<<1))|0);
   var $124=HEAP16[(($123)>>1)];
   var $125=(($124 << 16) >> 16);
   $i=$125;
   var $126=$1;
   var $127=(($126+4)|0);
   var $128=(($127+($125<<1))|0);
   var $129=HEAP16[(($128)>>1)];
   var $130=(($129 << 16) >> 16);
   var $131=$sz;
   var $132=(($130)|(0))!=(($131)|(0));
   if ($132) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $134=$sz;
   var $135=$i;
   var $136=((($135)-(1))|0);
   $i=$136;
   var $137=$1;
   var $138=(($137+4)|0);
   var $139=(($138+($136<<1))|0);
   var $140=HEAP16[(($139)>>1)];
   var $141=(($140 << 16) >> 16);
   var $142=((($134)-($141))|0);
   $k=$142;
   var $143=$1;
   var $144=$p;
   var $145=$sz;
   var $146=$k;
   var $147=((($145)-($146))|0);
   var $148=_sub_allocator_mbptr($144, $147);
   var $149=$148;
   var $150=$k;
   var $151=((($150)-(1))|0);
   _sub_allocator_insert_node($143, $149, $151);
   label = 27; break;
  case 27: 
   var $153=$1;
   var $154=$p;
   var $155=$154;
   var $156=$i;
   _sub_allocator_insert_node($153, $155, $156);
   label = 20; break;
  case 28: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_split_block($sub_alloc, $pv, $old_indx, $new_indx) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $udiff;
   var $p;
   $1=$sub_alloc;
   $2=$pv;
   $3=$old_indx;
   $4=$new_indx;
   var $5=$3;
   var $6=$1;
   var $7=(($6+4)|0);
   var $8=(($7+($5<<1))|0);
   var $9=HEAP16[(($8)>>1)];
   var $10=(($9 << 16) >> 16);
   var $11=$4;
   var $12=$1;
   var $13=(($12+4)|0);
   var $14=(($13+($11<<1))|0);
   var $15=HEAP16[(($14)>>1)];
   var $16=(($15 << 16) >> 16);
   var $17=((($10)-($16))|0);
   $udiff=$17;
   var $18=$2;
   var $19=$4;
   var $20=$1;
   var $21=(($20+4)|0);
   var $22=(($21+($19<<1))|0);
   var $23=HEAP16[(($22)>>1)];
   var $24=(($23 << 16) >> 16);
   var $25=_sub_allocator_u2b($24);
   var $26=(($18+$25)|0);
   $p=$26;
   var $27=$udiff;
   var $28=((($27)-(1))|0);
   var $29=$1;
   var $30=(($29+80)|0);
   var $31=(($30+($28<<1))|0);
   var $32=HEAP16[(($31)>>1)];
   var $33=(($32 << 16) >> 16);
   $i=$33;
   var $34=$1;
   var $35=(($34+4)|0);
   var $36=(($35+($33<<1))|0);
   var $37=HEAP16[(($36)>>1)];
   var $38=(($37 << 16) >> 16);
   var $39=$udiff;
   var $40=(($38)|(0))!=(($39)|(0));
   if ($40) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $42=$1;
   var $43=$p;
   var $44=$i;
   var $45=((($44)-(1))|0);
   $i=$45;
   _sub_allocator_insert_node($42, $43, $45);
   var $46=$i;
   var $47=$1;
   var $48=(($47+4)|0);
   var $49=(($48+($46<<1))|0);
   var $50=HEAP16[(($49)>>1)];
   var $51=(($50 << 16) >> 16);
   $i=$51;
   var $52=_sub_allocator_u2b($51);
   var $53=$p;
   var $54=(($53+$52)|0);
   $p=$54;
   var $55=$i;
   var $56=$udiff;
   var $57=((($56)-($55))|0);
   $udiff=$57;
   label = 3; break;
  case 3: 
   var $59=$1;
   var $60=$p;
   var $61=$udiff;
   var $62=((($61)-(1))|0);
   var $63=$1;
   var $64=(($63+80)|0);
   var $65=(($64+($62<<1))|0);
   var $66=HEAP16[(($65)>>1)];
   var $67=(($66 << 16) >> 16);
   _sub_allocator_insert_node($59, $60, $67);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_mbptr($base_ptr, $items) {
 var label = 0;
 var $1;
 var $2;
 $1=$base_ptr;
 $2=$items;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=_sub_allocator_u2b($5);
 var $7=(($4+$6)|0);
 var $8=$7;
 return $8;
}
function _create_child($ppm_data, $context, $pstats, $first_state) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $pc;
   $1=$ppm_data;
   $2=$context;
   $3=$pstats;
   $4=$first_state;
   _rar_dbgmsg(((2208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $5=$1;
   var $6=(($5)|0);
   var $7=_sub_allocator_alloc_context($6);
   var $8=$7;
   $pc=$8;
   var $9=$pc;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$pc;
   var $13=(($12)|0);
   HEAP16[(($13)>>1)]=1;
   var $14=$pc;
   var $15=(($14+4)|0);
   var $16=$15;
   var $17=$4;
   var $18=$16;
   var $19=$17;
   assert(8 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
   var $20=$2;
   var $21=$pc;
   var $22=(($21+12)|0);
   HEAP32[(($22)>>2)]=$20;
   var $23=$pc;
   var $24=$3;
   var $25=(($24+4)|0);
   HEAP32[(($25)>>2)]=$23;
   label = 3; break;
  case 3: 
   var $27=$pc;
   STACKTOP = sp;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _coder_get_current_count($coder) {
 var label = 0;
 var $1;
 $1=$coder;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=((($4)-($7))|0);
 var $9=$1;
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=((((($14)>>>(0)))/((($11)>>>(0))))&-1);
 HEAP32[(($13)>>2)]=$15;
 var $16=((((($8)>>>(0)))/((($15)>>>(0))))&-1);
 return $16;
}
function _update($see2_cont) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$see2_cont;
   var $2=$1;
   var $3=(($2+2)|0);
   var $4=HEAP8[($3)];
   var $5=(($4)&(255));
   var $6=(($5)|(0)) < 7;
   if ($6) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $8=$1;
   var $9=(($8+3)|0);
   var $10=HEAP8[($9)];
   var $11=((($10)-(1))&255);
   HEAP8[($9)]=$11;
   var $12=(($11)&(255));
   var $13=(($12)|(0))==0;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$1;
   var $16=(($15)|0);
   var $17=HEAP16[(($16)>>1)];
   var $18=(($17)&(65535));
   var $19=$1;
   var $20=(($19)|0);
   var $21=HEAP16[(($20)>>1)];
   var $22=(($21)&(65535));
   var $23=((($22)+($18))|0);
   var $24=(($23) & 65535);
   HEAP16[(($20)>>1)]=$24;
   var $25=$1;
   var $26=(($25+2)|0);
   var $27=HEAP8[($26)];
   var $28=((($27)+(1))&255);
   HEAP8[($26)]=$28;
   var $29=(($27)&(255));
   var $30=3 << $29;
   var $31=(($30) & 255);
   var $32=$1;
   var $33=(($32+3)|0);
   HEAP8[($33)]=$31;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_mean($see2_cont) {
 var label = 0;
 var $1;
 var $ret_val;
 $1=$see2_cont;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=(($4)&(65535));
 var $6=$1;
 var $7=(($6+2)|0);
 var $8=HEAP8[($7)];
 var $9=(($8)&(255));
 var $10=$5 >> (($9)|(0));
 $ret_val=$10;
 var $11=$ret_val;
 var $12=$1;
 var $13=(($12)|0);
 var $14=HEAP16[(($13)>>1)];
 var $15=(($14)&(65535));
 var $16=((($15)-($11))|0);
 var $17=(($16) & 65535);
 HEAP16[(($13)>>1)]=$17;
 var $18=$ret_val;
 var $19=$ret_val;
 var $20=(($19)|(0))==0;
 var $21=(($20)&(1));
 var $22=((($18)+($21))|0);
 return $22;
}
function _coder_get_current_shift_count($coder, $shift) {
 var label = 0;
 var $1;
 var $2;
 $1=$coder;
 $2=$shift;
 var $3=$1;
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=((($5)-($8))|0);
 var $10=$2;
 var $11=$1;
 var $12=(($11+8)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13 >>> (($10)>>>(0));
 HEAP32[(($12)>>2)]=$14;
 var $15=((((($9)>>>(0)))/((($14)>>>(0))))&-1);
 return $15;
}
function _make_esc_freq($ppm_data, $context, $diff) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $psee2c;
   $1=$ppm_data;
   $2=$context;
   $3=$diff;
   var $4=$2;
   var $5=(($4)|0);
   var $6=HEAP16[(($5)>>1)];
   var $7=(($6)&(65535));
   var $8=(($7)|(0))!=256;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$3;
   var $11=((($10)-(1))|0);
   var $12=$1;
   var $13=(($12+836)|0);
   var $14=(($13+$11)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$1;
   var $18=(($17+1608)|0);
   var $19=(($18+($16<<6))|0);
   var $20=(($19)|0);
   var $21=$3;
   var $22=$2;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|0);
   var $26=HEAP16[(($25)>>1)];
   var $27=(($26)&(65535));
   var $28=$2;
   var $29=(($28)|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30)&(65535));
   var $32=((($27)-($31))|0);
   var $33=(($21)|(0)) < (($32)|(0));
   var $34=(($33)&(1));
   var $35=(($20+($34<<2))|0);
   var $36=$2;
   var $37=(($36+4)|0);
   var $38=$37;
   var $39=(($38)|0);
   var $40=HEAP16[(($39)>>1)];
   var $41=(($40)&(65535));
   var $42=$2;
   var $43=(($42)|0);
   var $44=HEAP16[(($43)>>1)];
   var $45=(($44)&(65535));
   var $46=((($45)*(11))&-1);
   var $47=(($41)|(0)) < (($46)|(0));
   var $48=(($47)&(1));
   var $49=($48<<1);
   var $50=(($35+($49<<2))|0);
   var $51=$1;
   var $52=(($51+544)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$3;
   var $55=(($53)|(0)) > (($54)|(0));
   var $56=(($55)&(1));
   var $57=($56<<2);
   var $58=(($50+($57<<2))|0);
   var $59=$1;
   var $60=(($59+1606)|0);
   var $61=HEAP8[($60)];
   var $62=(($61)&(255));
   var $63=(($58+($62<<2))|0);
   $psee2c=$63;
   var $64=$psee2c;
   var $65=_get_mean($64);
   var $66=$1;
   var $67=(($66+520)|0);
   var $68=(($67+20)|0);
   HEAP32[(($68)>>2)]=$65;
   label = 4; break;
  case 3: 
   var $70=$1;
   var $71=(($70+3208)|0);
   $psee2c=$71;
   var $72=$1;
   var $73=(($72+520)|0);
   var $74=(($73+20)|0);
   HEAP32[(($74)>>2)]=1;
   label = 4; break;
  case 4: 
   var $76=$psee2c;
   return $76;
  default: assert(0, "bad label: " + label);
 }
}
function _update2($ppm_data, $p, $context) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$ppm_data;
   $2=$p;
   $3=$context;
   _rar_dbgmsg(((3712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $4=$2;
   var $5=$1;
   var $6=(($5+576)|0);
   HEAP32[(($6)>>2)]=$4;
   var $7=(($4+1)|0);
   var $8=HEAP8[($7)];
   var $9=(($8)&(255));
   var $10=((($9)+(4))|0);
   var $11=(($10) & 255);
   HEAP8[($7)]=$11;
   var $12=$3;
   var $13=(($12+4)|0);
   var $14=$13;
   var $15=(($14)|0);
   var $16=HEAP16[(($15)>>1)];
   var $17=(($16)&(65535));
   var $18=((($17)+(4))|0);
   var $19=(($18) & 65535);
   HEAP16[(($15)>>1)]=$19;
   var $20=$2;
   var $21=(($20+1)|0);
   var $22=HEAP8[($21)];
   var $23=(($22)&(255));
   var $24=(($23)|(0)) > 124;
   if ($24) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $26=$1;
   var $27=$3;
   _rescale($26, $27);
   label = 3; break;
  case 3: 
   var $29=$1;
   var $30=(($29+1604)|0);
   var $31=HEAP8[($30)];
   var $32=((($31)+(1))&255);
   HEAP8[($30)]=$32;
   var $33=$1;
   var $34=(($33+564)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$1;
   var $37=(($36+560)|0);
   HEAP32[(($37)>>2)]=$35;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rescale($ppm_data, $context) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $old_ns;
   var $i;
   var $adder;
   var $esc_freq;
   var $n0;
   var $n1;
   var $p1;
   var $p;
   var $tmp=sp;
   var $tmp1=(sp)+(8);
   $1=$ppm_data;
   $2=$context;
   _rar_dbgmsg(((3680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $3=$2;
   var $4=(($3)|0);
   var $5=HEAP16[(($4)>>1)];
   var $6=(($5)&(65535));
   $old_ns=$6;
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP16[(($8)>>1)];
   var $10=(($9)&(65535));
   var $11=((($10)-(1))|0);
   $i=$11;
   var $12=$1;
   var $13=(($12+576)|0);
   var $14=HEAP32[(($13)>>2)];
   $p=$14;
   label = 2; break;
  case 2: 
   var $16=$p;
   var $17=$2;
   var $18=(($17+4)|0);
   var $19=$18;
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($16)|(0))!=(($21)|(0));
   if ($22) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $24=$p;
   var $25=(($24)|0);
   var $26=$p;
   var $27=((($26)-(8))|0);
   _ppmd_swap($25, $27);
   label = 4; break;
  case 4: 
   var $29=$p;
   var $30=((($29)-(8))|0);
   $p=$30;
   label = 2; break;
  case 5: 
   var $32=$2;
   var $33=(($32+4)|0);
   var $34=$33;
   var $35=(($34+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+1)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=((($39)+(4))|0);
   var $41=(($40) & 255);
   HEAP8[($37)]=$41;
   var $42=$2;
   var $43=(($42+4)|0);
   var $44=$43;
   var $45=(($44)|0);
   var $46=HEAP16[(($45)>>1)];
   var $47=(($46)&(65535));
   var $48=((($47)+(4))|0);
   var $49=(($48) & 65535);
   HEAP16[(($45)>>1)]=$49;
   var $50=$2;
   var $51=(($50+4)|0);
   var $52=$51;
   var $53=(($52)|0);
   var $54=HEAP16[(($53)>>1)];
   var $55=(($54)&(65535));
   var $56=$p;
   var $57=(($56+1)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=((($55)-($59))|0);
   $esc_freq=$60;
   var $61=$1;
   var $62=(($61+552)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63)|(0))!=0;
   var $65=(($64)&(1));
   $adder=$65;
   var $66=$p;
   var $67=(($66+1)|0);
   var $68=HEAP8[($67)];
   var $69=(($68)&(255));
   var $70=$adder;
   var $71=((($69)+($70))|0);
   var $72=$71 >> 1;
   var $73=(($72) & 255);
   var $74=$p;
   var $75=(($74+1)|0);
   HEAP8[($75)]=$73;
   var $76=(($73)&(255));
   var $77=$2;
   var $78=(($77+4)|0);
   var $79=$78;
   var $80=(($79)|0);
   HEAP16[(($80)>>1)]=$76;
   label = 6; break;
  case 6: 
   var $82=$p;
   var $83=(($82+8)|0);
   $p=$83;
   var $84=(($83+1)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$esc_freq;
   var $88=((($87)-($86))|0);
   $esc_freq=$88;
   var $89=$p;
   var $90=(($89+1)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=$adder;
   var $94=((($92)+($93))|0);
   var $95=$94 >> 1;
   var $96=(($95) & 255);
   var $97=$p;
   var $98=(($97+1)|0);
   HEAP8[($98)]=$96;
   var $99=(($96)&(255));
   var $100=$2;
   var $101=(($100+4)|0);
   var $102=$101;
   var $103=(($102)|0);
   var $104=HEAP16[(($103)>>1)];
   var $105=(($104)&(65535));
   var $106=((($105)+($99))|0);
   var $107=(($106) & 65535);
   HEAP16[(($103)>>1)]=$107;
   var $108=$p;
   var $109=(($108)|0);
   var $110=(($109+1)|0);
   var $111=HEAP8[($110)];
   var $112=(($111)&(255));
   var $113=$p;
   var $114=((($113)-(8))|0);
   var $115=(($114+1)|0);
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=(($112)|(0)) > (($117)|(0));
   if ($118) { label = 7; break; } else { label = 13; break; }
  case 7: 
   var $120=$p;
   $p1=$120;
   var $121=$tmp;
   var $122=$120;
   assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
   label = 8; break;
  case 8: 
   var $124=$p1;
   var $125=(($124)|0);
   var $126=$p1;
   var $127=((($126)-(8))|0);
   var $128=$125;
   var $129=$127;
   assert(8 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[((($128)+(4))>>2)]=HEAP32[((($129)+(4))>>2)];
   label = 9; break;
  case 9: 
   var $131=$p1;
   var $132=((($131)-(8))|0);
   $p1=$132;
   var $133=$2;
   var $134=(($133+4)|0);
   var $135=$134;
   var $136=(($135+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($132)|(0))!=(($137)|(0));
   if ($138) { label = 10; break; } else { var $150 = 0;label = 11; break; }
  case 10: 
   var $140=(($tmp+1)|0);
   var $141=HEAP8[($140)];
   var $142=(($141)&(255));
   var $143=$p1;
   var $144=((($143)-(8))|0);
   var $145=(($144+1)|0);
   var $146=HEAP8[($145)];
   var $147=(($146)&(255));
   var $148=(($142)|(0)) > (($147)|(0));
   var $150 = $148;label = 11; break;
  case 11: 
   var $150;
   if ($150) { label = 8; break; } else { label = 12; break; }
  case 12: 
   var $152=$p1;
   var $153=$152;
   var $154=$tmp;
   assert(8 % 1 === 0);HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[((($153)+(4))>>2)]=HEAP32[((($154)+(4))>>2)];
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $157=$i;
   var $158=((($157)-(1))|0);
   $i=$158;
   var $159=(($158)|(0))!=0;
   if ($159) { label = 6; break; } else { label = 15; break; }
  case 15: 
   var $161=$p;
   var $162=(($161+1)|0);
   var $163=HEAP8[($162)];
   var $164=(($163)&(255));
   var $165=(($164)|(0))==0;
   if ($165) { label = 16; break; } else { label = 25; break; }
  case 16: 
   label = 17; break;
  case 17: 
   var $168=$i;
   var $169=((($168)+(1))|0);
   $i=$169;
   label = 18; break;
  case 18: 
   var $171=$p;
   var $172=((($171)-(8))|0);
   $p=$172;
   var $173=(($172+1)|0);
   var $174=HEAP8[($173)];
   var $175=(($174)&(255));
   var $176=(($175)|(0))==0;
   if ($176) { label = 17; break; } else { label = 19; break; }
  case 19: 
   var $178=$i;
   var $179=$esc_freq;
   var $180=((($179)+($178))|0);
   $esc_freq=$180;
   var $181=$i;
   var $182=$2;
   var $183=(($182)|0);
   var $184=HEAP16[(($183)>>1)];
   var $185=(($184)&(65535));
   var $186=((($185)-($181))|0);
   var $187=(($186) & 65535);
   HEAP16[(($183)>>1)]=$187;
   var $188=(($187)&(65535));
   var $189=(($188)|(0))==1;
   if ($189) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $191=$2;
   var $192=(($191+4)|0);
   var $193=$192;
   var $194=(($193+4)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=$tmp1;
   var $197=$195;
   assert(8 % 1 === 0);HEAP32[(($196)>>2)]=HEAP32[(($197)>>2)];HEAP32[((($196)+(4))>>2)]=HEAP32[((($197)+(4))>>2)];
   label = 21; break;
  case 21: 
   var $199=(($tmp1+1)|0);
   var $200=HEAP8[($199)];
   var $201=(($200)&(255));
   var $202=$201 >> 1;
   var $203=(($tmp1+1)|0);
   var $204=HEAP8[($203)];
   var $205=(($204)&(255));
   var $206=((($205)-($202))|0);
   var $207=(($206) & 255);
   HEAP8[($203)]=$207;
   var $208=$esc_freq;
   var $209=$208 >> 1;
   $esc_freq=$209;
   label = 22; break;
  case 22: 
   var $211=$esc_freq;
   var $212=(($211)|(0)) > 1;
   if ($212) { label = 21; break; } else { label = 23; break; }
  case 23: 
   var $214=$1;
   var $215=(($214)|0);
   var $216=$2;
   var $217=(($216+4)|0);
   var $218=$217;
   var $219=(($218+4)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=$220;
   var $222=$old_ns;
   var $223=((($222)+(1))|0);
   var $224=$223 >> 1;
   _sub_allocator_free_units($215, $221, $224);
   var $225=$2;
   var $226=(($225+4)|0);
   var $227=$226;
   var $228=$1;
   var $229=(($228+576)|0);
   HEAP32[(($229)>>2)]=$227;
   var $230=$227;
   var $231=$tmp1;
   assert(8 % 1 === 0);HEAP32[(($230)>>2)]=HEAP32[(($231)>>2)];HEAP32[((($230)+(4))>>2)]=HEAP32[((($231)+(4))>>2)];
   label = 28; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $234=$esc_freq;
   var $235=$234 >> 1;
   var $236=$esc_freq;
   var $237=((($236)-($235))|0);
   $esc_freq=$237;
   var $238=$2;
   var $239=(($238+4)|0);
   var $240=$239;
   var $241=(($240)|0);
   var $242=HEAP16[(($241)>>1)];
   var $243=(($242)&(65535));
   var $244=((($243)+($237))|0);
   var $245=(($244) & 65535);
   HEAP16[(($241)>>1)]=$245;
   var $246=$old_ns;
   var $247=((($246)+(1))|0);
   var $248=$247 >> 1;
   $n0=$248;
   var $249=$2;
   var $250=(($249)|0);
   var $251=HEAP16[(($250)>>1)];
   var $252=(($251)&(65535));
   var $253=((($252)+(1))|0);
   var $254=$253 >> 1;
   $n1=$254;
   var $255=$n0;
   var $256=$n1;
   var $257=(($255)|(0))!=(($256)|(0));
   if ($257) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $259=$1;
   var $260=(($259)|0);
   var $261=$2;
   var $262=(($261+4)|0);
   var $263=$262;
   var $264=(($263+4)|0);
   var $265=HEAP32[(($264)>>2)];
   var $266=$265;
   var $267=$n0;
   var $268=$n1;
   var $269=_sub_allocator_shrink_units($260, $266, $267, $268);
   var $270=$269;
   var $271=$2;
   var $272=(($271+4)|0);
   var $273=$272;
   var $274=(($273+4)|0);
   HEAP32[(($274)>>2)]=$270;
   label = 27; break;
  case 27: 
   var $276=$2;
   var $277=(($276+4)|0);
   var $278=$277;
   var $279=(($278+4)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=$1;
   var $282=(($281+576)|0);
   HEAP32[(($282)>>2)]=$280;
   label = 28; break;
  case 28: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sub_allocator_free_units($sub_alloc, $ptr, $old_nu) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$sub_alloc;
 $2=$ptr;
 $3=$old_nu;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=((($6)-(1))|0);
 var $8=$1;
 var $9=(($8+80)|0);
 var $10=(($9+($7<<1))|0);
 var $11=HEAP16[(($10)>>1)];
 var $12=(($11 << 16) >> 16);
 _sub_allocator_insert_node($4, $5, $12);
 return;
}
function _sub_allocator_shrink_units($sub_alloc, $old_ptr, $old_nu, $new_nu) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i0;
   var $i1;
   var $ptr;
   $2=$sub_alloc;
   $3=$old_ptr;
   $4=$old_nu;
   $5=$new_nu;
   var $6=$4;
   var $7=((($6)-(1))|0);
   var $8=$2;
   var $9=(($8+80)|0);
   var $10=(($9+($7<<1))|0);
   var $11=HEAP16[(($10)>>1)];
   var $12=(($11 << 16) >> 16);
   $i0=$12;
   var $13=$5;
   var $14=((($13)-(1))|0);
   var $15=$2;
   var $16=(($15+80)|0);
   var $17=(($16+($14<<1))|0);
   var $18=HEAP16[(($17)>>1)];
   var $19=(($18 << 16) >> 16);
   $i1=$19;
   var $20=$i0;
   var $21=$i1;
   var $22=(($20)|(0))==(($21)|(0));
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$3;
   $1=$24;
   label = 6; break;
  case 3: 
   var $26=$i1;
   var $27=$2;
   var $28=(($27+352)|0);
   var $29=(($28+($26<<2))|0);
   var $30=(($29)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))!=0;
   if ($32) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $34=$2;
   var $35=$i1;
   var $36=_sub_allocator_remove_node($34, $35);
   $ptr=$36;
   var $37=$ptr;
   var $38=$3;
   var $39=$5;
   var $40=_sub_allocator_u2b($39);
   assert($40 % 1 === 0);(_memcpy($37, $38, $40)|0);
   var $41=$2;
   var $42=$3;
   var $43=$i0;
   _sub_allocator_insert_node($41, $42, $43);
   var $44=$ptr;
   $1=$44;
   label = 6; break;
  case 5: 
   var $46=$2;
   var $47=$3;
   var $48=$i0;
   var $49=$i1;
   _sub_allocator_split_block($46, $47, $48, $49);
   var $50=$3;
   $1=$50;
   label = 6; break;
  case 6: 
   var $52=$1;
   return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _update1($ppm_data, $p, $context) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$ppm_data;
   $2=$p;
   $3=$context;
   _rar_dbgmsg(((3488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $4=$2;
   var $5=$1;
   var $6=(($5+576)|0);
   HEAP32[(($6)>>2)]=$4;
   var $7=(($4+1)|0);
   var $8=HEAP8[($7)];
   var $9=(($8)&(255));
   var $10=((($9)+(4))|0);
   var $11=(($10) & 255);
   HEAP8[($7)]=$11;
   var $12=$3;
   var $13=(($12+4)|0);
   var $14=$13;
   var $15=(($14)|0);
   var $16=HEAP16[(($15)>>1)];
   var $17=(($16)&(65535));
   var $18=((($17)+(4))|0);
   var $19=(($18) & 65535);
   HEAP16[(($15)>>1)]=$19;
   var $20=$2;
   var $21=(($20)|0);
   var $22=(($21+1)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$2;
   var $26=((($25)-(8))|0);
   var $27=(($26+1)|0);
   var $28=HEAP8[($27)];
   var $29=(($28)&(255));
   var $30=(($24)|(0)) > (($29)|(0));
   if ($30) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $32=$2;
   var $33=(($32)|0);
   var $34=$2;
   var $35=((($34)-(8))|0);
   _ppmd_swap($33, $35);
   var $36=$2;
   var $37=((($36)-(8))|0);
   $2=$37;
   var $38=$1;
   var $39=(($38+576)|0);
   HEAP32[(($39)>>2)]=$37;
   var $40=$2;
   var $41=(($40+1)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=(($43)|(0)) > 124;
   if ($44) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $46=$1;
   var $47=$3;
   _rescale($46, $47);
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack_init_data20($solid, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$solid;
   $2=$unpack_data;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$2;
   var $7=(($6+4249604)|0);
   HEAP32[(($7)>>2)]=0;
   var $8=$2;
   var $9=(($8+4249600)|0);
   HEAP32[(($9)>>2)]=0;
   var $10=$2;
   var $11=(($10+4249612)|0);
   HEAP32[(($11)>>2)]=1;
   var $12=$2;
   var $13=(($12+4255284)|0);
   var $14=$13;
   _memset($14, 0, 368);
   var $15=$2;
   var $16=(($15+4249616)|0);
   var $17=$16;
   _memset($17, 0, 1028);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_dbgmsg20($fmt, varrp) {
 var label = 0;
 var $1;
 $1=$fmt;
 return;
}
function _rar_unpack20($fd, $solid, $unpack_data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ldecode=sp;
   var $lbits=(sp)+(32);
   var $ddecode=(sp)+(64);
   var $dbits=(sp)+(256);
   var $sddecode=(sp)+(304);
   var $sdbits=(sp)+(312);
   var $bits;
   var $distance;
   var $retval;
   var $audio_number;
   var $number;
   var $length;
   var $dist_number;
   var $length_number;
   $2=$fd;
   $3=$solid;
   $4=$unpack_data;
   var $5=$ldecode;
   assert(28 % 1 === 0);(_memcpy($5, ((800)|0), 28)|0);
   var $6=$lbits;
   assert(28 % 1 === 0);(_memcpy($6, ((832)|0), 28)|0);
   var $7=$ddecode;
   assert(192 % 1 === 0);(_memcpy($7, 864, 192)|0);
   var $8=$dbits;
   assert(48 % 1 === 0);(_memcpy($8, ((1056)|0), 48)|0);
   var $9=$sddecode;
   assert(8 % 1 === 0);(_memcpy($9, ((784)|0), 8)|0);
   var $10=$sdbits;
   assert(8 % 1 === 0);(_memcpy($10, ((792)|0), 8)|0);
   $retval=1;
   _rar_dbgmsg20(((3424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $11=$3;
   var $12=$4;
   _unpack_init_data($11, $12);
   var $13=$2;
   var $14=$4;
   var $15=_unp_read_buf($13, $14);
   var $16=(($15)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 60; break;
  case 3: 
   var $19=$3;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $22=$2;
   var $23=$4;
   var $24=_read_tables20($22, $23);
   var $25=(($24)|(0))!=0;
   if ($25) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $1=0;
   label = 60; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $29=$4;
   var $30=(($29+4249544)|0);
   var $ld$0$0=(($30)|0);
   var $31$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($30+4)|0);
   var $31$1=HEAP32[(($ld$1$1)>>2)];
   var $$etemp$2$0=-1;
   var $$etemp$2$1=-1;
   var $32$0 = _i64Add($31$0,$31$1,$$etemp$2$0,$$etemp$2$1); var $32$1 = tempRet0;
   var $st$3$0=(($30)|0);
   HEAP32[(($st$3$0)>>2)]=$32$0;
   var $st$4$1=(($30+4)|0);
   HEAP32[(($st$4$1)>>2)]=$32$1;
   label = 8; break;
  case 8: 
   var $34=$4;
   var $35=(($34+4249544)|0);
   var $ld$5$0=(($35)|0);
   var $36$0=HEAP32[(($ld$5$0)>>2)];
   var $ld$6$1=(($35+4)|0);
   var $36$1=HEAP32[(($ld$6$1)>>2)];
   var $$etemp$7$0=0;
   var $$etemp$7$1=0;
   var $37=(($36$1|0) >= ($$etemp$7$1|0)) & (((($36$1|0) >  ($$etemp$7$1|0)) | ($36$0>>>0) >= ($$etemp$7$0>>>0)));
   if ($37) { label = 9; break; } else { label = 57; break; }
  case 9: 
   var $39=$4;
   var $40=(($39+4249544)|0);
   var $ld$8$0=(($40)|0);
   var $41$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($40+4)|0);
   var $41$1=HEAP32[(($ld$9$1)>>2)];
   var $$etemp$10=((3632)|0);
   _rar_dbgmsg20($$etemp$10, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$41$0,HEAP32[(((tempInt)+(8))>>2)]=$41$1,tempInt));
   var $42=$4;
   var $43=(($42+4227084)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44 & 4194303;
   HEAP32[(($43)>>2)]=$45;
   var $46=$4;
   var $47=(($46+4227076)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$4;
   var $50=(($49+4227096)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=((($51)-(30))|0);
   var $53=(($48)|(0)) > (($52)|(0));
   if ($53) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $55=$2;
   var $56=$4;
   var $57=_unp_read_buf($55, $56);
   var $58=(($57)|(0))!=0;
   if ($58) { label = 12; break; } else { label = 11; break; }
  case 11: 
   label = 57; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $62=$4;
   var $63=(($62+4227088)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$4;
   var $66=(($65+4227084)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($64)-($67))|0);
   var $69=$68 & 4194303;
   var $70=(($69)>>>(0)) < 270;
   if ($70) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $72=$4;
   var $73=(($72+4227088)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$4;
   var $76=(($75+4227084)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($74)|(0))!=(($77)|(0));
   if ($78) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $80=$4;
   _unp_write_buf_old($80);
   label = 16; break;
  case 16: 
   var $82=$4;
   var $83=(($82+4249608)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 17; break; } else { label = 24; break; }
  case 17: 
   var $87=$4;
   var $88=$4;
   var $89=(($88+4249600)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$4;
   var $92=(($91+4250644)|0);
   var $93=(($92+((($90)*(1160))&-1))|0);
   var $94=$93;
   var $95=_decode_number($87, $94);
   $audio_number=$95;
   var $96=$audio_number;
   var $97=(($96)|(0))==256;
   if ($97) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $99=$2;
   var $100=$4;
   var $101=_read_tables20($99, $100);
   var $102=(($101)|(0))!=0;
   if ($102) { label = 20; break; } else { label = 19; break; }
  case 19: 
   $retval=0;
   label = 57; break;
  case 20: 
   label = 8; break;
  case 21: 
   var $106=$4;
   var $107=$audio_number;
   var $108=_decode_audio($106, $107);
   var $109=$4;
   var $110=(($109+4227084)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=((($111)+(1))|0);
   HEAP32[(($110)>>2)]=$112;
   var $113=$4;
   var $114=(($113+32772)|0);
   var $115=(($114+$111)|0);
   HEAP8[($115)]=$108;
   var $116=$4;
   var $117=(($116+4249600)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=((($118)+(1))|0);
   HEAP32[(($117)>>2)]=$119;
   var $120=$4;
   var $121=(($120+4249612)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($119)|(0))==(($122)|(0));
   if ($123) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $125=$4;
   var $126=(($125+4249600)|0);
   HEAP32[(($126)>>2)]=0;
   label = 23; break;
  case 23: 
   var $128=$4;
   var $129=(($128+4249544)|0);
   var $ld$11$0=(($129)|0);
   var $130$0=HEAP32[(($ld$11$0)>>2)];
   var $ld$12$1=(($129+4)|0);
   var $130$1=HEAP32[(($ld$12$1)>>2)];
   var $$etemp$13$0=-1;
   var $$etemp$13$1=-1;
   var $131$0 = _i64Add($130$0,$130$1,$$etemp$13$0,$$etemp$13$1); var $131$1 = tempRet0;
   var $st$14$0=(($129)|0);
   HEAP32[(($st$14$0)>>2)]=$131$0;
   var $st$15$1=(($129+4)|0);
   HEAP32[(($st$15$1)>>2)]=$131$1;
   label = 8; break;
  case 24: 
   var $133=$4;
   var $134=$4;
   var $135=(($134+4227520)|0);
   var $136=$135;
   var $137=_decode_number($133, $136);
   $number=$137;
   var $138=$number;
   var $139=(($138)|(0)) < 256;
   if ($139) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $141=$number;
   var $142=(($141) & 255);
   var $143=$4;
   var $144=(($143+4227084)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=((($145)+(1))|0);
   HEAP32[(($144)>>2)]=$146;
   var $147=$4;
   var $148=(($147+32772)|0);
   var $149=(($148+$145)|0);
   HEAP8[($149)]=$142;
   var $150=$4;
   var $151=(($150+4249544)|0);
   var $ld$16$0=(($151)|0);
   var $152$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($151+4)|0);
   var $152$1=HEAP32[(($ld$17$1)>>2)];
   var $$etemp$18$0=-1;
   var $$etemp$18$1=-1;
   var $153$0 = _i64Add($152$0,$152$1,$$etemp$18$0,$$etemp$18$1); var $153$1 = tempRet0;
   var $st$19$0=(($151)|0);
   HEAP32[(($st$19$0)>>2)]=$153$0;
   var $st$20$1=(($151+4)|0);
   HEAP32[(($st$20$1)>>2)]=$153$1;
   label = 8; break;
  case 26: 
   var $155=$number;
   var $156=(($155)|(0)) > 269;
   if ($156) { label = 27; break; } else { label = 36; break; }
  case 27: 
   var $158=$number;
   var $159=((($158)-(270))|0);
   $number=$159;
   var $160=(($ldecode+$159)|0);
   var $161=HEAP8[($160)];
   var $162=(($161)&(255));
   var $163=((($162)+(3))|0);
   $length=$163;
   var $164=$number;
   var $165=(($lbits+$164)|0);
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   $bits=$167;
   var $168=(($167)>>>(0)) > 0;
   if ($168) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $170=$4;
   var $171=_getbits($170);
   var $172=$bits;
   var $173=(((16)-($172))|0);
   var $174=$171 >>> (($173)>>>(0));
   var $175=$length;
   var $176=((($175)+($174))|0);
   $length=$176;
   var $177=$4;
   var $178=$bits;
   _addbits($177, $178);
   label = 29; break;
  case 29: 
   var $180=$4;
   var $181=$4;
   var $182=(($181+4228848)|0);
   var $183=$182;
   var $184=_decode_number($180, $183);
   $dist_number=$184;
   var $185=$dist_number;
   var $186=(($ddecode+($185<<2))|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=((($187)+(1))|0);
   $distance=$188;
   var $189=$dist_number;
   var $190=(($dbits+$189)|0);
   var $191=HEAP8[($190)];
   var $192=(($191)&(255));
   $bits=$192;
   var $193=(($192)>>>(0)) > 0;
   if ($193) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $195=$4;
   var $196=_getbits($195);
   var $197=$bits;
   var $198=(((16)-($197))|0);
   var $199=$196 >>> (($198)>>>(0));
   var $200=$distance;
   var $201=((($200)+($199))|0);
   $distance=$201;
   var $202=$4;
   var $203=$bits;
   _addbits($202, $203);
   label = 31; break;
  case 31: 
   var $205=$distance;
   var $206=(($205)>>>(0)) >= 8192;
   if ($206) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $208=$length;
   var $209=((($208)+(1))|0);
   $length=$209;
   var $210=$distance;
   var $211=(($210)>>>(0)) >= 262144;
   if ($211) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $213=$length;
   var $214=((($213)+(1))|0);
   $length=$214;
   label = 34; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $217=$4;
   var $218=$length;
   var $219=$distance;
   _copy_string20($217, $218, $219);
   label = 8; break;
  case 36: 
   var $221=$number;
   var $222=(($221)|(0))==269;
   if ($222) { label = 37; break; } else { label = 40; break; }
  case 37: 
   var $224=$2;
   var $225=$4;
   var $226=_read_tables20($224, $225);
   var $227=(($226)|(0))!=0;
   if ($227) { label = 39; break; } else { label = 38; break; }
  case 38: 
   $retval=0;
   label = 57; break;
  case 39: 
   label = 8; break;
  case 40: 
   var $231=$number;
   var $232=(($231)|(0))==256;
   if ($232) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $234=$4;
   var $235=$4;
   var $236=(($235+4229900)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$4;
   var $239=(($238+4229896)|0);
   var $240=HEAP32[(($239)>>2)];
   _copy_string20($234, $237, $240);
   label = 8; break;
  case 42: 
   var $242=$number;
   var $243=(($242)|(0)) < 261;
   if ($243) { label = 43; break; } else { label = 52; break; }
  case 43: 
   var $245=$4;
   var $246=(($245+4229892)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=$number;
   var $249=((($248)-(256))|0);
   var $250=((($247)-($249))|0);
   var $251=$250 & 3;
   var $252=$4;
   var $253=(($252+4229876)|0);
   var $254=(($253+($251<<2))|0);
   var $255=HEAP32[(($254)>>2)];
   $distance=$255;
   var $256=$4;
   var $257=$4;
   var $258=(($257+4229420)|0);
   var $259=$258;
   var $260=_decode_number($256, $259);
   $length_number=$260;
   var $261=$length_number;
   var $262=(($ldecode+$261)|0);
   var $263=HEAP8[($262)];
   var $264=(($263)&(255));
   var $265=((($264)+(2))|0);
   $length=$265;
   var $266=$length_number;
   var $267=(($lbits+$266)|0);
   var $268=HEAP8[($267)];
   var $269=(($268)&(255));
   $bits=$269;
   var $270=(($269)>>>(0)) > 0;
   if ($270) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $272=$4;
   var $273=_getbits($272);
   var $274=$bits;
   var $275=(((16)-($274))|0);
   var $276=$273 >>> (($275)>>>(0));
   var $277=$length;
   var $278=((($277)+($276))|0);
   $length=$278;
   var $279=$4;
   var $280=$bits;
   _addbits($279, $280);
   label = 45; break;
  case 45: 
   var $282=$distance;
   var $283=(($282)>>>(0)) >= 257;
   if ($283) { label = 46; break; } else { label = 51; break; }
  case 46: 
   var $285=$length;
   var $286=((($285)+(1))|0);
   $length=$286;
   var $287=$distance;
   var $288=(($287)>>>(0)) >= 8192;
   if ($288) { label = 47; break; } else { label = 50; break; }
  case 47: 
   var $290=$length;
   var $291=((($290)+(1))|0);
   $length=$291;
   var $292=$distance;
   var $293=(($292)>>>(0)) >= 262144;
   if ($293) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $295=$length;
   var $296=((($295)+(1))|0);
   $length=$296;
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $300=$4;
   var $301=$length;
   var $302=$distance;
   _copy_string20($300, $301, $302);
   label = 8; break;
  case 52: 
   var $304=$number;
   var $305=(($304)|(0)) < 270;
   if ($305) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $307=$number;
   var $308=((($307)-(261))|0);
   $number=$308;
   var $309=(($sddecode+$308)|0);
   var $310=HEAP8[($309)];
   var $311=(($310)&(255));
   var $312=((($311)+(1))|0);
   $distance=$312;
   var $313=$number;
   var $314=(($sdbits+$313)|0);
   var $315=HEAP8[($314)];
   var $316=(($315)&(255));
   $bits=$316;
   var $317=(($316)>>>(0)) > 0;
   if ($317) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $319=$4;
   var $320=_getbits($319);
   var $321=$bits;
   var $322=(((16)-($321))|0);
   var $323=$320 >>> (($322)>>>(0));
   var $324=$distance;
   var $325=((($324)+($323))|0);
   $distance=$325;
   var $326=$4;
   var $327=$bits;
   _addbits($326, $327);
   label = 55; break;
  case 55: 
   var $329=$4;
   var $330=$distance;
   _copy_string20($329, 2, $330);
   label = 8; break;
  case 56: 
   label = 8; break;
  case 57: 
   var $333=$retval;
   var $334=(($333)|(0))!=0;
   if ($334) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $336=$2;
   var $337=$4;
   _read_last_tables($336, $337);
   var $338=$4;
   _unp_write_buf_old($338);
   label = 59; break;
  case 59: 
   var $340=$retval;
   $1=$340;
   label = 60; break;
  case 60: 
   var $342=$1;
   STACKTOP = sp;
   return $342;
  default: assert(0, "bad label: " + label);
 }
}
function _read_tables20($fd, $unpack_data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $bit_length=sp;
   var $table=(sp)+(24);
   var $table_size;
   var $n;
   var $i;
   var $number;
   var $bit_field;
   $2=$fd;
   $3=$unpack_data;
   _rar_dbgmsg20(((3120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $4=$3;
   var $5=(($4+4227076)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$3;
   var $8=(($7+4227096)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=((($9)-(25))|0);
   var $11=(($6)|(0)) > (($10)|(0));
   if ($11) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=_unp_read_buf($13, $14);
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 52; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$3;
   var $21=_getbits($20);
   $bit_field=$21;
   var $22=$bit_field;
   var $23=$22 & 32768;
   var $24=$3;
   var $25=(($24+4249608)|0);
   HEAP32[(($25)>>2)]=$23;
   var $26=$bit_field;
   var $27=$26 & 16384;
   var $28=(($27)|(0))!=0;
   if ($28) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $30=$3;
   var $31=(($30+4249616)|0);
   var $32=$31;
   _memset($32, 0, 1028);
   label = 7; break;
  case 7: 
   var $34=$3;
   _addbits($34, 2);
   var $35=$3;
   var $36=(($35+4249608)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))!=0;
   if ($38) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $40=$bit_field;
   var $41=$40 >>> 12;
   var $42=$41 & 3;
   var $43=((($42)+(1))|0);
   var $44=$3;
   var $45=(($44+4249612)|0);
   HEAP32[(($45)>>2)]=$43;
   var $46=$3;
   var $47=(($46+4249600)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$3;
   var $50=(($49+4249612)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($48)|(0)) >= (($51)|(0));
   if ($52) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $54=$3;
   var $55=(($54+4249600)|0);
   HEAP32[(($55)>>2)]=0;
   label = 10; break;
  case 10: 
   var $57=$3;
   _addbits($57, 2);
   var $58=$3;
   var $59=(($58+4249612)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=((($60)*(257))&-1);
   $table_size=$61;
   label = 12; break;
  case 11: 
   $table_size=374;
   label = 12; break;
  case 12: 
   $i=0;
   label = 13; break;
  case 13: 
   var $65=$i;
   var $66=(($65)|(0)) < 19;
   if ($66) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $68=$3;
   var $69=_getbits($68);
   var $70=$69 >>> 12;
   var $71=(($70) & 255);
   var $72=$i;
   var $73=(($bit_length+$72)|0);
   HEAP8[($73)]=$71;
   var $74=$3;
   _addbits($74, 4);
   label = 15; break;
  case 15: 
   var $76=$i;
   var $77=((($76)+(1))|0);
   $i=$77;
   label = 13; break;
  case 16: 
   var $79=(($bit_length)|0);
   var $80=$3;
   var $81=(($80+4229664)|0);
   var $82=$81;
   _make_decode_tables($79, $82, 19);
   $i=0;
   label = 17; break;
  case 17: 
   var $84=$i;
   var $85=$table_size;
   var $86=(($84)|(0)) < (($85)|(0));
   if ($86) { label = 18; break; } else { label = 42; break; }
  case 18: 
   var $88=$3;
   var $89=(($88+4227076)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$3;
   var $92=(($91+4227096)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=((($93)-(5))|0);
   var $95=(($90)|(0)) > (($94)|(0));
   if ($95) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $97=$2;
   var $98=$3;
   var $99=_unp_read_buf($97, $98);
   var $100=(($99)|(0))!=0;
   if ($100) { label = 21; break; } else { label = 20; break; }
  case 20: 
   $1=0;
   label = 52; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $104=$3;
   var $105=$3;
   var $106=(($105+4229664)|0);
   var $107=$106;
   var $108=_decode_number($104, $107);
   $number=$108;
   var $109=$number;
   var $110=(($109)|(0)) < 16;
   if ($110) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $112=$number;
   var $113=$i;
   var $114=$3;
   var $115=(($114+4249616)|0);
   var $116=(($115+$113)|0);
   var $117=HEAP8[($116)];
   var $118=(($117)&(255));
   var $119=((($112)+($118))|0);
   var $120=$119 & 15;
   var $121=(($120) & 255);
   var $122=$i;
   var $123=(($table+$122)|0);
   HEAP8[($123)]=$121;
   var $124=$i;
   var $125=((($124)+(1))|0);
   $i=$125;
   label = 41; break;
  case 24: 
   var $127=$number;
   var $128=(($127)|(0))==16;
   if ($128) { label = 25; break; } else { label = 31; break; }
  case 25: 
   var $130=$3;
   var $131=_getbits($130);
   var $132=$131 >>> 14;
   var $133=((($132)+(3))|0);
   $n=$133;
   var $134=$3;
   _addbits($134, 2);
   label = 26; break;
  case 26: 
   var $136=$n;
   var $137=((($136)-(1))|0);
   $n=$137;
   var $138=(($136)|(0)) > 0;
   if ($138) { label = 27; break; } else { var $144 = 0;label = 28; break; }
  case 27: 
   var $140=$i;
   var $141=$table_size;
   var $142=(($140)|(0)) < (($141)|(0));
   var $144 = $142;label = 28; break;
  case 28: 
   var $144;
   if ($144) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $146=$i;
   var $147=((($146)-(1))|0);
   var $148=(($table+$147)|0);
   var $149=HEAP8[($148)];
   var $150=$i;
   var $151=(($table+$150)|0);
   HEAP8[($151)]=$149;
   var $152=$i;
   var $153=((($152)+(1))|0);
   $i=$153;
   label = 26; break;
  case 30: 
   label = 40; break;
  case 31: 
   var $156=$number;
   var $157=(($156)|(0))==17;
   if ($157) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $159=$3;
   var $160=_getbits($159);
   var $161=$160 >>> 13;
   var $162=((($161)+(3))|0);
   $n=$162;
   var $163=$3;
   _addbits($163, 3);
   label = 34; break;
  case 33: 
   var $165=$3;
   var $166=_getbits($165);
   var $167=$166 >>> 9;
   var $168=((($167)+(11))|0);
   $n=$168;
   var $169=$3;
   _addbits($169, 7);
   label = 34; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $172=$n;
   var $173=((($172)-(1))|0);
   $n=$173;
   var $174=(($172)|(0)) > 0;
   if ($174) { label = 36; break; } else { var $180 = 0;label = 37; break; }
  case 36: 
   var $176=$i;
   var $177=$table_size;
   var $178=(($176)|(0)) < (($177)|(0));
   var $180 = $178;label = 37; break;
  case 37: 
   var $180;
   if ($180) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $182=$i;
   var $183=((($182)+(1))|0);
   $i=$183;
   var $184=(($table+$182)|0);
   HEAP8[($184)]=0;
   label = 35; break;
  case 39: 
   label = 40; break;
  case 40: 
   label = 41; break;
  case 41: 
   label = 17; break;
  case 42: 
   var $189=$3;
   var $190=(($189+4227076)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=$3;
   var $193=(($192+4227096)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($191)|(0)) > (($194)|(0));
   if ($195) { label = 43; break; } else { label = 44; break; }
  case 43: 
   $1=1;
   label = 52; break;
  case 44: 
   var $198=$3;
   var $199=(($198+4249608)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200)|(0))!=0;
   if ($201) { label = 45; break; } else { label = 50; break; }
  case 45: 
   $i=0;
   label = 46; break;
  case 46: 
   var $204=$i;
   var $205=$3;
   var $206=(($205+4249612)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(($204)|(0)) < (($207)|(0));
   if ($208) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $210=$i;
   var $211=((($210)*(257))&-1);
   var $212=(($table+$211)|0);
   var $213=$i;
   var $214=$3;
   var $215=(($214+4250644)|0);
   var $216=(($215+((($213)*(1160))&-1))|0);
   var $217=$216;
   _make_decode_tables($212, $217, 257);
   label = 48; break;
  case 48: 
   var $219=$i;
   var $220=((($219)+(1))|0);
   $i=$220;
   label = 46; break;
  case 49: 
   label = 51; break;
  case 50: 
   var $223=(($table)|0);
   var $224=$3;
   var $225=(($224+4227520)|0);
   var $226=$225;
   _make_decode_tables($223, $226, 298);
   var $227=(($table+298)|0);
   var $228=$3;
   var $229=(($228+4228848)|0);
   var $230=$229;
   _make_decode_tables($227, $230, 48);
   var $231=(($table+346)|0);
   var $232=$3;
   var $233=(($232+4229420)|0);
   var $234=$233;
   _make_decode_tables($231, $234, 28);
   label = 51; break;
  case 51: 
   var $236=$3;
   var $237=(($236+4249616)|0);
   var $238=$237;
   var $239=$table;
   assert(1028 % 1 === 0);(_memcpy($238, $239, 1028)|0);
   $1=1;
   label = 52; break;
  case 52: 
   var $241=$1;
   STACKTOP = sp;
   return $241;
  default: assert(0, "bad label: " + label);
 }
}
function _copy_string20($unpack_data, $length, $distance) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $dest_ptr;
   $1=$unpack_data;
   $2=$length;
   $3=$distance;
   var $4=$3;
   var $5=$1;
   var $6=(($5+4229892)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)+(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=$7 & 3;
   var $10=$1;
   var $11=(($10+4229876)|0);
   var $12=(($11+($9<<2))|0);
   HEAP32[(($12)>>2)]=$4;
   var $13=$1;
   var $14=(($13+4229896)|0);
   HEAP32[(($14)>>2)]=$4;
   var $15=$2;
   var $16=$1;
   var $17=(($16+4229900)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$2;
   var $19$0=$18;
   var $19$1=0;
   var $20=$1;
   var $21=(($20+4249544)|0);
   var $ld$0$0=(($21)|0);
   var $22$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($21+4)|0);
   var $22$1=HEAP32[(($ld$1$1)>>2)];
   var $23$0 = _i64Subtract($22$0,$22$1,$19$0,$19$1); var $23$1 = tempRet0;
   var $st$2$0=(($21)|0);
   HEAP32[(($st$2$0)>>2)]=$23$0;
   var $st$3$1=(($21+4)|0);
   HEAP32[(($st$3$1)>>2)]=$23$1;
   var $24=$1;
   var $25=(($24+4227084)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$3;
   var $28=((($26)-($27))|0);
   $dest_ptr=$28;
   var $29=$dest_ptr;
   var $30=(($29)>>>(0)) < 4194004;
   if ($30) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $32=$1;
   var $33=(($32+4227084)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)>>>(0)) < 4194004;
   if ($35) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $37=$dest_ptr;
   var $38=((($37)+(1))|0);
   $dest_ptr=$38;
   var $39=$1;
   var $40=(($39+32772)|0);
   var $41=(($40+$37)|0);
   var $42=HEAP8[($41)];
   var $43=$1;
   var $44=(($43+4227084)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)+(1))|0);
   HEAP32[(($44)>>2)]=$46;
   var $47=$1;
   var $48=(($47+32772)|0);
   var $49=(($48+$45)|0);
   HEAP8[($49)]=$42;
   var $50=$dest_ptr;
   var $51=((($50)+(1))|0);
   $dest_ptr=$51;
   var $52=$1;
   var $53=(($52+32772)|0);
   var $54=(($53+$50)|0);
   var $55=HEAP8[($54)];
   var $56=$1;
   var $57=(($56+4227084)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=((($58)+(1))|0);
   HEAP32[(($57)>>2)]=$59;
   var $60=$1;
   var $61=(($60+32772)|0);
   var $62=(($61+$58)|0);
   HEAP8[($62)]=$55;
   label = 4; break;
  case 4: 
   var $64=$2;
   var $65=(($64)>>>(0)) > 2;
   if ($65) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $67=$2;
   var $68=((($67)-(1))|0);
   $2=$68;
   var $69=$dest_ptr;
   var $70=((($69)+(1))|0);
   $dest_ptr=$70;
   var $71=$1;
   var $72=(($71+32772)|0);
   var $73=(($72+$69)|0);
   var $74=HEAP8[($73)];
   var $75=$1;
   var $76=(($75+4227084)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=((($77)+(1))|0);
   HEAP32[(($76)>>2)]=$78;
   var $79=$1;
   var $80=(($79+32772)|0);
   var $81=(($80+$77)|0);
   HEAP8[($81)]=$74;
   label = 4; break;
  case 6: 
   label = 11; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $85=$2;
   var $86=((($85)-(1))|0);
   $2=$86;
   var $87=(($85)|(0))!=0;
   if ($87) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $89=$dest_ptr;
   var $90=((($89)+(1))|0);
   $dest_ptr=$90;
   var $91=$89 & 4194303;
   var $92=$1;
   var $93=(($92+32772)|0);
   var $94=(($93+$91)|0);
   var $95=HEAP8[($94)];
   var $96=$1;
   var $97=(($96+4227084)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$1;
   var $100=(($99+32772)|0);
   var $101=(($100+$98)|0);
   HEAP8[($101)]=$95;
   var $102=$1;
   var $103=(($102+4227084)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=((($104)+(1))|0);
   var $106=$105 & 4194303;
   var $107=$1;
   var $108=(($107+4227084)|0);
   HEAP32[(($108)>>2)]=$106;
   label = 8; break;
  case 10: 
   label = 11; break;
  case 11: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_filter_array_init($filter_a) {
 var label = 0;
 var $1;
 $1=$filter_a;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=$1;
 var $5=(($4+4)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function _decode_audio($unpack_data, $delta) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v;
   var $pch;
   var $d;
   var $i;
   var $ch;
   var $mindif;
   var $num_min_dif;
   $1=$unpack_data;
   $2=$delta;
   var $3=$1;
   var $4=(($3+4249600)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$1;
   var $7=(($6+4255284)|0);
   var $8=(($7+((($5)*(92))&-1))|0);
   $v=$8;
   var $9=$v;
   var $10=(($9+84)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)+(1))|0);
   HEAP32[(($10)>>2)]=$12;
   var $13=$v;
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$v;
   var $17=(($16+32)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$v;
   var $19=(($18+24)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$v;
   var $22=(($21+28)|0);
   HEAP32[(($22)>>2)]=$20;
   var $23=$v;
   var $24=(($23+36)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$v;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($25)-($28))|0);
   var $30=$v;
   var $31=(($30+24)|0);
   HEAP32[(($31)>>2)]=$29;
   var $32=$v;
   var $33=(($32+36)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$v;
   var $36=(($35+20)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$v;
   var $38=(($37+88)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=($39<<3);
   var $41=$v;
   var $42=(($41)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$v;
   var $45=(($44+20)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(Math.imul($43,$46)|0);
   var $48=((($40)+($47))|0);
   var $49=$v;
   var $50=(($49+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$v;
   var $53=(($52+24)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(Math.imul($51,$54)|0);
   var $56=((($48)+($55))|0);
   var $57=$v;
   var $58=(($57+8)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$v;
   var $61=(($60+28)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(Math.imul($59,$62)|0);
   var $64=((($56)+($63))|0);
   var $65=$v;
   var $66=(($65+12)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$v;
   var $69=(($68+32)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(Math.imul($67,$70)|0);
   var $72=((($64)+($71))|0);
   var $73=$v;
   var $74=(($73+16)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$1;
   var $77=(($76+4249604)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(Math.imul($75,$78)|0);
   var $80=((($72)+($79))|0);
   $pch=$80;
   var $81=$pch;
   var $82=$81 >> 3;
   var $83=$82 & 255;
   $pch=$83;
   var $84=$pch;
   var $85=$2;
   var $86=((($84)-($85))|0);
   $ch=$86;
   var $87=$2;
   var $88=(($87) & 255);
   var $89=(($88 << 24) >> 24);
   var $90=$89 << 3;
   $d=$90;
   var $91=$d;
   var $92=Math.abs($91);
   var $93=$v;
   var $94=(($93+40)|0);
   var $95=(($94)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=((($96)+($92))|0);
   HEAP32[(($95)>>2)]=$97;
   var $98=$d;
   var $99=$v;
   var $100=(($99+20)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=((($98)-($101))|0);
   var $103=Math.abs($102);
   var $104=$v;
   var $105=(($104+40)|0);
   var $106=(($105+4)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=((($107)+($103))|0);
   HEAP32[(($106)>>2)]=$108;
   var $109=$d;
   var $110=$v;
   var $111=(($110+20)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=((($109)+($112))|0);
   var $114=Math.abs($113);
   var $115=$v;
   var $116=(($115+40)|0);
   var $117=(($116+8)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=((($118)+($114))|0);
   HEAP32[(($117)>>2)]=$119;
   var $120=$d;
   var $121=$v;
   var $122=(($121+24)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=((($120)-($123))|0);
   var $125=Math.abs($124);
   var $126=$v;
   var $127=(($126+40)|0);
   var $128=(($127+12)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=((($129)+($125))|0);
   HEAP32[(($128)>>2)]=$130;
   var $131=$d;
   var $132=$v;
   var $133=(($132+24)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=((($131)+($134))|0);
   var $136=Math.abs($135);
   var $137=$v;
   var $138=(($137+40)|0);
   var $139=(($138+16)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=((($140)+($136))|0);
   HEAP32[(($139)>>2)]=$141;
   var $142=$d;
   var $143=$v;
   var $144=(($143+28)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=((($142)-($145))|0);
   var $147=Math.abs($146);
   var $148=$v;
   var $149=(($148+40)|0);
   var $150=(($149+20)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=((($151)+($147))|0);
   HEAP32[(($150)>>2)]=$152;
   var $153=$d;
   var $154=$v;
   var $155=(($154+28)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=((($153)+($156))|0);
   var $158=Math.abs($157);
   var $159=$v;
   var $160=(($159+40)|0);
   var $161=(($160+24)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=((($162)+($158))|0);
   HEAP32[(($161)>>2)]=$163;
   var $164=$d;
   var $165=$v;
   var $166=(($165+32)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=((($164)-($167))|0);
   var $169=Math.abs($168);
   var $170=$v;
   var $171=(($170+40)|0);
   var $172=(($171+28)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=((($173)+($169))|0);
   HEAP32[(($172)>>2)]=$174;
   var $175=$d;
   var $176=$v;
   var $177=(($176+32)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=((($175)+($178))|0);
   var $180=Math.abs($179);
   var $181=$v;
   var $182=(($181+40)|0);
   var $183=(($182+32)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=((($184)+($180))|0);
   HEAP32[(($183)>>2)]=$185;
   var $186=$d;
   var $187=$1;
   var $188=(($187+4249604)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=((($186)-($189))|0);
   var $191=Math.abs($190);
   var $192=$v;
   var $193=(($192+40)|0);
   var $194=(($193+36)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=((($195)+($191))|0);
   HEAP32[(($194)>>2)]=$196;
   var $197=$d;
   var $198=$1;
   var $199=(($198+4249604)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=((($197)+($200))|0);
   var $202=Math.abs($201);
   var $203=$v;
   var $204=(($203+40)|0);
   var $205=(($204+40)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=((($206)+($202))|0);
   HEAP32[(($205)>>2)]=$207;
   var $208=$ch;
   var $209=$v;
   var $210=(($209+88)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=((($208)-($211))|0);
   var $213=(($212) & 255);
   var $214=(($213 << 24) >> 24);
   var $215=$v;
   var $216=(($215+36)|0);
   HEAP32[(($216)>>2)]=$214;
   var $217=$1;
   var $218=(($217+4249604)|0);
   HEAP32[(($218)>>2)]=$214;
   var $219=$ch;
   var $220=$v;
   var $221=(($220+88)|0);
   HEAP32[(($221)>>2)]=$219;
   var $222=$v;
   var $223=(($222+84)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=$224 & 31;
   var $226=(($225)|(0))==0;
   if ($226) { label = 2; break; } else { label = 40; break; }
  case 2: 
   var $228=$v;
   var $229=(($228+40)|0);
   var $230=(($229)|0);
   var $231=HEAP32[(($230)>>2)];
   $mindif=$231;
   $num_min_dif=0;
   var $232=$v;
   var $233=(($232+40)|0);
   var $234=(($233)|0);
   HEAP32[(($234)>>2)]=0;
   $i=1;
   label = 3; break;
  case 3: 
   var $236=$i;
   var $237=(($236)|(0)) < 11;
   if ($237) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $239=$i;
   var $240=$v;
   var $241=(($240+40)|0);
   var $242=(($241+($239<<2))|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=$mindif;
   var $245=(($243)>>>(0)) < (($244)>>>(0));
   if ($245) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $247=$i;
   var $248=$v;
   var $249=(($248+40)|0);
   var $250=(($249+($247<<2))|0);
   var $251=HEAP32[(($250)>>2)];
   $mindif=$251;
   var $252=$i;
   $num_min_dif=$252;
   label = 6; break;
  case 6: 
   var $254=$i;
   var $255=$v;
   var $256=(($255+40)|0);
   var $257=(($256+($254<<2))|0);
   HEAP32[(($257)>>2)]=0;
   label = 7; break;
  case 7: 
   var $259=$i;
   var $260=((($259)+(1))|0);
   $i=$260;
   label = 3; break;
  case 8: 
   var $262=$num_min_dif;
   if ((($262)|(0))==1) {
    label = 9; break;
   }
   else if ((($262)|(0))==2) {
    label = 12; break;
   }
   else if ((($262)|(0))==3) {
    label = 15; break;
   }
   else if ((($262)|(0))==4) {
    label = 18; break;
   }
   else if ((($262)|(0))==5) {
    label = 21; break;
   }
   else if ((($262)|(0))==6) {
    label = 24; break;
   }
   else if ((($262)|(0))==7) {
    label = 27; break;
   }
   else if ((($262)|(0))==8) {
    label = 30; break;
   }
   else if ((($262)|(0))==9) {
    label = 33; break;
   }
   else if ((($262)|(0))==10) {
    label = 36; break;
   }
   else {
   label = 39; break;
   }
  case 9: 
   var $264=$v;
   var $265=(($264)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($266)|(0)) >= -16;
   if ($267) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $269=$v;
   var $270=(($269)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=((($271)-(1))|0);
   HEAP32[(($270)>>2)]=$272;
   label = 11; break;
  case 11: 
   label = 39; break;
  case 12: 
   var $275=$v;
   var $276=(($275)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=(($277)|(0)) < 16;
   if ($278) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $280=$v;
   var $281=(($280)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=((($282)+(1))|0);
   HEAP32[(($281)>>2)]=$283;
   label = 14; break;
  case 14: 
   label = 39; break;
  case 15: 
   var $286=$v;
   var $287=(($286+4)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288)|(0)) >= -16;
   if ($289) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $291=$v;
   var $292=(($291+4)|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=((($293)-(1))|0);
   HEAP32[(($292)>>2)]=$294;
   label = 17; break;
  case 17: 
   label = 39; break;
  case 18: 
   var $297=$v;
   var $298=(($297+4)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=(($299)|(0)) < 16;
   if ($300) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $302=$v;
   var $303=(($302+4)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=((($304)+(1))|0);
   HEAP32[(($303)>>2)]=$305;
   label = 20; break;
  case 20: 
   label = 39; break;
  case 21: 
   var $308=$v;
   var $309=(($308+8)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0)) >= -16;
   if ($311) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $313=$v;
   var $314=(($313+8)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=((($315)-(1))|0);
   HEAP32[(($314)>>2)]=$316;
   label = 23; break;
  case 23: 
   label = 39; break;
  case 24: 
   var $319=$v;
   var $320=(($319+8)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=(($321)|(0)) < 16;
   if ($322) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $324=$v;
   var $325=(($324+8)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=((($326)+(1))|0);
   HEAP32[(($325)>>2)]=$327;
   label = 26; break;
  case 26: 
   label = 39; break;
  case 27: 
   var $330=$v;
   var $331=(($330+12)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=(($332)|(0)) >= -16;
   if ($333) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $335=$v;
   var $336=(($335+12)|0);
   var $337=HEAP32[(($336)>>2)];
   var $338=((($337)-(1))|0);
   HEAP32[(($336)>>2)]=$338;
   label = 29; break;
  case 29: 
   label = 39; break;
  case 30: 
   var $341=$v;
   var $342=(($341+12)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=(($343)|(0)) < 16;
   if ($344) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $346=$v;
   var $347=(($346+12)|0);
   var $348=HEAP32[(($347)>>2)];
   var $349=((($348)+(1))|0);
   HEAP32[(($347)>>2)]=$349;
   label = 32; break;
  case 32: 
   label = 39; break;
  case 33: 
   var $352=$v;
   var $353=(($352+16)|0);
   var $354=HEAP32[(($353)>>2)];
   var $355=(($354)|(0)) >= -16;
   if ($355) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $357=$v;
   var $358=(($357+16)|0);
   var $359=HEAP32[(($358)>>2)];
   var $360=((($359)-(1))|0);
   HEAP32[(($358)>>2)]=$360;
   label = 35; break;
  case 35: 
   label = 39; break;
  case 36: 
   var $363=$v;
   var $364=(($363+16)|0);
   var $365=HEAP32[(($364)>>2)];
   var $366=(($365)|(0)) < 16;
   if ($366) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $368=$v;
   var $369=(($368+16)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=((($370)+(1))|0);
   HEAP32[(($369)>>2)]=$371;
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $375=$ch;
   var $376=(($375) & 255);
   return $376;
  default: assert(0, "bad label: " + label);
 }
}
function _read_last_tables($fd, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$fd;
   $2=$unpack_data;
   var $3=$2;
   var $4=(($3+4227096)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=(($6+4227076)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=((($8)+(5))|0);
   var $10=(($5)|(0)) >= (($9)|(0));
   if ($10) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $12=$2;
   var $13=(($12+4249608)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $17=$2;
   var $18=$2;
   var $19=(($18+4249600)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$2;
   var $22=(($21+4250644)|0);
   var $23=(($22+((($20)*(1160))&-1))|0);
   var $24=$23;
   var $25=_decode_number($17, $24);
   var $26=(($25)|(0))==256;
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=$1;
   var $29=$2;
   var $30=_read_tables20($28, $29);
   label = 5; break;
  case 5: 
   label = 9; break;
  case 6: 
   var $33=$2;
   var $34=$2;
   var $35=(($34+4227520)|0);
   var $36=$35;
   var $37=_decode_number($33, $36);
   var $38=(($37)|(0))==269;
   if ($38) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $40=$1;
   var $41=$2;
   var $42=_read_tables20($40, $41);
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_filter_array_reset($filter_a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   $1=$filter_a;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 10; break;
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $7=$i;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) < (($10)>>>(0));
   if ($11) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $13=$i;
   var $14=$1;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+($13<<2))|0);
   var $18=HEAP32[(($17)>>2)];
   _rar_filter_delete($18);
   label = 6; break;
  case 6: 
   var $20=$i;
   var $21=((($20)+(1))|0);
   $i=$21;
   label = 4; break;
  case 7: 
   var $23=$1;
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))!=0;
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $28=$1;
   var $29=(($28)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   _free($31);
   label = 9; break;
  case 9: 
   var $33=$1;
   var $34=(($33)|0);
   HEAP32[(($34)>>2)]=0;
   var $35=$1;
   var $36=(($35+4)|0);
   HEAP32[(($36)>>2)]=0;
   label = 10; break;
  case 10: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_filter_delete($filter) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$filter;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 8; break;
  case 3: 
   var $6=$1;
   var $7=(($6+16)|0);
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$1;
   var $13=(($12+16)|0);
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   _free($15);
   label = 5; break;
  case 5: 
   var $17=$1;
   var $18=(($17+16)|0);
   var $19=(($18+20)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $23=$1;
   var $24=(($23+16)|0);
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   _free($26);
   label = 7; break;
  case 7: 
   var $28=$1;
   var $29=(($28+16)|0);
   var $30=(($29)|0);
   _rar_cmd_array_reset($30);
   var $31=$1;
   var $32=$31;
   _free($32);
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_filter_array_add($filter_a, $num) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$filter_a;
   $3=$num;
   var $4=$3;
   var $5=$2;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)+($4))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=$2;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=$2;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=($15<<2);
   var $17=_realloc($12, $16);
   var $18=$17;
   var $19=$2;
   var $20=(($19)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$2;
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $26=$2;
   var $27=(($26+4)|0);
   HEAP32[(($27)>>2)]=0;
   $1=0;
   label = 4; break;
  case 3: 
   var $29=$2;
   var $30=(($29+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=((($31)-(1))|0);
   var $33=$2;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+($32<<2))|0);
   HEAP32[(($36)>>2)]=0;
   $1=1;
   label = 4; break;
  case 4: 
   var $38=$1;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_filter_new() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $filter;
   var $2=_malloc(84);
   var $3=$2;
   $filter=$3;
   var $4=$filter;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $8=$filter;
   var $9=(($8)|0);
   HEAP32[(($9)>>2)]=0;
   var $10=$filter;
   var $11=(($10+4)|0);
   HEAP32[(($11)>>2)]=0;
   var $12=$filter;
   var $13=(($12+8)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=$filter;
   var $15=(($14+12)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=$filter;
   var $17=(($16+16)|0);
   var $18=(($17)|0);
   _rar_cmd_array_init($18);
   var $19=$filter;
   var $20=(($19+16)|0);
   var $21=(($20+16)|0);
   HEAP32[(($21)>>2)]=0;
   var $22=$filter;
   var $23=(($22+16)|0);
   var $24=(($23+20)|0);
   HEAP32[(($24)>>2)]=0;
   var $25=$filter;
   var $26=(($25+16)|0);
   var $27=(($26+28)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=$filter;
   var $29=(($28+16)|0);
   var $30=(($29+24)|0);
   HEAP32[(($30)>>2)]=0;
   var $31=$filter;
   var $32=(($31+16)|0);
   var $33=(($32+60)|0);
   HEAP32[(($33)>>2)]=0;
   var $34=$filter;
   var $35=(($34+16)|0);
   var $36=(($35+64)|0);
   HEAP32[(($36)>>2)]=0;
   var $37=$filter;
   $1=$37;
   label = 4; break;
  case 4: 
   var $39=$1;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_set_value($byte_mode, $addr, $value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$byte_mode;
   $2=$addr;
   $3=$value;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$3;
   var $8=(($7) & 255);
   var $9=$2;
   var $10=$9;
   HEAP8[($10)]=$8;
   label = 4; break;
  case 3: 
   var $12=$3;
   var $13=$2;
   HEAP32[(($13)>>2)]=$12;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_crc($start_crc, $addr, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $data;
   var $i;
   $1=$start_crc;
   $2=$addr;
   $3=$size;
   var $4=$2;
   $data=$4;
   label = 2; break;
  case 2: 
   var $6=$3;
   var $7=(($6)>>>(0)) > 0;
   if ($7) { label = 3; break; } else { var $14 = 0;label = 4; break; }
  case 3: 
   var $9=$data;
   var $10=$9;
   var $11=$10 & 7;
   var $12=(($11)|(0))!=0;
   var $14 = $12;label = 4; break;
  case 4: 
   var $14;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $16=$1;
   var $17=$data;
   var $18=(($17)|0);
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   var $21=$16 ^ $20;
   var $22=(($21) & 255);
   var $23=(($22)&(255));
   var $24=((4712+($23<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$1;
   var $27=$26 >>> 8;
   var $28=$25 ^ $27;
   $1=$28;
   var $29=$3;
   var $30=((($29)-(1))|0);
   $3=$30;
   var $31=$data;
   var $32=(($31+1)|0);
   $data=$32;
   label = 2; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $35=$3;
   var $36=(($35)>>>(0)) >= 8;
   if ($36) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $38=$data;
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$1;
   var $42=$41 ^ $40;
   $1=$42;
   var $43=$1;
   var $44=(($43) & 255);
   var $45=(($44)&(255));
   var $46=((4712+($45<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$1;
   var $49=$48 >>> 8;
   var $50=$47 ^ $49;
   $1=$50;
   var $51=$1;
   var $52=(($51) & 255);
   var $53=(($52)&(255));
   var $54=((4712+($53<<2))|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$1;
   var $57=$56 >>> 8;
   var $58=$55 ^ $57;
   $1=$58;
   var $59=$1;
   var $60=(($59) & 255);
   var $61=(($60)&(255));
   var $62=((4712+($61<<2))|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$1;
   var $65=$64 >>> 8;
   var $66=$63 ^ $65;
   $1=$66;
   var $67=$1;
   var $68=(($67) & 255);
   var $69=(($68)&(255));
   var $70=((4712+($69<<2))|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$1;
   var $73=$72 >>> 8;
   var $74=$71 ^ $73;
   $1=$74;
   var $75=$data;
   var $76=(($75+4)|0);
   var $77=$76;
   var $78=HEAP32[(($77)>>2)];
   var $79=$1;
   var $80=$79 ^ $78;
   $1=$80;
   var $81=$1;
   var $82=(($81) & 255);
   var $83=(($82)&(255));
   var $84=((4712+($83<<2))|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$1;
   var $87=$86 >>> 8;
   var $88=$85 ^ $87;
   $1=$88;
   var $89=$1;
   var $90=(($89) & 255);
   var $91=(($90)&(255));
   var $92=((4712+($91<<2))|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$1;
   var $95=$94 >>> 8;
   var $96=$93 ^ $95;
   $1=$96;
   var $97=$1;
   var $98=(($97) & 255);
   var $99=(($98)&(255));
   var $100=((4712+($99<<2))|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$1;
   var $103=$102 >>> 8;
   var $104=$101 ^ $103;
   $1=$104;
   var $105=$1;
   var $106=(($105) & 255);
   var $107=(($106)&(255));
   var $108=((4712+($107<<2))|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$1;
   var $111=$110 >>> 8;
   var $112=$109 ^ $111;
   $1=$112;
   var $113=$data;
   var $114=(($113+8)|0);
   $data=$114;
   var $115=$3;
   var $116=((($115)-(8))|0);
   $3=$116;
   label = 7; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $119=$i;
   var $120=$3;
   var $121=(($119)>>>(0)) < (($120)>>>(0));
   if ($121) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $123=$1;
   var $124=$i;
   var $125=$data;
   var $126=(($125+$124)|0);
   var $127=HEAP8[($126)];
   var $128=(($127)&(255));
   var $129=$123 ^ $128;
   var $130=(($129) & 255);
   var $131=(($130)&(255));
   var $132=((4712+($131<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$1;
   var $135=$134 >>> 8;
   var $136=$133 ^ $135;
   $1=$136;
   label = 12; break;
  case 12: 
   var $138=$i;
   var $139=((($138)+(1))|0);
   $i=$139;
   label = 10; break;
  case 13: 
   var $141=$1;
   return $141;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_addbits($rarvm_input, $bits) {
 var label = 0;
 var $1;
 var $2;
 $1=$rarvm_input;
 $2=$bits;
 var $3=$1;
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=((($6)+($5))|0);
 $2=$7;
 var $8=$2;
 var $9=$8 >> 3;
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)+($9))|0);
 HEAP32[(($11)>>2)]=$13;
 var $14=$2;
 var $15=$14 & 7;
 var $16=$1;
 var $17=(($16+12)|0);
 HEAP32[(($17)>>2)]=$15;
 return;
}
function _rarvm_getbits($rarvm_input) {
 var label = 0;
 var $1;
 var $bit_field;
 $1=$rarvm_input;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+$4)|0);
 var $9=HEAP8[($8)];
 var $10=(($9)&(255));
 var $11=$10 << 16;
 $bit_field=$11;
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=((($14)+(1))|0);
 var $16=$1;
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+$15)|0);
 var $20=HEAP8[($19)];
 var $21=(($20)&(255));
 var $22=$21 << 8;
 var $23=$bit_field;
 var $24=$23 | $22;
 $bit_field=$24;
 var $25=$1;
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=((($27)+(2))|0);
 var $29=$1;
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+$28)|0);
 var $33=HEAP8[($32)];
 var $34=(($33)&(255));
 var $35=$bit_field;
 var $36=$35 | $34;
 $bit_field=$36;
 var $37=$1;
 var $38=(($37+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(((8)-($39))|0);
 var $41=$bit_field;
 var $42=$41 >>> (($40)>>>(0));
 $bit_field=$42;
 var $43=$bit_field;
 var $44=$43 & 65535;
 return $44;
}
function _rarvm_init($rarvm_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$rarvm_data;
   var $3=_malloc(262148);
   var $4=$2;
   var $5=(($4)|0);
   HEAP32[(($5)>>2)]=$3;
   _rar_crc_init();
   var $6=$2;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   $1=1;
   label = 4; break;
  case 4: 
   var $13=$1;
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_free($rarvm_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$rarvm_data;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$1;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   _free($12);
   var $13=$1;
   var $14=(($13)|0);
   HEAP32[(($14)>>2)]=0;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_read_data($rarvm_input) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $data;
   $2=$rarvm_input;
   var $3=$2;
   var $4=_rarvm_getbits($3);
   $data=$4;
   var $5=$data;
   _rar_dbgmsg37();
   var $6=$data;
   var $7=$6 & 49152;
   if ((($7)|(0))==0) {
    label = 2; break;
   }
   else if ((($7)|(0))==16384) {
    label = 3; break;
   }
   else if ((($7)|(0))==32768) {
    label = 7; break;
   }
   else {
   label = 8; break;
   }
  case 2: 
   var $9=$2;
   _rarvm_addbits($9, 6);
   var $10=$data;
   var $11=$10 >>> 10;
   var $12=$11 & 15;
   _rar_dbgmsg37();
   var $13=$data;
   var $14=$13 >>> 10;
   var $15=$14 & 15;
   $1=$15;
   label = 9; break;
  case 3: 
   var $17=$data;
   var $18=$17 & 15360;
   var $19=(($18)|(0))==0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$data;
   var $22=$21 >>> 2;
   var $23=$22 & 255;
   var $24=-256 | $23;
   $data=$24;
   var $25=$2;
   _rarvm_addbits($25, 14);
   label = 6; break;
  case 5: 
   var $27=$data;
   var $28=$27 >>> 6;
   var $29=$28 & 255;
   $data=$29;
   var $30=$2;
   _rarvm_addbits($30, 10);
   label = 6; break;
  case 6: 
   var $32=$data;
   _rar_dbgmsg37();
   var $33=$data;
   $1=$33;
   label = 9; break;
  case 7: 
   var $35=$2;
   _rarvm_addbits($35, 2);
   var $36=$2;
   var $37=_rarvm_getbits($36);
   $data=$37;
   var $38=$2;
   _rarvm_addbits($38, 16);
   var $39=$data;
   _rar_dbgmsg37();
   var $40=$data;
   $1=$40;
   label = 9; break;
  case 8: 
   var $42=$2;
   _rarvm_addbits($42, 2);
   var $43=$2;
   var $44=_rarvm_getbits($43);
   var $45=$44 << 16;
   $data=$45;
   var $46=$2;
   _rarvm_addbits($46, 16);
   var $47=$2;
   var $48=_rarvm_getbits($47);
   var $49=$data;
   var $50=$49 | $48;
   $data=$50;
   var $51=$2;
   _rarvm_addbits($51, 16);
   var $52=$data;
   _rar_dbgmsg37();
   var $53=$data;
   $1=$53;
   label = 9; break;
  case 9: 
   var $55=$1;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_set_memory($rarvm_data, $pos, $data, $data_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$rarvm_data;
   $2=$pos;
   $3=$data;
   $4=$data_size;
   var $5=$2;
   var $6=(($5)>>>(0)) < 262144;
   if ($6) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $8=$3;
   var $9=$1;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$2;
   var $13=(($11+$12)|0);
   var $14=(($8)|(0))!=(($13)|(0));
   if ($14) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $16=$1;
   var $17=(($16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$2;
   var $20=(($18+$19)|0);
   var $21=$3;
   var $22=$4;
   var $23=$2;
   var $24=(((262144)-($23))|0);
   var $25=(($22)>>>(0)) < (($24)>>>(0));
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$4;
   var $32 = $27;label = 6; break;
  case 5: 
   var $29=$2;
   var $30=(((262144)-($29))|0);
   var $32 = $30;label = 6; break;
  case 6: 
   var $32;
   _memmove($20, $21, $32, 1, 0);
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_execute($rarvm_data, $prg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $global_size;
   var $static_size;
   var $new_pos;
   var $new_size;
   var $data_size;
   var $prepared_code;
   $2=$rarvm_data;
   $3=$prg;
   _rar_dbgmsg37();
   var $4=$2;
   var $5=(($4+4)|0);
   var $6=$5;
   var $7=$3;
   var $8=(($7+32)|0);
   var $9=$8;
   assert(28 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];HEAP32[((($6)+(12))>>2)]=HEAP32[((($9)+(12))>>2)];HEAP32[((($6)+(16))>>2)]=HEAP32[((($9)+(16))>>2)];HEAP32[((($6)+(20))>>2)]=HEAP32[((($9)+(20))>>2)];HEAP32[((($6)+(24))>>2)]=HEAP32[((($9)+(24))>>2)];
   var $10=$3;
   var $11=(($10+24)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0)) < 8192;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$3;
   var $16=(($15+24)|0);
   var $17=HEAP32[(($16)>>2)];
   var $20 = $17;label = 4; break;
  case 3: 
   var $20 = 8192;label = 4; break;
  case 4: 
   var $20;
   $global_size=$20;
   var $21=$global_size;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=$2;
   var $25=(($24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+245760)|0);
   var $28=$3;
   var $29=(($28+16)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|0);
   var $32=$global_size;
   assert($32 % 1 === 0);(_memcpy($27, $31, $32)|0);
   label = 6; break;
  case 6: 
   var $34=$3;
   var $35=(($34+28)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$global_size;
   var $38=(((8192)-($37))|0);
   var $39=(($36)>>>(0)) < (($38)>>>(0));
   if ($39) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $41=$3;
   var $42=(($41+28)|0);
   var $43=HEAP32[(($42)>>2)];
   var $48 = $43;label = 9; break;
  case 8: 
   var $45=$global_size;
   var $46=(((8192)-($45))|0);
   var $48 = $46;label = 9; break;
  case 9: 
   var $48;
   $static_size=$48;
   var $49=$static_size;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $52=$2;
   var $53=(($52)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+245760)|0);
   var $56=$global_size;
   var $57=(($55+$56)|0);
   var $58=$3;
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|0);
   var $62=$static_size;
   assert($62 % 1 === 0);(_memcpy($57, $61, $62)|0);
   label = 11; break;
  case 11: 
   var $64=$2;
   var $65=(($64+4)|0);
   var $66=(($65+28)|0);
   HEAP32[(($66)>>2)]=262144;
   var $67=$2;
   var $68=(($67+36)|0);
   HEAP32[(($68)>>2)]=0;
   var $69=$3;
   var $70=(($69+8)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71)|(0))!=0;
   if ($72) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $74=$3;
   var $75=(($74+8)|0);
   var $76=HEAP32[(($75)>>2)];
   var $84 = $76;label = 14; break;
  case 13: 
   var $78=$3;
   var $79=(($78)|0);
   var $80=(($79)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|0);
   var $84 = $82;label = 14; break;
  case 14: 
   var $84;
   $prepared_code=$84;
   var $85=$prepared_code;
   var $86=(($85)|(0))!=0;
   if ($86) { label = 16; break; } else { label = 15; break; }
  case 15: 
   $1=0;
   label = 30; break;
  case 16: 
   var $89=$2;
   var $90=$prepared_code;
   var $91=$3;
   var $92=(($91+12)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=_rarvm_execute_code($89, $90, $93);
   var $95=(($94)|(0))!=0;
   if ($95) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $97=$prepared_code;
   var $98=(($97)|0);
   var $99=(($98)|0);
   HEAP32[(($99)>>2)]=22;
   label = 18; break;
  case 18: 
   var $101=$2;
   var $102=(($101)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+245792)|0);
   var $105=$104;
   var $106=HEAP32[(($105)>>2)];
   var $107=$106 & 262143;
   $new_pos=$107;
   var $108=$2;
   var $109=(($108)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+245788)|0);
   var $112=$111;
   var $113=HEAP32[(($112)>>2)];
   var $114=$113 & 262143;
   $new_size=$114;
   var $115=$new_pos;
   var $116=$new_size;
   var $117=((($115)+($116))|0);
   var $118=(($117)>>>(0)) >= 262144;
   if ($118) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $new_size=0;
   $new_pos=0;
   label = 20; break;
  case 20: 
   var $121=$2;
   var $122=(($121)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=$new_pos;
   var $125=(($123+$124)|0);
   var $126=$3;
   var $127=(($126+60)|0);
   HEAP32[(($127)>>2)]=$125;
   var $128=$new_size;
   var $129=$3;
   var $130=(($129+64)|0);
   HEAP32[(($130)>>2)]=$128;
   var $131=$3;
   var $132=(($131+16)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133)|(0))!=0;
   if ($134) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $136=$3;
   var $137=(($136+16)|0);
   var $138=HEAP32[(($137)>>2)];
   _free($138);
   var $139=$3;
   var $140=(($139+16)|0);
   HEAP32[(($140)>>2)]=0;
   var $141=$3;
   var $142=(($141+24)|0);
   HEAP32[(($142)>>2)]=0;
   label = 22; break;
  case 22: 
   var $144=$2;
   var $145=(($144)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($146+245808)|0);
   var $148=$147;
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149)>>>(0)) < 8192;
   if ($150) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $152=$2;
   var $153=(($152)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+245808)|0);
   var $156=$155;
   var $157=HEAP32[(($156)>>2)];
   var $160 = $157;label = 25; break;
  case 24: 
   var $160 = 8192;label = 25; break;
  case 25: 
   var $160;
   $data_size=$160;
   var $161=$data_size;
   var $162=(($161)|(0))!=0;
   if ($162) { label = 26; break; } else { label = 29; break; }
  case 26: 
   var $164=$data_size;
   var $165=((($164)+(64))|0);
   var $166=$3;
   var $167=(($166+24)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=((($168)+($165))|0);
   HEAP32[(($167)>>2)]=$169;
   var $170=$3;
   var $171=(($170+16)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=$3;
   var $174=(($173+24)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=_realloc($172, $175);
   var $177=$3;
   var $178=(($177+16)|0);
   HEAP32[(($178)>>2)]=$176;
   var $179=$3;
   var $180=(($179+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($181)|(0))!=0;
   if ($182) { label = 28; break; } else { label = 27; break; }
  case 27: 
   $1=0;
   label = 30; break;
  case 28: 
   var $185=$3;
   var $186=(($185+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$2;
   var $189=(($188)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=(($190+245760)|0);
   var $192=$data_size;
   var $193=((($192)+(64))|0);
   assert($193 % 1 === 0);(_memcpy($187, $191, $193)|0);
   label = 29; break;
  case 29: 
   $1=1;
   label = 30; break;
  case 30: 
   var $196=$1;
   return $196;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_execute_code($rarvm_data, $prepared_code, $code_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $max_ops;
   var $i;
   var $SP;
   var $cmd;
   var $value1;
   var $value2;
   var $result;
   var $divider;
   var $FC;
   var $op1;
   var $op2;
   var $reg_count;
   $2=$rarvm_data;
   $3=$prepared_code;
   $4=$code_size;
   $max_ops=25000000;
   $reg_count=8;
   _rar_dbgmsg37();
   var $5=$3;
   $cmd=$5;
   label = 2; break;
  case 2: 
   var $7=$cmd;
   var $8=$3;
   var $9=$4;
   var $10=(($8+((($9)*(40))&-1))|0);
   var $11=(($7)>>>(0)) > (($10)>>>(0));
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=0;
   label = 365; break;
  case 4: 
   var $14=$cmd;
   var $15=$3;
   var $16=(($14)>>>(0)) < (($15)>>>(0));
   if ($16) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=0;
   label = 365; break;
  case 6: 
   var $19=$2;
   var $20=$cmd;
   var $21=(($20+8)|0);
   var $22=_rarvm_get_operand($19, $21);
   $op1=$22;
   var $23=$2;
   var $24=$cmd;
   var $25=(($24+24)|0);
   var $26=_rarvm_get_operand($23, $25);
   $op2=$26;
   var $27=$max_ops;
   var $28=(((25000000)-($27))|0);
   var $29=$cmd;
   var $30=(($29)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$op1;
   var $33=$op2;
   _rar_dbgmsg37();
   var $34=$cmd;
   var $35=(($34)|0);
   var $36=HEAP32[(($35)>>2)];
   if ((($36)|(0))==0) {
    label = 7; break;
   }
   else if ((($36)|(0))==40) {
    label = 17; break;
   }
   else if ((($36)|(0))==41) {
    label = 18; break;
   }
   else if ((($36)|(0))==1) {
    label = 19; break;
   }
   else if ((($36)|(0))==42) {
    label = 29; break;
   }
   else if ((($36)|(0))==43) {
    label = 33; break;
   }
   else if ((($36)|(0))==2) {
    label = 37; break;
   }
   else if ((($36)|(0))==44) {
    label = 50; break;
   }
   else if ((($36)|(0))==45) {
    label = 51; break;
   }
   else if ((($36)|(0))==3) {
    label = 52; break;
   }
   else if ((($36)|(0))==46) {
    label = 65; break;
   }
   else if ((($36)|(0))==47) {
    label = 66; break;
   }
   else if ((($36)|(0))==4) {
    label = 67; break;
   }
   else if ((($36)|(0))==5) {
    label = 74; break;
   }
   else if ((($36)|(0))==6) {
    label = 81; break;
   }
   else if ((($36)|(0))==48) {
    label = 91; break;
   }
   else if ((($36)|(0))==49) {
    label = 92; break;
   }
   else if ((($36)|(0))==7) {
    label = 93; break;
   }
   else if ((($36)|(0))==50) {
    label = 103; break;
   }
   else if ((($36)|(0))==51) {
    label = 104; break;
   }
   else if ((($36)|(0))==8) {
    label = 105; break;
   }
   else if ((($36)|(0))==9) {
    label = 110; break;
   }
   else if ((($36)|(0))==10) {
    label = 123; break;
   }
   else if ((($36)|(0))==11) {
    label = 136; break;
   }
   else if ((($36)|(0))==12) {
    label = 149; break;
   }
   else if ((($36)|(0))==13) {
    label = 159; break;
   }
   else if ((($36)|(0))==14) {
    label = 166; break;
   }
   else if ((($36)|(0))==15) {
    label = 173; break;
   }
   else if ((($36)|(0))==16) {
    label = 180; break;
   }
   else if ((($36)|(0))==17) {
    label = 187; break;
   }
   else if ((($36)|(0))==18) {
    label = 194; break;
   }
   else if ((($36)|(0))==19) {
    label = 201; break;
   }
   else if ((($36)|(0))==20) {
    label = 202; break;
   }
   else if ((($36)|(0))==21) {
    label = 203; break;
   }
   else if ((($36)|(0))==23) {
    label = 208; break;
   }
   else if ((($36)|(0))==24) {
    label = 218; break;
   }
   else if ((($36)|(0))==25) {
    label = 231; break;
   }
   else if ((($36)|(0))==26) {
    label = 244; break;
   }
   else if ((($36)|(0))==27) {
    label = 257; break;
   }
   else if ((($36)|(0))==52) {
    label = 267; break;
   }
   else if ((($36)|(0))==53) {
    label = 268; break;
   }
   else if ((($36)|(0))==28) {
    label = 269; break;
   }
   else if ((($36)|(0))==29) {
    label = 274; break;
   }
   else if ((($36)|(0))==30) {
    label = 279; break;
   }
   else if ((($36)|(0))==31) {
    label = 280; break;
   }
   else if ((($36)|(0))==32) {
    label = 281; break;
   }
   else if ((($36)|(0))==33) {
    label = 282; break;
   }
   else if ((($36)|(0))==34) {
    label = 283; break;
   }
   else if ((($36)|(0))==35) {
    label = 299; break;
   }
   else if ((($36)|(0))==36) {
    label = 309; break;
   }
   else if ((($36)|(0))==37) {
    label = 321; break;
   }
   else if ((($36)|(0))==38) {
    label = 338; break;
   }
   else if ((($36)|(0))==22) {
    label = 355; break;
   }
   else if ((($36)|(0))==54) {
    label = 362; break;
   }
   else if ((($36)|(0))==39) {
    label = 363; break;
   }
   else {
   label = 364; break;
   }
  case 7: 
   var $38=$cmd;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0))!=0;
   if ($41) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $43=$cmd;
   var $44=(($43+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))!=0;
   if ($46) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $48=$op2;
   var $49=$48;
   var $50=HEAP8[($49)];
   var $51=(($50)&(255));
   var $56 = $51;label = 11; break;
  case 10: 
   var $53=$op2;
   var $54=HEAP32[(($53)>>2)];
   var $56 = $54;label = 11; break;
  case 11: 
   var $56;
   var $57=(($56) & 255);
   var $58=$op1;
   var $59=$58;
   HEAP8[($59)]=$57;
   var $60=(($57)&(255));
   var $78 = $60;label = 16; break;
  case 12: 
   var $62=$cmd;
   var $63=(($62+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $67=$op2;
   var $68=$67;
   var $69=HEAP8[($68)];
   var $70=(($69)&(255));
   var $75 = $70;label = 15; break;
  case 14: 
   var $72=$op2;
   var $73=HEAP32[(($72)>>2)];
   var $75 = $73;label = 15; break;
  case 15: 
   var $75;
   var $76=$op1;
   HEAP32[(($76)>>2)]=$75;
   var $78 = $75;label = 16; break;
  case 16: 
   var $78;
   label = 364; break;
  case 17: 
   var $80=$op2;
   var $81=$80;
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   var $84=(($83) & 255);
   var $85=$op1;
   var $86=$85;
   HEAP8[($86)]=$84;
   var $87=(($84)&(255));
   label = 364; break;
  case 18: 
   var $89=$op2;
   var $90=HEAP32[(($89)>>2)];
   var $91=$op1;
   HEAP32[(($91)>>2)]=$90;
   label = 364; break;
  case 19: 
   var $93=$cmd;
   var $94=(($93+4)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))!=0;
   if ($96) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $98=$op1;
   var $99=$98;
   var $100=HEAP8[($99)];
   var $101=(($100)&(255));
   var $106 = $101;label = 22; break;
  case 21: 
   var $103=$op1;
   var $104=HEAP32[(($103)>>2)];
   var $106 = $104;label = 22; break;
  case 22: 
   var $106;
   $value1=$106;
   var $107=$value1;
   var $108=$cmd;
   var $109=(($108+4)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110)|(0))!=0;
   if ($111) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $113=$op2;
   var $114=$113;
   var $115=HEAP8[($114)];
   var $116=(($115)&(255));
   var $121 = $116;label = 25; break;
  case 24: 
   var $118=$op2;
   var $119=HEAP32[(($118)>>2)];
   var $121 = $119;label = 25; break;
  case 25: 
   var $121;
   var $122=((($107)-($121))|0);
   $result=$122;
   var $123=$result;
   var $124=(($123)|(0))==0;
   if ($124) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $135 = 2;label = 28; break;
  case 27: 
   var $127=$result;
   var $128=$value1;
   var $129=(($127)>>>(0)) > (($128)>>>(0));
   var $130=(($129)&(1));
   var $131=$result;
   var $132=$131 & -2147483648;
   var $133=$130 | $132;
   var $135 = $133;label = 28; break;
  case 28: 
   var $135;
   var $136=$2;
   var $137=(($136+36)|0);
   HEAP32[(($137)>>2)]=$135;
   label = 364; break;
  case 29: 
   var $139=$op1;
   var $140=$139;
   var $141=HEAP8[($140)];
   var $142=(($141)&(255));
   $value1=$142;
   var $143=$value1;
   var $144=$op2;
   var $145=$144;
   var $146=HEAP8[($145)];
   var $147=(($146)&(255));
   var $148=((($143)-($147))|0);
   $result=$148;
   var $149=$result;
   var $150=(($149)|(0))==0;
   if ($150) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $161 = 2;label = 32; break;
  case 31: 
   var $153=$result;
   var $154=$value1;
   var $155=(($153)>>>(0)) > (($154)>>>(0));
   var $156=(($155)&(1));
   var $157=$result;
   var $158=$157 & -2147483648;
   var $159=$156 | $158;
   var $161 = $159;label = 32; break;
  case 32: 
   var $161;
   var $162=$2;
   var $163=(($162+36)|0);
   HEAP32[(($163)>>2)]=$161;
   label = 364; break;
  case 33: 
   var $165=$op1;
   var $166=HEAP32[(($165)>>2)];
   $value1=$166;
   var $167=$value1;
   var $168=$op2;
   var $169=HEAP32[(($168)>>2)];
   var $170=((($167)-($169))|0);
   $result=$170;
   var $171=$result;
   var $172=(($171)|(0))==0;
   if ($172) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $183 = 2;label = 36; break;
  case 35: 
   var $175=$result;
   var $176=$value1;
   var $177=(($175)>>>(0)) > (($176)>>>(0));
   var $178=(($177)&(1));
   var $179=$result;
   var $180=$179 & -2147483648;
   var $181=$178 | $180;
   var $183 = $181;label = 36; break;
  case 36: 
   var $183;
   var $184=$2;
   var $185=(($184+36)|0);
   HEAP32[(($185)>>2)]=$183;
   label = 364; break;
  case 37: 
   var $187=$cmd;
   var $188=(($187+4)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189)|(0))!=0;
   if ($190) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $192=$op1;
   var $193=$192;
   var $194=HEAP8[($193)];
   var $195=(($194)&(255));
   var $200 = $195;label = 40; break;
  case 39: 
   var $197=$op1;
   var $198=HEAP32[(($197)>>2)];
   var $200 = $198;label = 40; break;
  case 40: 
   var $200;
   $value1=$200;
   var $201=$value1;
   var $202=$cmd;
   var $203=(($202+4)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204)|(0))!=0;
   if ($205) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $207=$op2;
   var $208=$207;
   var $209=HEAP8[($208)];
   var $210=(($209)&(255));
   var $215 = $210;label = 43; break;
  case 42: 
   var $212=$op2;
   var $213=HEAP32[(($212)>>2)];
   var $215 = $213;label = 43; break;
  case 43: 
   var $215;
   var $216=((($201)+($215))|0);
   $result=$216;
   var $217=$result;
   var $218=(($217)|(0))==0;
   if ($218) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $229 = 2;label = 46; break;
  case 45: 
   var $221=$result;
   var $222=$value1;
   var $223=(($221)>>>(0)) < (($222)>>>(0));
   var $224=(($223)&(1));
   var $225=$result;
   var $226=$225 & -2147483648;
   var $227=$224 | $226;
   var $229 = $227;label = 46; break;
  case 46: 
   var $229;
   var $230=$2;
   var $231=(($230+36)|0);
   HEAP32[(($231)>>2)]=$229;
   var $232=$cmd;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $235=(($234)|(0))!=0;
   if ($235) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $237=$result;
   var $238=(($237) & 255);
   var $239=$op1;
   var $240=$239;
   HEAP8[($240)]=$238;
   var $241=(($238)&(255));
   var $246 = $241;label = 49; break;
  case 48: 
   var $243=$result;
   var $244=$op1;
   HEAP32[(($244)>>2)]=$243;
   var $246 = $243;label = 49; break;
  case 49: 
   var $246;
   label = 364; break;
  case 50: 
   var $248=$op1;
   var $249=$248;
   var $250=HEAP8[($249)];
   var $251=(($250)&(255));
   var $252=$op2;
   var $253=$252;
   var $254=HEAP8[($253)];
   var $255=(($254)&(255));
   var $256=((($251)+($255))|0);
   var $257=(($256) & 255);
   var $258=$op1;
   var $259=$258;
   HEAP8[($259)]=$257;
   var $260=(($257)&(255));
   label = 364; break;
  case 51: 
   var $262=$op1;
   var $263=HEAP32[(($262)>>2)];
   var $264=$op2;
   var $265=HEAP32[(($264)>>2)];
   var $266=((($263)+($265))|0);
   var $267=$op1;
   HEAP32[(($267)>>2)]=$266;
   label = 364; break;
  case 52: 
   var $269=$cmd;
   var $270=(($269+4)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))!=0;
   if ($272) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $274=$op1;
   var $275=$274;
   var $276=HEAP8[($275)];
   var $277=(($276)&(255));
   var $282 = $277;label = 55; break;
  case 54: 
   var $279=$op1;
   var $280=HEAP32[(($279)>>2)];
   var $282 = $280;label = 55; break;
  case 55: 
   var $282;
   $value1=$282;
   var $283=$value1;
   var $284=$cmd;
   var $285=(($284+4)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0))!=0;
   if ($287) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $289=$op2;
   var $290=$289;
   var $291=HEAP8[($290)];
   var $292=(($291)&(255));
   var $297 = $292;label = 58; break;
  case 57: 
   var $294=$op2;
   var $295=HEAP32[(($294)>>2)];
   var $297 = $295;label = 58; break;
  case 58: 
   var $297;
   var $298=((($283)-($297))|0);
   $result=$298;
   var $299=$result;
   var $300=(($299)|(0))==0;
   if ($300) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $311 = 2;label = 61; break;
  case 60: 
   var $303=$result;
   var $304=$value1;
   var $305=(($303)>>>(0)) > (($304)>>>(0));
   var $306=(($305)&(1));
   var $307=$result;
   var $308=$307 & -2147483648;
   var $309=$306 | $308;
   var $311 = $309;label = 61; break;
  case 61: 
   var $311;
   var $312=$2;
   var $313=(($312+36)|0);
   HEAP32[(($313)>>2)]=$311;
   var $314=$cmd;
   var $315=(($314+4)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $319=$result;
   var $320=(($319) & 255);
   var $321=$op1;
   var $322=$321;
   HEAP8[($322)]=$320;
   var $323=(($320)&(255));
   var $328 = $323;label = 64; break;
  case 63: 
   var $325=$result;
   var $326=$op1;
   HEAP32[(($326)>>2)]=$325;
   var $328 = $325;label = 64; break;
  case 64: 
   var $328;
   label = 364; break;
  case 65: 
   var $330=$op1;
   var $331=$330;
   var $332=HEAP8[($331)];
   var $333=(($332)&(255));
   var $334=$op2;
   var $335=$334;
   var $336=HEAP8[($335)];
   var $337=(($336)&(255));
   var $338=((($333)-($337))|0);
   var $339=(($338) & 255);
   var $340=$op1;
   var $341=$340;
   HEAP8[($341)]=$339;
   var $342=(($339)&(255));
   label = 364; break;
  case 66: 
   var $344=$op1;
   var $345=HEAP32[(($344)>>2)];
   var $346=$op2;
   var $347=HEAP32[(($346)>>2)];
   var $348=((($345)-($347))|0);
   var $349=$op1;
   HEAP32[(($349)>>2)]=$348;
   label = 364; break;
  case 67: 
   var $351=$2;
   var $352=(($351+36)|0);
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 & 2;
   var $355=(($354)|(0))!=0;
   if ($355) { label = 68; break; } else { label = 73; break; }
  case 68: 
   var $357=$op1;
   var $358=HEAP32[(($357)>>2)];
   var $359=$4;
   var $360=(($358)>>>(0)) >= (($359)>>>(0));
   if ($360) { label = 69; break; } else { label = 70; break; }
  case 69: 
   $1=1;
   label = 365; break;
  case 70: 
   var $363=$max_ops;
   var $364=((($363)-(1))|0);
   $max_ops=$364;
   var $365=(($364)|(0)) <= 0;
   if ($365) { label = 71; break; } else { label = 72; break; }
  case 71: 
   $1=0;
   label = 365; break;
  case 72: 
   var $368=$3;
   var $369=$op1;
   var $370=HEAP32[(($369)>>2)];
   var $371=(($368+((($370)*(40))&-1))|0);
   $cmd=$371;
   label = 2; break;
  case 73: 
   label = 364; break;
  case 74: 
   var $374=$2;
   var $375=(($374+36)|0);
   var $376=HEAP32[(($375)>>2)];
   var $377=$376 & 2;
   var $378=(($377)|(0))==0;
   if ($378) { label = 75; break; } else { label = 80; break; }
  case 75: 
   var $380=$op1;
   var $381=HEAP32[(($380)>>2)];
   var $382=$4;
   var $383=(($381)>>>(0)) >= (($382)>>>(0));
   if ($383) { label = 76; break; } else { label = 77; break; }
  case 76: 
   $1=1;
   label = 365; break;
  case 77: 
   var $386=$max_ops;
   var $387=((($386)-(1))|0);
   $max_ops=$387;
   var $388=(($387)|(0)) <= 0;
   if ($388) { label = 78; break; } else { label = 79; break; }
  case 78: 
   $1=0;
   label = 365; break;
  case 79: 
   var $391=$3;
   var $392=$op1;
   var $393=HEAP32[(($392)>>2)];
   var $394=(($391+((($393)*(40))&-1))|0);
   $cmd=$394;
   label = 2; break;
  case 80: 
   label = 364; break;
  case 81: 
   var $397=$cmd;
   var $398=(($397+4)|0);
   var $399=HEAP32[(($398)>>2)];
   var $400=(($399)|(0))!=0;
   if ($400) { label = 82; break; } else { label = 83; break; }
  case 82: 
   var $402=$op1;
   var $403=$402;
   var $404=HEAP8[($403)];
   var $405=(($404)&(255));
   var $410 = $405;label = 84; break;
  case 83: 
   var $407=$op1;
   var $408=HEAP32[(($407)>>2)];
   var $410 = $408;label = 84; break;
  case 84: 
   var $410;
   var $411=((($410)+(1))|0);
   $result=$411;
   var $412=$cmd;
   var $413=(($412+4)|0);
   var $414=HEAP32[(($413)>>2)];
   var $415=(($414)|(0))!=0;
   if ($415) { label = 85; break; } else { label = 86; break; }
  case 85: 
   var $417=$result;
   var $418=(($417) & 255);
   var $419=$op1;
   var $420=$419;
   HEAP8[($420)]=$418;
   var $421=(($418)&(255));
   var $426 = $421;label = 87; break;
  case 86: 
   var $423=$result;
   var $424=$op1;
   HEAP32[(($424)>>2)]=$423;
   var $426 = $423;label = 87; break;
  case 87: 
   var $426;
   var $427=$result;
   var $428=(($427)|(0))==0;
   if ($428) { label = 88; break; } else { label = 89; break; }
  case 88: 
   var $434 = 2;label = 90; break;
  case 89: 
   var $431=$result;
   var $432=$431 & -2147483648;
   var $434 = $432;label = 90; break;
  case 90: 
   var $434;
   var $435=$2;
   var $436=(($435+36)|0);
   HEAP32[(($436)>>2)]=$434;
   label = 364; break;
  case 91: 
   var $438=$op1;
   var $439=$438;
   var $440=HEAP8[($439)];
   var $441=(($440)&(255));
   var $442=((($441)+(1))|0);
   var $443=(($442) & 255);
   var $444=$op1;
   var $445=$444;
   HEAP8[($445)]=$443;
   var $446=(($443)&(255));
   label = 364; break;
  case 92: 
   var $448=$op1;
   var $449=HEAP32[(($448)>>2)];
   var $450=((($449)+(1))|0);
   var $451=$op1;
   HEAP32[(($451)>>2)]=$450;
   label = 364; break;
  case 93: 
   var $453=$cmd;
   var $454=(($453+4)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=(($455)|(0))!=0;
   if ($456) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $458=$op1;
   var $459=$458;
   var $460=HEAP8[($459)];
   var $461=(($460)&(255));
   var $466 = $461;label = 96; break;
  case 95: 
   var $463=$op1;
   var $464=HEAP32[(($463)>>2)];
   var $466 = $464;label = 96; break;
  case 96: 
   var $466;
   var $467=((($466)-(1))|0);
   $result=$467;
   var $468=$cmd;
   var $469=(($468+4)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=(($470)|(0))!=0;
   if ($471) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $473=$result;
   var $474=(($473) & 255);
   var $475=$op1;
   var $476=$475;
   HEAP8[($476)]=$474;
   var $477=(($474)&(255));
   var $482 = $477;label = 99; break;
  case 98: 
   var $479=$result;
   var $480=$op1;
   HEAP32[(($480)>>2)]=$479;
   var $482 = $479;label = 99; break;
  case 99: 
   var $482;
   var $483=$result;
   var $484=(($483)|(0))==0;
   if ($484) { label = 100; break; } else { label = 101; break; }
  case 100: 
   var $490 = 2;label = 102; break;
  case 101: 
   var $487=$result;
   var $488=$487 & -2147483648;
   var $490 = $488;label = 102; break;
  case 102: 
   var $490;
   var $491=$2;
   var $492=(($491+36)|0);
   HEAP32[(($492)>>2)]=$490;
   label = 364; break;
  case 103: 
   var $494=$op1;
   var $495=$494;
   var $496=HEAP8[($495)];
   var $497=(($496)&(255));
   var $498=((($497)-(1))|0);
   var $499=(($498) & 255);
   var $500=$op1;
   var $501=$500;
   HEAP8[($501)]=$499;
   var $502=(($499)&(255));
   label = 364; break;
  case 104: 
   var $504=$op1;
   var $505=HEAP32[(($504)>>2)];
   var $506=((($505)-(1))|0);
   var $507=$op1;
   HEAP32[(($507)>>2)]=$506;
   label = 364; break;
  case 105: 
   var $509=$op1;
   var $510=HEAP32[(($509)>>2)];
   var $511=$4;
   var $512=(($510)>>>(0)) >= (($511)>>>(0));
   if ($512) { label = 106; break; } else { label = 107; break; }
  case 106: 
   $1=1;
   label = 365; break;
  case 107: 
   var $515=$max_ops;
   var $516=((($515)-(1))|0);
   $max_ops=$516;
   var $517=(($516)|(0)) <= 0;
   if ($517) { label = 108; break; } else { label = 109; break; }
  case 108: 
   $1=0;
   label = 365; break;
  case 109: 
   var $520=$3;
   var $521=$op1;
   var $522=HEAP32[(($521)>>2)];
   var $523=(($520+((($522)*(40))&-1))|0);
   $cmd=$523;
   label = 2; break;
  case 110: 
   var $525=$cmd;
   var $526=(($525+4)|0);
   var $527=HEAP32[(($526)>>2)];
   var $528=(($527)|(0))!=0;
   if ($528) { label = 111; break; } else { label = 112; break; }
  case 111: 
   var $530=$op1;
   var $531=$530;
   var $532=HEAP8[($531)];
   var $533=(($532)&(255));
   var $538 = $533;label = 113; break;
  case 112: 
   var $535=$op1;
   var $536=HEAP32[(($535)>>2)];
   var $538 = $536;label = 113; break;
  case 113: 
   var $538;
   var $539=$cmd;
   var $540=(($539+4)|0);
   var $541=HEAP32[(($540)>>2)];
   var $542=(($541)|(0))!=0;
   if ($542) { label = 114; break; } else { label = 115; break; }
  case 114: 
   var $544=$op2;
   var $545=$544;
   var $546=HEAP8[($545)];
   var $547=(($546)&(255));
   var $552 = $547;label = 116; break;
  case 115: 
   var $549=$op2;
   var $550=HEAP32[(($549)>>2)];
   var $552 = $550;label = 116; break;
  case 116: 
   var $552;
   var $553=$538 ^ $552;
   $result=$553;
   var $554=$result;
   var $555=(($554)|(0))==0;
   if ($555) { label = 117; break; } else { label = 118; break; }
  case 117: 
   var $561 = 2;label = 119; break;
  case 118: 
   var $558=$result;
   var $559=$558 & -2147483648;
   var $561 = $559;label = 119; break;
  case 119: 
   var $561;
   var $562=$2;
   var $563=(($562+36)|0);
   HEAP32[(($563)>>2)]=$561;
   var $564=$cmd;
   var $565=(($564+4)|0);
   var $566=HEAP32[(($565)>>2)];
   var $567=(($566)|(0))!=0;
   if ($567) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $569=$result;
   var $570=(($569) & 255);
   var $571=$op1;
   var $572=$571;
   HEAP8[($572)]=$570;
   var $573=(($570)&(255));
   var $578 = $573;label = 122; break;
  case 121: 
   var $575=$result;
   var $576=$op1;
   HEAP32[(($576)>>2)]=$575;
   var $578 = $575;label = 122; break;
  case 122: 
   var $578;
   label = 364; break;
  case 123: 
   var $580=$cmd;
   var $581=(($580+4)|0);
   var $582=HEAP32[(($581)>>2)];
   var $583=(($582)|(0))!=0;
   if ($583) { label = 124; break; } else { label = 125; break; }
  case 124: 
   var $585=$op1;
   var $586=$585;
   var $587=HEAP8[($586)];
   var $588=(($587)&(255));
   var $593 = $588;label = 126; break;
  case 125: 
   var $590=$op1;
   var $591=HEAP32[(($590)>>2)];
   var $593 = $591;label = 126; break;
  case 126: 
   var $593;
   var $594=$cmd;
   var $595=(($594+4)|0);
   var $596=HEAP32[(($595)>>2)];
   var $597=(($596)|(0))!=0;
   if ($597) { label = 127; break; } else { label = 128; break; }
  case 127: 
   var $599=$op2;
   var $600=$599;
   var $601=HEAP8[($600)];
   var $602=(($601)&(255));
   var $607 = $602;label = 129; break;
  case 128: 
   var $604=$op2;
   var $605=HEAP32[(($604)>>2)];
   var $607 = $605;label = 129; break;
  case 129: 
   var $607;
   var $608=$593 & $607;
   $result=$608;
   var $609=$result;
   var $610=(($609)|(0))==0;
   if ($610) { label = 130; break; } else { label = 131; break; }
  case 130: 
   var $616 = 2;label = 132; break;
  case 131: 
   var $613=$result;
   var $614=$613 & -2147483648;
   var $616 = $614;label = 132; break;
  case 132: 
   var $616;
   var $617=$2;
   var $618=(($617+36)|0);
   HEAP32[(($618)>>2)]=$616;
   var $619=$cmd;
   var $620=(($619+4)|0);
   var $621=HEAP32[(($620)>>2)];
   var $622=(($621)|(0))!=0;
   if ($622) { label = 133; break; } else { label = 134; break; }
  case 133: 
   var $624=$result;
   var $625=(($624) & 255);
   var $626=$op1;
   var $627=$626;
   HEAP8[($627)]=$625;
   var $628=(($625)&(255));
   var $633 = $628;label = 135; break;
  case 134: 
   var $630=$result;
   var $631=$op1;
   HEAP32[(($631)>>2)]=$630;
   var $633 = $630;label = 135; break;
  case 135: 
   var $633;
   label = 364; break;
  case 136: 
   var $635=$cmd;
   var $636=(($635+4)|0);
   var $637=HEAP32[(($636)>>2)];
   var $638=(($637)|(0))!=0;
   if ($638) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $640=$op1;
   var $641=$640;
   var $642=HEAP8[($641)];
   var $643=(($642)&(255));
   var $648 = $643;label = 139; break;
  case 138: 
   var $645=$op1;
   var $646=HEAP32[(($645)>>2)];
   var $648 = $646;label = 139; break;
  case 139: 
   var $648;
   var $649=$cmd;
   var $650=(($649+4)|0);
   var $651=HEAP32[(($650)>>2)];
   var $652=(($651)|(0))!=0;
   if ($652) { label = 140; break; } else { label = 141; break; }
  case 140: 
   var $654=$op2;
   var $655=$654;
   var $656=HEAP8[($655)];
   var $657=(($656)&(255));
   var $662 = $657;label = 142; break;
  case 141: 
   var $659=$op2;
   var $660=HEAP32[(($659)>>2)];
   var $662 = $660;label = 142; break;
  case 142: 
   var $662;
   var $663=$648 | $662;
   $result=$663;
   var $664=$result;
   var $665=(($664)|(0))==0;
   if ($665) { label = 143; break; } else { label = 144; break; }
  case 143: 
   var $671 = 2;label = 145; break;
  case 144: 
   var $668=$result;
   var $669=$668 & -2147483648;
   var $671 = $669;label = 145; break;
  case 145: 
   var $671;
   var $672=$2;
   var $673=(($672+36)|0);
   HEAP32[(($673)>>2)]=$671;
   var $674=$cmd;
   var $675=(($674+4)|0);
   var $676=HEAP32[(($675)>>2)];
   var $677=(($676)|(0))!=0;
   if ($677) { label = 146; break; } else { label = 147; break; }
  case 146: 
   var $679=$result;
   var $680=(($679) & 255);
   var $681=$op1;
   var $682=$681;
   HEAP8[($682)]=$680;
   var $683=(($680)&(255));
   var $688 = $683;label = 148; break;
  case 147: 
   var $685=$result;
   var $686=$op1;
   HEAP32[(($686)>>2)]=$685;
   var $688 = $685;label = 148; break;
  case 148: 
   var $688;
   label = 364; break;
  case 149: 
   var $690=$cmd;
   var $691=(($690+4)|0);
   var $692=HEAP32[(($691)>>2)];
   var $693=(($692)|(0))!=0;
   if ($693) { label = 150; break; } else { label = 151; break; }
  case 150: 
   var $695=$op1;
   var $696=$695;
   var $697=HEAP8[($696)];
   var $698=(($697)&(255));
   var $703 = $698;label = 152; break;
  case 151: 
   var $700=$op1;
   var $701=HEAP32[(($700)>>2)];
   var $703 = $701;label = 152; break;
  case 152: 
   var $703;
   var $704=$cmd;
   var $705=(($704+4)|0);
   var $706=HEAP32[(($705)>>2)];
   var $707=(($706)|(0))!=0;
   if ($707) { label = 153; break; } else { label = 154; break; }
  case 153: 
   var $709=$op2;
   var $710=$709;
   var $711=HEAP8[($710)];
   var $712=(($711)&(255));
   var $717 = $712;label = 155; break;
  case 154: 
   var $714=$op2;
   var $715=HEAP32[(($714)>>2)];
   var $717 = $715;label = 155; break;
  case 155: 
   var $717;
   var $718=$703 & $717;
   $result=$718;
   var $719=$result;
   var $720=(($719)|(0))==0;
   if ($720) { label = 156; break; } else { label = 157; break; }
  case 156: 
   var $726 = 2;label = 158; break;
  case 157: 
   var $723=$result;
   var $724=$723 & -2147483648;
   var $726 = $724;label = 158; break;
  case 158: 
   var $726;
   var $727=$2;
   var $728=(($727+36)|0);
   HEAP32[(($728)>>2)]=$726;
   label = 364; break;
  case 159: 
   var $730=$2;
   var $731=(($730+36)|0);
   var $732=HEAP32[(($731)>>2)];
   var $733=$732 & -2147483648;
   var $734=(($733)|(0))!=0;
   if ($734) { label = 160; break; } else { label = 165; break; }
  case 160: 
   var $736=$op1;
   var $737=HEAP32[(($736)>>2)];
   var $738=$4;
   var $739=(($737)>>>(0)) >= (($738)>>>(0));
   if ($739) { label = 161; break; } else { label = 162; break; }
  case 161: 
   $1=1;
   label = 365; break;
  case 162: 
   var $742=$max_ops;
   var $743=((($742)-(1))|0);
   $max_ops=$743;
   var $744=(($743)|(0)) <= 0;
   if ($744) { label = 163; break; } else { label = 164; break; }
  case 163: 
   $1=0;
   label = 365; break;
  case 164: 
   var $747=$3;
   var $748=$op1;
   var $749=HEAP32[(($748)>>2)];
   var $750=(($747+((($749)*(40))&-1))|0);
   $cmd=$750;
   label = 2; break;
  case 165: 
   label = 364; break;
  case 166: 
   var $753=$2;
   var $754=(($753+36)|0);
   var $755=HEAP32[(($754)>>2)];
   var $756=$755 & -2147483648;
   var $757=(($756)|(0))==0;
   if ($757) { label = 167; break; } else { label = 172; break; }
  case 167: 
   var $759=$op1;
   var $760=HEAP32[(($759)>>2)];
   var $761=$4;
   var $762=(($760)>>>(0)) >= (($761)>>>(0));
   if ($762) { label = 168; break; } else { label = 169; break; }
  case 168: 
   $1=1;
   label = 365; break;
  case 169: 
   var $765=$max_ops;
   var $766=((($765)-(1))|0);
   $max_ops=$766;
   var $767=(($766)|(0)) <= 0;
   if ($767) { label = 170; break; } else { label = 171; break; }
  case 170: 
   $1=0;
   label = 365; break;
  case 171: 
   var $770=$3;
   var $771=$op1;
   var $772=HEAP32[(($771)>>2)];
   var $773=(($770+((($772)*(40))&-1))|0);
   $cmd=$773;
   label = 2; break;
  case 172: 
   label = 364; break;
  case 173: 
   var $776=$2;
   var $777=(($776+36)|0);
   var $778=HEAP32[(($777)>>2)];
   var $779=$778 & 1;
   var $780=(($779)|(0))!=0;
   if ($780) { label = 174; break; } else { label = 179; break; }
  case 174: 
   var $782=$op1;
   var $783=HEAP32[(($782)>>2)];
   var $784=$4;
   var $785=(($783)>>>(0)) >= (($784)>>>(0));
   if ($785) { label = 175; break; } else { label = 176; break; }
  case 175: 
   $1=1;
   label = 365; break;
  case 176: 
   var $788=$max_ops;
   var $789=((($788)-(1))|0);
   $max_ops=$789;
   var $790=(($789)|(0)) <= 0;
   if ($790) { label = 177; break; } else { label = 178; break; }
  case 177: 
   $1=0;
   label = 365; break;
  case 178: 
   var $793=$3;
   var $794=$op1;
   var $795=HEAP32[(($794)>>2)];
   var $796=(($793+((($795)*(40))&-1))|0);
   $cmd=$796;
   label = 2; break;
  case 179: 
   label = 364; break;
  case 180: 
   var $799=$2;
   var $800=(($799+36)|0);
   var $801=HEAP32[(($800)>>2)];
   var $802=$801 & 3;
   var $803=(($802)|(0))!=0;
   if ($803) { label = 181; break; } else { label = 186; break; }
  case 181: 
   var $805=$op1;
   var $806=HEAP32[(($805)>>2)];
   var $807=$4;
   var $808=(($806)>>>(0)) >= (($807)>>>(0));
   if ($808) { label = 182; break; } else { label = 183; break; }
  case 182: 
   $1=1;
   label = 365; break;
  case 183: 
   var $811=$max_ops;
   var $812=((($811)-(1))|0);
   $max_ops=$812;
   var $813=(($812)|(0)) <= 0;
   if ($813) { label = 184; break; } else { label = 185; break; }
  case 184: 
   $1=0;
   label = 365; break;
  case 185: 
   var $816=$3;
   var $817=$op1;
   var $818=HEAP32[(($817)>>2)];
   var $819=(($816+((($818)*(40))&-1))|0);
   $cmd=$819;
   label = 2; break;
  case 186: 
   label = 364; break;
  case 187: 
   var $822=$2;
   var $823=(($822+36)|0);
   var $824=HEAP32[(($823)>>2)];
   var $825=$824 & 3;
   var $826=(($825)|(0))==0;
   if ($826) { label = 188; break; } else { label = 193; break; }
  case 188: 
   var $828=$op1;
   var $829=HEAP32[(($828)>>2)];
   var $830=$4;
   var $831=(($829)>>>(0)) >= (($830)>>>(0));
   if ($831) { label = 189; break; } else { label = 190; break; }
  case 189: 
   $1=1;
   label = 365; break;
  case 190: 
   var $834=$max_ops;
   var $835=((($834)-(1))|0);
   $max_ops=$835;
   var $836=(($835)|(0)) <= 0;
   if ($836) { label = 191; break; } else { label = 192; break; }
  case 191: 
   $1=0;
   label = 365; break;
  case 192: 
   var $839=$3;
   var $840=$op1;
   var $841=HEAP32[(($840)>>2)];
   var $842=(($839+((($841)*(40))&-1))|0);
   $cmd=$842;
   label = 2; break;
  case 193: 
   label = 364; break;
  case 194: 
   var $845=$2;
   var $846=(($845+36)|0);
   var $847=HEAP32[(($846)>>2)];
   var $848=$847 & 1;
   var $849=(($848)|(0))==0;
   if ($849) { label = 195; break; } else { label = 200; break; }
  case 195: 
   var $851=$op1;
   var $852=HEAP32[(($851)>>2)];
   var $853=$4;
   var $854=(($852)>>>(0)) >= (($853)>>>(0));
   if ($854) { label = 196; break; } else { label = 197; break; }
  case 196: 
   $1=1;
   label = 365; break;
  case 197: 
   var $857=$max_ops;
   var $858=((($857)-(1))|0);
   $max_ops=$858;
   var $859=(($858)|(0)) <= 0;
   if ($859) { label = 198; break; } else { label = 199; break; }
  case 198: 
   $1=0;
   label = 365; break;
  case 199: 
   var $862=$3;
   var $863=$op1;
   var $864=HEAP32[(($863)>>2)];
   var $865=(($862+((($864)*(40))&-1))|0);
   $cmd=$865;
   label = 2; break;
  case 200: 
   label = 364; break;
  case 201: 
   var $868=$2;
   var $869=(($868+4)|0);
   var $870=(($869+28)|0);
   var $871=HEAP32[(($870)>>2)];
   var $872=((($871)-(4))|0);
   HEAP32[(($870)>>2)]=$872;
   var $873=$op1;
   var $874=HEAP32[(($873)>>2)];
   var $875=$2;
   var $876=(($875+4)|0);
   var $877=(($876+28)|0);
   var $878=HEAP32[(($877)>>2)];
   var $879=$878 & 262143;
   var $880=$2;
   var $881=(($880)|0);
   var $882=HEAP32[(($881)>>2)];
   var $883=(($882+$879)|0);
   var $884=$883;
   HEAP32[(($884)>>2)]=$874;
   label = 364; break;
  case 202: 
   var $886=$2;
   var $887=(($886+4)|0);
   var $888=(($887+28)|0);
   var $889=HEAP32[(($888)>>2)];
   var $890=$889 & 262143;
   var $891=$2;
   var $892=(($891)|0);
   var $893=HEAP32[(($892)>>2)];
   var $894=(($893+$890)|0);
   var $895=$894;
   var $896=HEAP32[(($895)>>2)];
   var $897=$op1;
   HEAP32[(($897)>>2)]=$896;
   var $898=$2;
   var $899=(($898+4)|0);
   var $900=(($899+28)|0);
   var $901=HEAP32[(($900)>>2)];
   var $902=((($901)+(4))|0);
   HEAP32[(($900)>>2)]=$902;
   label = 364; break;
  case 203: 
   var $904=$2;
   var $905=(($904+4)|0);
   var $906=(($905+28)|0);
   var $907=HEAP32[(($906)>>2)];
   var $908=((($907)-(4))|0);
   HEAP32[(($906)>>2)]=$908;
   var $909=$cmd;
   var $910=$3;
   var $911=$909;
   var $912=$910;
   var $913=((($911)-($912))|0);
   var $914=((((($913)|(0)))/(40))&-1);
   var $915=((($914)+(1))|0);
   var $916=$2;
   var $917=(($916+4)|0);
   var $918=(($917+28)|0);
   var $919=HEAP32[(($918)>>2)];
   var $920=$919 & 262143;
   var $921=$2;
   var $922=(($921)|0);
   var $923=HEAP32[(($922)>>2)];
   var $924=(($923+$920)|0);
   var $925=$924;
   HEAP32[(($925)>>2)]=$915;
   var $926=$op1;
   var $927=HEAP32[(($926)>>2)];
   var $928=$4;
   var $929=(($927)>>>(0)) >= (($928)>>>(0));
   if ($929) { label = 204; break; } else { label = 205; break; }
  case 204: 
   $1=1;
   label = 365; break;
  case 205: 
   var $932=$max_ops;
   var $933=((($932)-(1))|0);
   $max_ops=$933;
   var $934=(($933)|(0)) <= 0;
   if ($934) { label = 206; break; } else { label = 207; break; }
  case 206: 
   $1=0;
   label = 365; break;
  case 207: 
   var $937=$3;
   var $938=$op1;
   var $939=HEAP32[(($938)>>2)];
   var $940=(($937+((($939)*(40))&-1))|0);
   $cmd=$940;
   label = 2; break;
  case 208: 
   var $942=$cmd;
   var $943=(($942+4)|0);
   var $944=HEAP32[(($943)>>2)];
   var $945=(($944)|(0))!=0;
   if ($945) { label = 209; break; } else { label = 213; break; }
  case 209: 
   var $947=$cmd;
   var $948=(($947+4)|0);
   var $949=HEAP32[(($948)>>2)];
   var $950=(($949)|(0))!=0;
   if ($950) { label = 210; break; } else { label = 211; break; }
  case 210: 
   var $952=$op1;
   var $953=$952;
   var $954=HEAP8[($953)];
   var $955=(($954)&(255));
   var $960 = $955;label = 212; break;
  case 211: 
   var $957=$op1;
   var $958=HEAP32[(($957)>>2)];
   var $960 = $958;label = 212; break;
  case 212: 
   var $960;
   var $961=$960 ^ -1;
   var $962=(($961) & 255);
   var $963=$op1;
   var $964=$963;
   HEAP8[($964)]=$962;
   var $965=(($962)&(255));
   var $984 = $965;label = 217; break;
  case 213: 
   var $967=$cmd;
   var $968=(($967+4)|0);
   var $969=HEAP32[(($968)>>2)];
   var $970=(($969)|(0))!=0;
   if ($970) { label = 214; break; } else { label = 215; break; }
  case 214: 
   var $972=$op1;
   var $973=$972;
   var $974=HEAP8[($973)];
   var $975=(($974)&(255));
   var $980 = $975;label = 216; break;
  case 215: 
   var $977=$op1;
   var $978=HEAP32[(($977)>>2)];
   var $980 = $978;label = 216; break;
  case 216: 
   var $980;
   var $981=$980 ^ -1;
   var $982=$op1;
   HEAP32[(($982)>>2)]=$981;
   var $984 = $981;label = 217; break;
  case 217: 
   var $984;
   label = 364; break;
  case 218: 
   var $986=$cmd;
   var $987=(($986+4)|0);
   var $988=HEAP32[(($987)>>2)];
   var $989=(($988)|(0))!=0;
   if ($989) { label = 219; break; } else { label = 220; break; }
  case 219: 
   var $991=$op1;
   var $992=$991;
   var $993=HEAP8[($992)];
   var $994=(($993)&(255));
   var $999 = $994;label = 221; break;
  case 220: 
   var $996=$op1;
   var $997=HEAP32[(($996)>>2)];
   var $999 = $997;label = 221; break;
  case 221: 
   var $999;
   $value1=$999;
   var $1000=$cmd;
   var $1001=(($1000+4)|0);
   var $1002=HEAP32[(($1001)>>2)];
   var $1003=(($1002)|(0))!=0;
   if ($1003) { label = 222; break; } else { label = 223; break; }
  case 222: 
   var $1005=$op1;
   var $1006=$1005;
   var $1007=HEAP8[($1006)];
   var $1008=(($1007)&(255));
   var $1013 = $1008;label = 224; break;
  case 223: 
   var $1010=$op1;
   var $1011=HEAP32[(($1010)>>2)];
   var $1013 = $1011;label = 224; break;
  case 224: 
   var $1013;
   $value2=$1013;
   var $1014=$value1;
   var $1015=$value2;
   var $1016=$1014 << $1015;
   $result=$1016;
   var $1017=$result;
   var $1018=(($1017)|(0))==0;
   if ($1018) { label = 225; break; } else { label = 226; break; }
  case 225: 
   var $1024 = 2;label = 227; break;
  case 226: 
   var $1021=$result;
   var $1022=$1021 & -2147483648;
   var $1024 = $1022;label = 227; break;
  case 227: 
   var $1024;
   var $1025=$value1;
   var $1026=$value2;
   var $1027=((($1026)-(1))|0);
   var $1028=$1025 << $1027;
   var $1029=$1028 & -2147483648;
   var $1030=(($1029)|(0))!=0;
   var $1031=$1030 ? 1 : 0;
   var $1032=$1024 | $1031;
   var $1033=$2;
   var $1034=(($1033+36)|0);
   HEAP32[(($1034)>>2)]=$1032;
   var $1035=$cmd;
   var $1036=(($1035+4)|0);
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=(($1037)|(0))!=0;
   if ($1038) { label = 228; break; } else { label = 229; break; }
  case 228: 
   var $1040=$result;
   var $1041=(($1040) & 255);
   var $1042=$op1;
   var $1043=$1042;
   HEAP8[($1043)]=$1041;
   var $1044=(($1041)&(255));
   var $1049 = $1044;label = 230; break;
  case 229: 
   var $1046=$result;
   var $1047=$op1;
   HEAP32[(($1047)>>2)]=$1046;
   var $1049 = $1046;label = 230; break;
  case 230: 
   var $1049;
   label = 364; break;
  case 231: 
   var $1051=$cmd;
   var $1052=(($1051+4)|0);
   var $1053=HEAP32[(($1052)>>2)];
   var $1054=(($1053)|(0))!=0;
   if ($1054) { label = 232; break; } else { label = 233; break; }
  case 232: 
   var $1056=$op1;
   var $1057=$1056;
   var $1058=HEAP8[($1057)];
   var $1059=(($1058)&(255));
   var $1064 = $1059;label = 234; break;
  case 233: 
   var $1061=$op1;
   var $1062=HEAP32[(($1061)>>2)];
   var $1064 = $1062;label = 234; break;
  case 234: 
   var $1064;
   $value1=$1064;
   var $1065=$cmd;
   var $1066=(($1065+4)|0);
   var $1067=HEAP32[(($1066)>>2)];
   var $1068=(($1067)|(0))!=0;
   if ($1068) { label = 235; break; } else { label = 236; break; }
  case 235: 
   var $1070=$op1;
   var $1071=$1070;
   var $1072=HEAP8[($1071)];
   var $1073=(($1072)&(255));
   var $1078 = $1073;label = 237; break;
  case 236: 
   var $1075=$op1;
   var $1076=HEAP32[(($1075)>>2)];
   var $1078 = $1076;label = 237; break;
  case 237: 
   var $1078;
   $value2=$1078;
   var $1079=$value1;
   var $1080=$value2;
   var $1081=$1079 >>> (($1080)>>>(0));
   $result=$1081;
   var $1082=$result;
   var $1083=(($1082)|(0))==0;
   if ($1083) { label = 238; break; } else { label = 239; break; }
  case 238: 
   var $1089 = 2;label = 240; break;
  case 239: 
   var $1086=$result;
   var $1087=$1086 & -2147483648;
   var $1089 = $1087;label = 240; break;
  case 240: 
   var $1089;
   var $1090=$value1;
   var $1091=$value2;
   var $1092=((($1091)-(1))|0);
   var $1093=$1090 >>> (($1092)>>>(0));
   var $1094=$1093 & 1;
   var $1095=$1089 | $1094;
   var $1096=$2;
   var $1097=(($1096+36)|0);
   HEAP32[(($1097)>>2)]=$1095;
   var $1098=$cmd;
   var $1099=(($1098+4)|0);
   var $1100=HEAP32[(($1099)>>2)];
   var $1101=(($1100)|(0))!=0;
   if ($1101) { label = 241; break; } else { label = 242; break; }
  case 241: 
   var $1103=$result;
   var $1104=(($1103) & 255);
   var $1105=$op1;
   var $1106=$1105;
   HEAP8[($1106)]=$1104;
   var $1107=(($1104)&(255));
   var $1112 = $1107;label = 243; break;
  case 242: 
   var $1109=$result;
   var $1110=$op1;
   HEAP32[(($1110)>>2)]=$1109;
   var $1112 = $1109;label = 243; break;
  case 243: 
   var $1112;
   label = 364; break;
  case 244: 
   var $1114=$cmd;
   var $1115=(($1114+4)|0);
   var $1116=HEAP32[(($1115)>>2)];
   var $1117=(($1116)|(0))!=0;
   if ($1117) { label = 245; break; } else { label = 246; break; }
  case 245: 
   var $1119=$op1;
   var $1120=$1119;
   var $1121=HEAP8[($1120)];
   var $1122=(($1121)&(255));
   var $1127 = $1122;label = 247; break;
  case 246: 
   var $1124=$op1;
   var $1125=HEAP32[(($1124)>>2)];
   var $1127 = $1125;label = 247; break;
  case 247: 
   var $1127;
   $value1=$1127;
   var $1128=$cmd;
   var $1129=(($1128+4)|0);
   var $1130=HEAP32[(($1129)>>2)];
   var $1131=(($1130)|(0))!=0;
   if ($1131) { label = 248; break; } else { label = 249; break; }
  case 248: 
   var $1133=$op1;
   var $1134=$1133;
   var $1135=HEAP8[($1134)];
   var $1136=(($1135)&(255));
   var $1141 = $1136;label = 250; break;
  case 249: 
   var $1138=$op1;
   var $1139=HEAP32[(($1138)>>2)];
   var $1141 = $1139;label = 250; break;
  case 250: 
   var $1141;
   $value2=$1141;
   var $1142=$value1;
   var $1143=$value2;
   var $1144=$1142 >> (($1143)|(0));
   $result=$1144;
   var $1145=$result;
   var $1146=(($1145)|(0))==0;
   if ($1146) { label = 251; break; } else { label = 252; break; }
  case 251: 
   var $1152 = 2;label = 253; break;
  case 252: 
   var $1149=$result;
   var $1150=$1149 & -2147483648;
   var $1152 = $1150;label = 253; break;
  case 253: 
   var $1152;
   var $1153=$value1;
   var $1154=$value2;
   var $1155=((($1154)-(1))|0);
   var $1156=$1153 >>> (($1155)>>>(0));
   var $1157=$1156 & 1;
   var $1158=$1152 | $1157;
   var $1159=$2;
   var $1160=(($1159+36)|0);
   HEAP32[(($1160)>>2)]=$1158;
   var $1161=$cmd;
   var $1162=(($1161+4)|0);
   var $1163=HEAP32[(($1162)>>2)];
   var $1164=(($1163)|(0))!=0;
   if ($1164) { label = 254; break; } else { label = 255; break; }
  case 254: 
   var $1166=$result;
   var $1167=(($1166) & 255);
   var $1168=$op1;
   var $1169=$1168;
   HEAP8[($1169)]=$1167;
   var $1170=(($1167)&(255));
   var $1175 = $1170;label = 256; break;
  case 255: 
   var $1172=$result;
   var $1173=$op1;
   HEAP32[(($1173)>>2)]=$1172;
   var $1175 = $1172;label = 256; break;
  case 256: 
   var $1175;
   label = 364; break;
  case 257: 
   var $1177=$cmd;
   var $1178=(($1177+4)|0);
   var $1179=HEAP32[(($1178)>>2)];
   var $1180=(($1179)|(0))!=0;
   if ($1180) { label = 258; break; } else { label = 259; break; }
  case 258: 
   var $1182=$op1;
   var $1183=$1182;
   var $1184=HEAP8[($1183)];
   var $1185=(($1184)&(255));
   var $1190 = $1185;label = 260; break;
  case 259: 
   var $1187=$op1;
   var $1188=HEAP32[(($1187)>>2)];
   var $1190 = $1188;label = 260; break;
  case 260: 
   var $1190;
   var $1191=(((-$1190))|0);
   $result=$1191;
   var $1192=$result;
   var $1193=(($1192)|(0))==0;
   if ($1193) { label = 261; break; } else { label = 262; break; }
  case 261: 
   var $1200 = 2;label = 263; break;
  case 262: 
   var $1196=$result;
   var $1197=$1196 & -2147483648;
   var $1198=1 | $1197;
   var $1200 = $1198;label = 263; break;
  case 263: 
   var $1200;
   var $1201=$2;
   var $1202=(($1201+36)|0);
   HEAP32[(($1202)>>2)]=$1200;
   var $1203=$cmd;
   var $1204=(($1203+4)|0);
   var $1205=HEAP32[(($1204)>>2)];
   var $1206=(($1205)|(0))!=0;
   if ($1206) { label = 264; break; } else { label = 265; break; }
  case 264: 
   var $1208=$result;
   var $1209=(($1208) & 255);
   var $1210=$op1;
   var $1211=$1210;
   HEAP8[($1211)]=$1209;
   var $1212=(($1209)&(255));
   var $1217 = $1212;label = 266; break;
  case 265: 
   var $1214=$result;
   var $1215=$op1;
   HEAP32[(($1215)>>2)]=$1214;
   var $1217 = $1214;label = 266; break;
  case 266: 
   var $1217;
   label = 364; break;
  case 267: 
   var $1219=$op1;
   var $1220=$1219;
   var $1221=HEAP8[($1220)];
   var $1222=(($1221)&(255));
   var $1223=(((-$1222))|0);
   var $1224=(($1223) & 255);
   var $1225=$op1;
   var $1226=$1225;
   HEAP8[($1226)]=$1224;
   var $1227=(($1224)&(255));
   label = 364; break;
  case 268: 
   var $1229=$op1;
   var $1230=HEAP32[(($1229)>>2)];
   var $1231=(((-$1230))|0);
   var $1232=$op1;
   HEAP32[(($1232)>>2)]=$1231;
   label = 364; break;
  case 269: 
   $i=0;
   var $1234=$2;
   var $1235=(($1234+4)|0);
   var $1236=(($1235+28)|0);
   var $1237=HEAP32[(($1236)>>2)];
   var $1238=((($1237)-(4))|0);
   $SP=$1238;
   label = 270; break;
  case 270: 
   var $1240=$i;
   var $1241=(($1240)|(0)) < 8;
   if ($1241) { label = 271; break; } else { label = 273; break; }
  case 271: 
   var $1243=$i;
   var $1244=$2;
   var $1245=(($1244+4)|0);
   var $1246=(($1245+($1243<<2))|0);
   var $1247=HEAP32[(($1246)>>2)];
   var $1248=$SP;
   var $1249=$1248 & 262143;
   var $1250=$2;
   var $1251=(($1250)|0);
   var $1252=HEAP32[(($1251)>>2)];
   var $1253=(($1252+$1249)|0);
   var $1254=$1253;
   HEAP32[(($1254)>>2)]=$1247;
   label = 272; break;
  case 272: 
   var $1256=$i;
   var $1257=((($1256)+(1))|0);
   $i=$1257;
   var $1258=$SP;
   var $1259=((($1258)-(4))|0);
   $SP=$1259;
   label = 270; break;
  case 273: 
   var $1261=$2;
   var $1262=(($1261+4)|0);
   var $1263=(($1262+28)|0);
   var $1264=HEAP32[(($1263)>>2)];
   var $1265=((($1264)-(32))|0);
   HEAP32[(($1263)>>2)]=$1265;
   label = 364; break;
  case 274: 
   $i=0;
   var $1267=$2;
   var $1268=(($1267+4)|0);
   var $1269=(($1268+28)|0);
   var $1270=HEAP32[(($1269)>>2)];
   $SP=$1270;
   label = 275; break;
  case 275: 
   var $1272=$i;
   var $1273=(($1272)|(0)) < 8;
   if ($1273) { label = 276; break; } else { label = 278; break; }
  case 276: 
   var $1275=$SP;
   var $1276=$1275 & 262143;
   var $1277=$2;
   var $1278=(($1277)|0);
   var $1279=HEAP32[(($1278)>>2)];
   var $1280=(($1279+$1276)|0);
   var $1281=$1280;
   var $1282=HEAP32[(($1281)>>2)];
   var $1283=$i;
   var $1284=(((7)-($1283))|0);
   var $1285=$2;
   var $1286=(($1285+4)|0);
   var $1287=(($1286+($1284<<2))|0);
   HEAP32[(($1287)>>2)]=$1282;
   label = 277; break;
  case 277: 
   var $1289=$i;
   var $1290=((($1289)+(1))|0);
   $i=$1290;
   var $1291=$SP;
   var $1292=((($1291)+(4))|0);
   $SP=$1292;
   label = 275; break;
  case 278: 
   label = 364; break;
  case 279: 
   var $1295=$2;
   var $1296=(($1295+4)|0);
   var $1297=(($1296+28)|0);
   var $1298=HEAP32[(($1297)>>2)];
   var $1299=((($1298)-(4))|0);
   HEAP32[(($1297)>>2)]=$1299;
   var $1300=$2;
   var $1301=(($1300+36)|0);
   var $1302=HEAP32[(($1301)>>2)];
   var $1303=$2;
   var $1304=(($1303+4)|0);
   var $1305=(($1304+28)|0);
   var $1306=HEAP32[(($1305)>>2)];
   var $1307=$1306 & 262143;
   var $1308=$2;
   var $1309=(($1308)|0);
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=(($1310+$1307)|0);
   var $1312=$1311;
   HEAP32[(($1312)>>2)]=$1302;
   label = 364; break;
  case 280: 
   var $1314=$2;
   var $1315=(($1314+4)|0);
   var $1316=(($1315+28)|0);
   var $1317=HEAP32[(($1316)>>2)];
   var $1318=$1317 & 262143;
   var $1319=$2;
   var $1320=(($1319)|0);
   var $1321=HEAP32[(($1320)>>2)];
   var $1322=(($1321+$1318)|0);
   var $1323=$1322;
   var $1324=HEAP32[(($1323)>>2)];
   var $1325=$2;
   var $1326=(($1325+36)|0);
   HEAP32[(($1326)>>2)]=$1324;
   var $1327=$2;
   var $1328=(($1327+4)|0);
   var $1329=(($1328+28)|0);
   var $1330=HEAP32[(($1329)>>2)];
   var $1331=((($1330)+(4))|0);
   HEAP32[(($1329)>>2)]=$1331;
   label = 364; break;
  case 281: 
   var $1333=$op2;
   var $1334=$1333;
   var $1335=HEAP8[($1334)];
   var $1336=(($1335)&(255));
   var $1337=$op1;
   HEAP32[(($1337)>>2)]=$1336;
   label = 364; break;
  case 282: 
   var $1339=$op2;
   var $1340=$1339;
   var $1341=HEAP8[($1340)];
   var $1342=(($1341)&(255));
   var $1343=(($1342) & 255);
   var $1344=(($1343 << 24) >> 24);
   var $1345=$op1;
   HEAP32[(($1345)>>2)]=$1344;
   label = 364; break;
  case 283: 
   var $1347=$cmd;
   var $1348=(($1347+4)|0);
   var $1349=HEAP32[(($1348)>>2)];
   var $1350=(($1349)|(0))!=0;
   if ($1350) { label = 284; break; } else { label = 285; break; }
  case 284: 
   var $1352=$op1;
   var $1353=$1352;
   var $1354=HEAP8[($1353)];
   var $1355=(($1354)&(255));
   var $1360 = $1355;label = 286; break;
  case 285: 
   var $1357=$op1;
   var $1358=HEAP32[(($1357)>>2)];
   var $1360 = $1358;label = 286; break;
  case 286: 
   var $1360;
   $value1=$1360;
   var $1361=$cmd;
   var $1362=(($1361+4)|0);
   var $1363=HEAP32[(($1362)>>2)];
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 287; break; } else { label = 291; break; }
  case 287: 
   var $1366=$cmd;
   var $1367=(($1366+4)|0);
   var $1368=HEAP32[(($1367)>>2)];
   var $1369=(($1368)|(0))!=0;
   if ($1369) { label = 288; break; } else { label = 289; break; }
  case 288: 
   var $1371=$op2;
   var $1372=$1371;
   var $1373=HEAP8[($1372)];
   var $1374=(($1373)&(255));
   var $1379 = $1374;label = 290; break;
  case 289: 
   var $1376=$op2;
   var $1377=HEAP32[(($1376)>>2)];
   var $1379 = $1377;label = 290; break;
  case 290: 
   var $1379;
   var $1380=(($1379) & 255);
   var $1381=$op1;
   var $1382=$1381;
   HEAP8[($1382)]=$1380;
   var $1383=(($1380)&(255));
   var $1401 = $1383;label = 295; break;
  case 291: 
   var $1385=$cmd;
   var $1386=(($1385+4)|0);
   var $1387=HEAP32[(($1386)>>2)];
   var $1388=(($1387)|(0))!=0;
   if ($1388) { label = 292; break; } else { label = 293; break; }
  case 292: 
   var $1390=$op2;
   var $1391=$1390;
   var $1392=HEAP8[($1391)];
   var $1393=(($1392)&(255));
   var $1398 = $1393;label = 294; break;
  case 293: 
   var $1395=$op2;
   var $1396=HEAP32[(($1395)>>2)];
   var $1398 = $1396;label = 294; break;
  case 294: 
   var $1398;
   var $1399=$op1;
   HEAP32[(($1399)>>2)]=$1398;
   var $1401 = $1398;label = 295; break;
  case 295: 
   var $1401;
   var $1402=$cmd;
   var $1403=(($1402+4)|0);
   var $1404=HEAP32[(($1403)>>2)];
   var $1405=(($1404)|(0))!=0;
   if ($1405) { label = 296; break; } else { label = 297; break; }
  case 296: 
   var $1407=$value1;
   var $1408=(($1407) & 255);
   var $1409=$op2;
   var $1410=$1409;
   HEAP8[($1410)]=$1408;
   var $1411=(($1408)&(255));
   var $1416 = $1411;label = 298; break;
  case 297: 
   var $1413=$value1;
   var $1414=$op2;
   HEAP32[(($1414)>>2)]=$1413;
   var $1416 = $1413;label = 298; break;
  case 298: 
   var $1416;
   label = 364; break;
  case 299: 
   var $1418=$cmd;
   var $1419=(($1418+4)|0);
   var $1420=HEAP32[(($1419)>>2)];
   var $1421=(($1420)|(0))!=0;
   if ($1421) { label = 300; break; } else { label = 301; break; }
  case 300: 
   var $1423=$op1;
   var $1424=$1423;
   var $1425=HEAP8[($1424)];
   var $1426=(($1425)&(255));
   var $1431 = $1426;label = 302; break;
  case 301: 
   var $1428=$op1;
   var $1429=HEAP32[(($1428)>>2)];
   var $1431 = $1429;label = 302; break;
  case 302: 
   var $1431;
   var $1432=$cmd;
   var $1433=(($1432+4)|0);
   var $1434=HEAP32[(($1433)>>2)];
   var $1435=(($1434)|(0))!=0;
   if ($1435) { label = 303; break; } else { label = 304; break; }
  case 303: 
   var $1437=$op2;
   var $1438=$1437;
   var $1439=HEAP8[($1438)];
   var $1440=(($1439)&(255));
   var $1445 = $1440;label = 305; break;
  case 304: 
   var $1442=$op2;
   var $1443=HEAP32[(($1442)>>2)];
   var $1445 = $1443;label = 305; break;
  case 305: 
   var $1445;
   var $1446=(Math.imul($1431,$1445)|0);
   $result=$1446;
   var $1447=$cmd;
   var $1448=(($1447+4)|0);
   var $1449=HEAP32[(($1448)>>2)];
   var $1450=(($1449)|(0))!=0;
   if ($1450) { label = 306; break; } else { label = 307; break; }
  case 306: 
   var $1452=$result;
   var $1453=(($1452) & 255);
   var $1454=$op1;
   var $1455=$1454;
   HEAP8[($1455)]=$1453;
   var $1456=(($1453)&(255));
   var $1461 = $1456;label = 308; break;
  case 307: 
   var $1458=$result;
   var $1459=$op1;
   HEAP32[(($1459)>>2)]=$1458;
   var $1461 = $1458;label = 308; break;
  case 308: 
   var $1461;
   label = 364; break;
  case 309: 
   var $1463=$cmd;
   var $1464=(($1463+4)|0);
   var $1465=HEAP32[(($1464)>>2)];
   var $1466=(($1465)|(0))!=0;
   if ($1466) { label = 310; break; } else { label = 311; break; }
  case 310: 
   var $1468=$op2;
   var $1469=$1468;
   var $1470=HEAP8[($1469)];
   var $1471=(($1470)&(255));
   var $1476 = $1471;label = 312; break;
  case 311: 
   var $1473=$op2;
   var $1474=HEAP32[(($1473)>>2)];
   var $1476 = $1474;label = 312; break;
  case 312: 
   var $1476;
   $divider=$1476;
   var $1477=$divider;
   var $1478=(($1477)|(0))!=0;
   if ($1478) { label = 313; break; } else { label = 320; break; }
  case 313: 
   var $1480=$cmd;
   var $1481=(($1480+4)|0);
   var $1482=HEAP32[(($1481)>>2)];
   var $1483=(($1482)|(0))!=0;
   if ($1483) { label = 314; break; } else { label = 315; break; }
  case 314: 
   var $1485=$op1;
   var $1486=$1485;
   var $1487=HEAP8[($1486)];
   var $1488=(($1487)&(255));
   var $1493 = $1488;label = 316; break;
  case 315: 
   var $1490=$op1;
   var $1491=HEAP32[(($1490)>>2)];
   var $1493 = $1491;label = 316; break;
  case 316: 
   var $1493;
   var $1494=$divider;
   var $1495=((((($1493)>>>(0)))/((($1494)>>>(0))))&-1);
   $result=$1495;
   var $1496=$cmd;
   var $1497=(($1496+4)|0);
   var $1498=HEAP32[(($1497)>>2)];
   var $1499=(($1498)|(0))!=0;
   if ($1499) { label = 317; break; } else { label = 318; break; }
  case 317: 
   var $1501=$result;
   var $1502=(($1501) & 255);
   var $1503=$op1;
   var $1504=$1503;
   HEAP8[($1504)]=$1502;
   var $1505=(($1502)&(255));
   var $1510 = $1505;label = 319; break;
  case 318: 
   var $1507=$result;
   var $1508=$op1;
   HEAP32[(($1508)>>2)]=$1507;
   var $1510 = $1507;label = 319; break;
  case 319: 
   var $1510;
   label = 320; break;
  case 320: 
   label = 364; break;
  case 321: 
   var $1513=$cmd;
   var $1514=(($1513+4)|0);
   var $1515=HEAP32[(($1514)>>2)];
   var $1516=(($1515)|(0))!=0;
   if ($1516) { label = 322; break; } else { label = 323; break; }
  case 322: 
   var $1518=$op1;
   var $1519=$1518;
   var $1520=HEAP8[($1519)];
   var $1521=(($1520)&(255));
   var $1526 = $1521;label = 324; break;
  case 323: 
   var $1523=$op1;
   var $1524=HEAP32[(($1523)>>2)];
   var $1526 = $1524;label = 324; break;
  case 324: 
   var $1526;
   $value1=$1526;
   var $1527=$2;
   var $1528=(($1527+36)|0);
   var $1529=HEAP32[(($1528)>>2)];
   var $1530=$1529 & 1;
   $FC=$1530;
   var $1531=$value1;
   var $1532=$cmd;
   var $1533=(($1532+4)|0);
   var $1534=HEAP32[(($1533)>>2)];
   var $1535=(($1534)|(0))!=0;
   if ($1535) { label = 325; break; } else { label = 326; break; }
  case 325: 
   var $1537=$op2;
   var $1538=$1537;
   var $1539=HEAP8[($1538)];
   var $1540=(($1539)&(255));
   var $1545 = $1540;label = 327; break;
  case 326: 
   var $1542=$op2;
   var $1543=HEAP32[(($1542)>>2)];
   var $1545 = $1543;label = 327; break;
  case 327: 
   var $1545;
   var $1546=((($1531)+($1545))|0);
   var $1547=$FC;
   var $1548=((($1546)+($1547))|0);
   $result=$1548;
   var $1549=$result;
   var $1550=(($1549)|(0))==0;
   if ($1550) { label = 328; break; } else { label = 329; break; }
  case 328: 
   var $1572 = 2;label = 334; break;
  case 329: 
   var $1553=$result;
   var $1554=$value1;
   var $1555=(($1553)>>>(0)) < (($1554)>>>(0));
   if ($1555) { var $1566 = 1;label = 333; break; } else { label = 330; break; }
  case 330: 
   var $1557=$result;
   var $1558=$value1;
   var $1559=(($1557)|(0))==(($1558)|(0));
   if ($1559) { label = 331; break; } else { var $1564 = 0;label = 332; break; }
  case 331: 
   var $1561=$FC;
   var $1562=(($1561)|(0))!=0;
   var $1564 = $1562;label = 332; break;
  case 332: 
   var $1564;
   var $1566 = $1564;label = 333; break;
  case 333: 
   var $1566;
   var $1567=(($1566)&(1));
   var $1568=$result;
   var $1569=$1568 & -2147483648;
   var $1570=$1567 | $1569;
   var $1572 = $1570;label = 334; break;
  case 334: 
   var $1572;
   var $1573=$2;
   var $1574=(($1573+36)|0);
   HEAP32[(($1574)>>2)]=$1572;
   var $1575=$cmd;
   var $1576=(($1575+4)|0);
   var $1577=HEAP32[(($1576)>>2)];
   var $1578=(($1577)|(0))!=0;
   if ($1578) { label = 335; break; } else { label = 336; break; }
  case 335: 
   var $1580=$result;
   var $1581=(($1580) & 255);
   var $1582=$op1;
   var $1583=$1582;
   HEAP8[($1583)]=$1581;
   var $1584=(($1581)&(255));
   var $1589 = $1584;label = 337; break;
  case 336: 
   var $1586=$result;
   var $1587=$op1;
   HEAP32[(($1587)>>2)]=$1586;
   var $1589 = $1586;label = 337; break;
  case 337: 
   var $1589;
   label = 364; break;
  case 338: 
   var $1591=$cmd;
   var $1592=(($1591+4)|0);
   var $1593=HEAP32[(($1592)>>2)];
   var $1594=(($1593)|(0))!=0;
   if ($1594) { label = 339; break; } else { label = 340; break; }
  case 339: 
   var $1596=$op1;
   var $1597=$1596;
   var $1598=HEAP8[($1597)];
   var $1599=(($1598)&(255));
   var $1604 = $1599;label = 341; break;
  case 340: 
   var $1601=$op1;
   var $1602=HEAP32[(($1601)>>2)];
   var $1604 = $1602;label = 341; break;
  case 341: 
   var $1604;
   $value1=$1604;
   var $1605=$2;
   var $1606=(($1605+36)|0);
   var $1607=HEAP32[(($1606)>>2)];
   var $1608=$1607 & 1;
   $FC=$1608;
   var $1609=$value1;
   var $1610=$cmd;
   var $1611=(($1610+4)|0);
   var $1612=HEAP32[(($1611)>>2)];
   var $1613=(($1612)|(0))!=0;
   if ($1613) { label = 342; break; } else { label = 343; break; }
  case 342: 
   var $1615=$op2;
   var $1616=$1615;
   var $1617=HEAP8[($1616)];
   var $1618=(($1617)&(255));
   var $1623 = $1618;label = 344; break;
  case 343: 
   var $1620=$op2;
   var $1621=HEAP32[(($1620)>>2)];
   var $1623 = $1621;label = 344; break;
  case 344: 
   var $1623;
   var $1624=((($1609)-($1623))|0);
   var $1625=$FC;
   var $1626=((($1624)-($1625))|0);
   $result=$1626;
   var $1627=$result;
   var $1628=(($1627)|(0))==0;
   if ($1628) { label = 345; break; } else { label = 346; break; }
  case 345: 
   var $1650 = 2;label = 351; break;
  case 346: 
   var $1631=$result;
   var $1632=$value1;
   var $1633=(($1631)>>>(0)) > (($1632)>>>(0));
   if ($1633) { var $1644 = 1;label = 350; break; } else { label = 347; break; }
  case 347: 
   var $1635=$result;
   var $1636=$value1;
   var $1637=(($1635)|(0))==(($1636)|(0));
   if ($1637) { label = 348; break; } else { var $1642 = 0;label = 349; break; }
  case 348: 
   var $1639=$FC;
   var $1640=(($1639)|(0))!=0;
   var $1642 = $1640;label = 349; break;
  case 349: 
   var $1642;
   var $1644 = $1642;label = 350; break;
  case 350: 
   var $1644;
   var $1645=(($1644)&(1));
   var $1646=$result;
   var $1647=$1646 & -2147483648;
   var $1648=$1645 | $1647;
   var $1650 = $1648;label = 351; break;
  case 351: 
   var $1650;
   var $1651=$2;
   var $1652=(($1651+36)|0);
   HEAP32[(($1652)>>2)]=$1650;
   var $1653=$cmd;
   var $1654=(($1653+4)|0);
   var $1655=HEAP32[(($1654)>>2)];
   var $1656=(($1655)|(0))!=0;
   if ($1656) { label = 352; break; } else { label = 353; break; }
  case 352: 
   var $1658=$result;
   var $1659=(($1658) & 255);
   var $1660=$op1;
   var $1661=$1660;
   HEAP8[($1661)]=$1659;
   var $1662=(($1659)&(255));
   var $1667 = $1662;label = 354; break;
  case 353: 
   var $1664=$result;
   var $1665=$op1;
   HEAP32[(($1665)>>2)]=$1664;
   var $1667 = $1664;label = 354; break;
  case 354: 
   var $1667;
   label = 364; break;
  case 355: 
   var $1669=$2;
   var $1670=(($1669+4)|0);
   var $1671=(($1670+28)|0);
   var $1672=HEAP32[(($1671)>>2)];
   var $1673=(($1672)>>>(0)) >= 262144;
   if ($1673) { label = 356; break; } else { label = 357; break; }
  case 356: 
   $1=1;
   label = 365; break;
  case 357: 
   var $1676=$2;
   var $1677=(($1676+4)|0);
   var $1678=(($1677+28)|0);
   var $1679=HEAP32[(($1678)>>2)];
   var $1680=$1679 & 262143;
   var $1681=$2;
   var $1682=(($1681)|0);
   var $1683=HEAP32[(($1682)>>2)];
   var $1684=(($1683+$1680)|0);
   var $1685=$1684;
   var $1686=HEAP32[(($1685)>>2)];
   var $1687=$4;
   var $1688=(($1686)>>>(0)) >= (($1687)>>>(0));
   if ($1688) { label = 358; break; } else { label = 359; break; }
  case 358: 
   $1=1;
   label = 365; break;
  case 359: 
   var $1691=$max_ops;
   var $1692=((($1691)-(1))|0);
   $max_ops=$1692;
   var $1693=(($1692)|(0)) <= 0;
   if ($1693) { label = 360; break; } else { label = 361; break; }
  case 360: 
   $1=0;
   label = 365; break;
  case 361: 
   var $1696=$3;
   var $1697=$2;
   var $1698=(($1697+4)|0);
   var $1699=(($1698+28)|0);
   var $1700=HEAP32[(($1699)>>2)];
   var $1701=$1700 & 262143;
   var $1702=$2;
   var $1703=(($1702)|0);
   var $1704=HEAP32[(($1703)>>2)];
   var $1705=(($1704+$1701)|0);
   var $1706=$1705;
   var $1707=HEAP32[(($1706)>>2)];
   var $1708=(($1696+((($1707)*(40))&-1))|0);
   $cmd=$1708;
   var $1709=$2;
   var $1710=(($1709+4)|0);
   var $1711=(($1710+28)|0);
   var $1712=HEAP32[(($1711)>>2)];
   var $1713=((($1712)+(4))|0);
   HEAP32[(($1711)>>2)]=$1713;
   label = 2; break;
  case 362: 
   var $1715=$2;
   var $1716=$cmd;
   var $1717=(($1716+8)|0);
   var $1718=(($1717+4)|0);
   var $1719=HEAP32[(($1718)>>2)];
   _execute_standard_filter($1715, $1719);
   label = 364; break;
  case 363: 
   label = 364; break;
  case 364: 
   var $1722=$cmd;
   var $1723=(($1722+40)|0);
   $cmd=$1723;
   var $1724=$max_ops;
   var $1725=((($1724)-(1))|0);
   $max_ops=$1725;
   label = 2; break;
  case 365: 
   var $1727=$1;
   return $1727;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_optimize($prg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $code;
   var $cmd;
   var $code_size;
   var $i;
   var $flags_required;
   var $j;
   var $flags;
   $1=$prg;
   var $2=$1;
   var $3=(($2)|0);
   var $4=(($3)|0);
   var $5=HEAP32[(($4)>>2)];
   $code=$5;
   var $6=$1;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   $code_size=$8;
   $i=0;
   label = 2; break;
  case 2: 
   var $10=$i;
   var $11=$code_size;
   var $12=(($10)|(0)) < (($11)|(0));
   if ($12) { label = 3; break; } else { label = 26; break; }
  case 3: 
   var $14=$i;
   var $15=$code;
   var $16=(($15+((($14)*(40))&-1))|0);
   $cmd=$16;
   var $17=$cmd;
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   if ((($19)|(0))==0) {
    label = 4; break;
   }
   else if ((($19)|(0))==1) {
    label = 5; break;
   }
   else {
   label = 6; break;
   }
  case 4: 
   var $21=$cmd;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))!=0;
   var $25=$24 ? 40 : 41;
   var $26=$cmd;
   var $27=(($26)|0);
   HEAP32[(($27)>>2)]=$25;
   label = 25; break;
  case 5: 
   var $29=$cmd;
   var $30=(($29+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))!=0;
   var $33=$32 ? 42 : 43;
   var $34=$cmd;
   var $35=(($34)|0);
   HEAP32[(($35)>>2)]=$33;
   label = 25; break;
  case 6: 
   var $37=$cmd;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=((8+$39)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=$42 & 64;
   var $44=(($43)|(0))==0;
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 25; break;
  case 8: 
   $flags_required=0;
   var $47=$i;
   var $48=((($47)+(1))|0);
   $j=$48;
   label = 9; break;
  case 9: 
   var $50=$j;
   var $51=$code_size;
   var $52=(($50)|(0)) < (($51)|(0));
   if ($52) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $54=$j;
   var $55=$code;
   var $56=(($55+((($54)*(40))&-1))|0);
   var $57=(($56)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=((8+$58)|0);
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   $flags=$61;
   var $62=$flags;
   var $63=$62 & 56;
   var $64=(($63)|(0))!=0;
   if ($64) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $flags_required=1;
   label = 16; break;
  case 12: 
   var $67=$flags;
   var $68=$67 & 64;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 16; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $73=$j;
   var $74=((($73)+(1))|0);
   $j=$74;
   label = 9; break;
  case 16: 
   var $76=$flags_required;
   var $77=(($76)|(0))!=0;
   if ($77) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 25; break;
  case 18: 
   var $80=$cmd;
   var $81=(($80)|0);
   var $82=HEAP32[(($81)>>2)];
   if ((($82)|(0))==2) {
    label = 19; break;
   }
   else if ((($82)|(0))==3) {
    label = 20; break;
   }
   else if ((($82)|(0))==6) {
    label = 21; break;
   }
   else if ((($82)|(0))==7) {
    label = 22; break;
   }
   else if ((($82)|(0))==27) {
    label = 23; break;
   }
   else {
   label = 24; break;
   }
  case 19: 
   var $84=$cmd;
   var $85=(($84+4)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86)|(0))!=0;
   var $88=$87 ? 44 : 45;
   var $89=$cmd;
   var $90=(($89)|0);
   HEAP32[(($90)>>2)]=$88;
   label = 25; break;
  case 20: 
   var $92=$cmd;
   var $93=(($92+4)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94)|(0))!=0;
   var $96=$95 ? 46 : 47;
   var $97=$cmd;
   var $98=(($97)|0);
   HEAP32[(($98)>>2)]=$96;
   label = 25; break;
  case 21: 
   var $100=$cmd;
   var $101=(($100+4)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))!=0;
   var $104=$103 ? 48 : 49;
   var $105=$cmd;
   var $106=(($105)|0);
   HEAP32[(($106)>>2)]=$104;
   label = 25; break;
  case 22: 
   var $108=$cmd;
   var $109=(($108+4)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110)|(0))!=0;
   var $112=$111 ? 50 : 51;
   var $113=$cmd;
   var $114=(($113)|0);
   HEAP32[(($114)>>2)]=$112;
   label = 25; break;
  case 23: 
   var $116=$cmd;
   var $117=(($116+4)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118)|(0))!=0;
   var $120=$119 ? 52 : 53;
   var $121=$cmd;
   var $122=(($121)|0);
   HEAP32[(($122)>>2)]=$120;
   label = 25; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $125=$i;
   var $126=((($125)+(1))|0);
   $i=$126;
   label = 2; break;
  case 26: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_decode_arg($rarvm_data, $rarvm_input, $op, $byte_mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $data;
   $1=$rarvm_data;
   $2=$rarvm_input;
   $3=$op;
   $4=$byte_mode;
   var $5=$2;
   var $6=_rarvm_getbits($5);
   var $7=(($6) & 65535);
   $data=$7;
   var $8=$data;
   var $9=(($8)&(65535));
   var $10=$9 & 32768;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$3;
   var $14=(($13)|0);
   HEAP32[(($14)>>2)]=0;
   var $15=$data;
   var $16=(($15)&(65535));
   var $17=$16 >> 12;
   var $18=$17 & 7;
   var $19=$3;
   var $20=(($19+4)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$3;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$1;
   var $25=(($24+4)|0);
   var $26=(($25+($23<<2))|0);
   var $27=$3;
   var $28=(($27+12)|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=$2;
   _rarvm_addbits($29, 4);
   label = 16; break;
  case 3: 
   var $31=$data;
   var $32=(($31)&(65535));
   var $33=$32 & 49152;
   var $34=(($33)|(0))==0;
   if ($34) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $36=$3;
   var $37=(($36)|0);
   HEAP32[(($37)>>2)]=1;
   var $38=$4;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $41=$data;
   var $42=(($41)&(65535));
   var $43=$42 >> 6;
   var $44=$43 & 255;
   var $45=$3;
   var $46=(($45+4)|0);
   HEAP32[(($46)>>2)]=$44;
   var $47=$2;
   _rarvm_addbits($47, 10);
   label = 7; break;
  case 6: 
   var $49=$2;
   _rarvm_addbits($49, 2);
   var $50=$2;
   var $51=_rarvm_read_data($50);
   var $52=$3;
   var $53=(($52+4)|0);
   HEAP32[(($53)>>2)]=$51;
   label = 7; break;
  case 7: 
   label = 15; break;
  case 8: 
   var $56=$3;
   var $57=(($56)|0);
   HEAP32[(($57)>>2)]=2;
   var $58=$data;
   var $59=(($58)&(65535));
   var $60=$59 & 8192;
   var $61=(($60)|(0))==0;
   if ($61) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $63=$data;
   var $64=(($63)&(65535));
   var $65=$64 >> 10;
   var $66=$65 & 7;
   var $67=$3;
   var $68=(($67+4)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$3;
   var $70=(($69+4)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$1;
   var $73=(($72+4)|0);
   var $74=(($73+($71<<2))|0);
   var $75=$3;
   var $76=(($75+12)|0);
   HEAP32[(($76)>>2)]=$74;
   var $77=$3;
   var $78=(($77+8)|0);
   HEAP32[(($78)>>2)]=0;
   var $79=$2;
   _rarvm_addbits($79, 6);
   label = 14; break;
  case 10: 
   var $81=$data;
   var $82=(($81)&(65535));
   var $83=$82 & 4096;
   var $84=(($83)|(0))==0;
   if ($84) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $86=$data;
   var $87=(($86)&(65535));
   var $88=$87 >> 9;
   var $89=$88 & 7;
   var $90=$3;
   var $91=(($90+4)|0);
   HEAP32[(($91)>>2)]=$89;
   var $92=$3;
   var $93=(($92+4)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=$1;
   var $96=(($95+4)|0);
   var $97=(($96+($94<<2))|0);
   var $98=$3;
   var $99=(($98+12)|0);
   HEAP32[(($99)>>2)]=$97;
   var $100=$2;
   _rarvm_addbits($100, 7);
   label = 13; break;
  case 12: 
   var $102=$3;
   var $103=(($102+4)|0);
   HEAP32[(($103)>>2)]=0;
   var $104=$2;
   _rarvm_addbits($104, 4);
   label = 13; break;
  case 13: 
   var $106=$2;
   var $107=_rarvm_read_data($106);
   var $108=$3;
   var $109=(($108+8)|0);
   HEAP32[(($109)>>2)]=$107;
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_get_operand($rarvm_data, $cmd_op) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$rarvm_data;
   $3=$cmd_op;
   var $4=$3;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==2;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$3;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=HEAP32[(($11)>>2)];
   var $13=$3;
   var $14=(($13+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=((($12)+($15))|0);
   var $17=$16 & 262143;
   var $18=$2;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+$17)|0);
   var $22=$21;
   $1=$22;
   label = 4; break;
  case 3: 
   var $24=$3;
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   $1=$26;
   label = 4; break;
  case 4: 
   var $28=$1;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _rarvm_prepare($rarvm_data, $rarvm_input, $code, $code_size, $prg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $xor_sum;
   var $i;
   var $op_num;
   var $distance;
   var $filter_type;
   var $cur_cmd;
   var $data_flag;
   var $data;
   var $cmd;
   var $data_size;
   $2=$rarvm_data;
   $3=$rarvm_input;
   $4=$code;
   $5=$code_size;
   $6=$prg;
   var $7=$5;
   _rar_dbgmsg37();
   var $8=$3;
   var $9=(($8+12)|0);
   HEAP32[(($9)>>2)]=0;
   var $10=$3;
   var $11=(($10+8)|0);
   HEAP32[(($11)>>2)]=0;
   var $12=$3;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$4;
   var $16=$5;
   var $17=(($16)|(0)) < 32768;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$5;
   var $22 = $19;label = 4; break;
  case 3: 
   var $22 = 32768;label = 4; break;
  case 4: 
   var $22;
   assert($22 % 1 === 0);(_memcpy($14, $15, $22)|0);
   $xor_sum=0;
   $i=1;
   label = 5; break;
  case 5: 
   var $24=$i;
   var $25=$5;
   var $26=(($24)|(0)) < (($25)|(0));
   if ($26) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $28=$i;
   var $29=$i;
   var $30=$4;
   var $31=(($30+$29)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   _rar_dbgmsg37();
   var $34=$i;
   var $35=$4;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=$xor_sum;
   var $40=(($39)&(255));
   var $41=$40 ^ $38;
   var $42=(($41) & 255);
   $xor_sum=$42;
   label = 7; break;
  case 7: 
   var $44=$i;
   var $45=((($44)+(1))|0);
   $i=$45;
   label = 5; break;
  case 8: 
   var $47=$xor_sum;
   var $48=(($47)&(255));
   _rar_dbgmsg37();
   var $49=$3;
   _rarvm_addbits($49, 8);
   var $50=$6;
   var $51=(($50+12)|0);
   HEAP32[(($51)>>2)]=0;
   var $52=$xor_sum;
   var $53=(($52)&(255));
   var $54=$4;
   var $55=(($54)|0);
   var $56=HEAP8[($55)];
   var $57=(($56)&(255));
   var $58=(($53)|(0))==(($57)|(0));
   if ($58) { label = 9; break; } else { label = 52; break; }
  case 9: 
   var $60=$4;
   var $61=$5;
   var $62=_is_standard_filter($60, $61);
   $filter_type=$62;
   var $63=$filter_type;
   _rar_dbgmsg37();
   var $64=$filter_type;
   var $65=(($64)|(0))!=0;
   if ($65) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $67=$6;
   var $68=(($67)|0);
   var $69=_rar_cmd_array_add($68, 1);
   var $70=$6;
   var $71=(($70+12)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=((($72)+(1))|0);
   HEAP32[(($71)>>2)]=$73;
   var $74=$6;
   var $75=(($74)|0);
   var $76=(($75)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+((($72)*(40))&-1))|0);
   $cur_cmd=$78;
   var $79=$cur_cmd;
   var $80=(($79)|0);
   HEAP32[(($80)>>2)]=54;
   var $81=$filter_type;
   var $82=$cur_cmd;
   var $83=(($82+8)|0);
   var $84=(($83+4)|0);
   HEAP32[(($84)>>2)]=$81;
   var $85=$cur_cmd;
   var $86=(($85+8)|0);
   var $87=(($86+4)|0);
   var $88=$cur_cmd;
   var $89=(($88+8)|0);
   var $90=(($89+12)|0);
   HEAP32[(($90)>>2)]=$87;
   var $91=$cur_cmd;
   var $92=(($91+24)|0);
   var $93=(($92+4)|0);
   var $94=$cur_cmd;
   var $95=(($94+24)|0);
   var $96=(($95+12)|0);
   HEAP32[(($96)>>2)]=$93;
   var $97=$cur_cmd;
   var $98=(($97+24)|0);
   var $99=(($98)|0);
   HEAP32[(($99)>>2)]=3;
   var $100=$cur_cmd;
   var $101=(($100+8)|0);
   var $102=(($101)|0);
   HEAP32[(($102)>>2)]=3;
   $5=0;
   label = 11; break;
  case 11: 
   var $104=$3;
   var $105=_rarvm_getbits($104);
   $data_flag=$105;
   var $106=$data_flag;
   _rar_dbgmsg37();
   var $107=$3;
   _rarvm_addbits($107, 1);
   var $108=$data_flag;
   var $109=$108 & 32768;
   var $110=(($109)|(0))!=0;
   if ($110) { label = 12; break; } else { label = 23; break; }
  case 12: 
   var $112=$3;
   var $113=_rarvm_read_data($112);
   var $114=((($113)+(1))|0);
   $data_size=$114;
   var $115=$data_size;
   _rar_dbgmsg37();
   var $116=$data_size;
   var $117=_malloc($116);
   var $118=$6;
   var $119=(($118+20)|0);
   HEAP32[(($119)>>2)]=$117;
   var $120=$6;
   var $121=(($120+20)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122)|(0))!=0;
   if ($123) { label = 14; break; } else { label = 13; break; }
  case 13: 
   $1=0;
   label = 63; break;
  case 14: 
   $i=0;
   label = 15; break;
  case 15: 
   var $127=$3;
   var $128=(($127+8)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$5;
   var $131=(($129)|(0)) < (($130)|(0));
   if ($131) { label = 16; break; } else { var $137 = 0;label = 17; break; }
  case 16: 
   var $133=$i;
   var $134=$data_size;
   var $135=(($133)|(0)) < (($134)|(0));
   var $137 = $135;label = 17; break;
  case 17: 
   var $137;
   if ($137) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $139=$6;
   var $140=(($139+28)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=((($141)+(1))|0);
   HEAP32[(($140)>>2)]=$142;
   var $143=$6;
   var $144=(($143+20)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=$6;
   var $147=(($146+28)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=_realloc($145, $148);
   var $150=$6;
   var $151=(($150+20)|0);
   HEAP32[(($151)>>2)]=$149;
   var $152=$6;
   var $153=(($152+20)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154)|(0))!=0;
   if ($155) { label = 20; break; } else { label = 19; break; }
  case 19: 
   $1=0;
   label = 63; break;
  case 20: 
   var $158=$3;
   var $159=_rarvm_getbits($158);
   var $160=$159 >>> 8;
   var $161=(($160) & 255);
   var $162=$i;
   var $163=$6;
   var $164=(($163+20)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165+$162)|0);
   HEAP8[($166)]=$161;
   var $167=$3;
   _rarvm_addbits($167, 8);
   label = 21; break;
  case 21: 
   var $169=$i;
   var $170=((($169)+(1))|0);
   $i=$170;
   label = 15; break;
  case 22: 
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $174=$3;
   var $175=(($174+8)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=$5;
   var $178=(($176)|(0)) < (($177)|(0));
   if ($178) { label = 25; break; } else { label = 51; break; }
  case 25: 
   var $180=$6;
   var $181=(($180)|0);
   var $182=_rar_cmd_array_add($181, 1);
   var $183=$6;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=$6;
   var $187=(($186)|0);
   var $188=(($187)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+((($185)*(40))&-1))|0);
   $cur_cmd=$190;
   var $191=$3;
   var $192=_rarvm_getbits($191);
   $data=$192;
   var $193=$data;
   _rar_dbgmsg37();
   var $194=$data;
   var $195=$194 & 32768;
   var $196=(($195)|(0))==0;
   if ($196) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $198=$data;
   var $199=$198 >>> 12;
   var $200=$cur_cmd;
   var $201=(($200)|0);
   HEAP32[(($201)>>2)]=$199;
   var $202=$3;
   _rarvm_addbits($202, 4);
   label = 28; break;
  case 27: 
   var $204=$data;
   var $205=$204 >>> 10;
   var $206=((($205)-(24))|0);
   var $207=$cur_cmd;
   var $208=(($207)|0);
   HEAP32[(($208)>>2)]=$206;
   var $209=$3;
   _rarvm_addbits($209, 6);
   label = 28; break;
  case 28: 
   var $211=$cur_cmd;
   var $212=(($211)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=((8+$213)|0);
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 4;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $220=$3;
   var $221=_rarvm_getbits($220);
   var $222=$221 >>> 15;
   var $223=$cur_cmd;
   var $224=(($223+4)|0);
   HEAP32[(($224)>>2)]=$222;
   var $225=$3;
   _rarvm_addbits($225, 1);
   label = 31; break;
  case 30: 
   var $227=$cur_cmd;
   var $228=(($227+4)|0);
   HEAP32[(($228)>>2)]=0;
   label = 31; break;
  case 31: 
   var $230=$cur_cmd;
   var $231=(($230+24)|0);
   var $232=(($231)|0);
   HEAP32[(($232)>>2)]=3;
   var $233=$cur_cmd;
   var $234=(($233+8)|0);
   var $235=(($234)|0);
   HEAP32[(($235)>>2)]=3;
   var $236=$cur_cmd;
   var $237=(($236)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=((8+$238)|0);
   var $240=HEAP8[($239)];
   var $241=(($240)&(255));
   var $242=$241 & 3;
   $op_num=$242;
   var $243=$op_num;
   _rar_dbgmsg37();
   var $244=$cur_cmd;
   var $245=(($244+24)|0);
   var $246=(($245+12)|0);
   HEAP32[(($246)>>2)]=0;
   var $247=$cur_cmd;
   var $248=(($247+8)|0);
   var $249=(($248+12)|0);
   HEAP32[(($249)>>2)]=0;
   var $250=$op_num;
   var $251=(($250)|(0)) > 0;
   if ($251) { label = 32; break; } else { label = 50; break; }
  case 32: 
   var $253=$2;
   var $254=$3;
   var $255=$cur_cmd;
   var $256=(($255+8)|0);
   var $257=$cur_cmd;
   var $258=(($257+4)|0);
   var $259=HEAP32[(($258)>>2)];
   _rarvm_decode_arg($253, $254, $256, $259);
   var $260=$op_num;
   var $261=(($260)|(0))==2;
   if ($261) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $263=$2;
   var $264=$3;
   var $265=$cur_cmd;
   var $266=(($265+24)|0);
   var $267=$cur_cmd;
   var $268=(($267+4)|0);
   var $269=HEAP32[(($268)>>2)];
   _rarvm_decode_arg($263, $264, $266, $269);
   label = 49; break;
  case 34: 
   var $271=$cur_cmd;
   var $272=(($271+8)|0);
   var $273=(($272)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($274)|(0))==1;
   if ($275) { label = 35; break; } else { label = 48; break; }
  case 35: 
   var $277=$cur_cmd;
   var $278=(($277)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=((8+$279)|0);
   var $281=HEAP8[($280)];
   var $282=(($281)&(255));
   var $283=$282 & 24;
   var $284=(($283)|(0))!=0;
   if ($284) { label = 36; break; } else { label = 48; break; }
  case 36: 
   var $286=$cur_cmd;
   var $287=(($286+8)|0);
   var $288=(($287+4)|0);
   var $289=HEAP32[(($288)>>2)];
   $distance=$289;
   var $290=$distance;
   _rar_dbgmsg37();
   var $291=$distance;
   var $292=(($291)|(0)) >= 256;
   if ($292) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $294=$distance;
   var $295=((($294)-(256))|0);
   $distance=$295;
   label = 47; break;
  case 38: 
   var $297=$distance;
   var $298=(($297)|(0)) >= 136;
   if ($298) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $300=$distance;
   var $301=((($300)-(264))|0);
   $distance=$301;
   label = 46; break;
  case 40: 
   var $303=$distance;
   var $304=(($303)|(0)) >= 16;
   if ($304) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $306=$distance;
   var $307=((($306)-(8))|0);
   $distance=$307;
   label = 45; break;
  case 42: 
   var $309=$distance;
   var $310=(($309)|(0)) >= 8;
   if ($310) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $312=$distance;
   var $313=((($312)-(16))|0);
   $distance=$313;
   label = 44; break;
  case 44: 
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $317=$6;
   var $318=(($317+12)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=$distance;
   var $321=((($320)+($319))|0);
   $distance=$321;
   label = 47; break;
  case 47: 
   var $323=$distance;
   _rar_dbgmsg37();
   var $324=$distance;
   var $325=$cur_cmd;
   var $326=(($325+8)|0);
   var $327=(($326+4)|0);
   HEAP32[(($327)>>2)]=$324;
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $331=$6;
   var $332=(($331+12)|0);
   var $333=HEAP32[(($332)>>2)];
   var $334=((($333)+(1))|0);
   HEAP32[(($332)>>2)]=$334;
   label = 24; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $337=$6;
   var $338=(($337)|0);
   var $339=_rar_cmd_array_add($338, 1);
   var $340=$6;
   var $341=(($340+12)|0);
   var $342=HEAP32[(($341)>>2)];
   var $343=((($342)+(1))|0);
   HEAP32[(($341)>>2)]=$343;
   var $344=$6;
   var $345=(($344)|0);
   var $346=(($345)|0);
   var $347=HEAP32[(($346)>>2)];
   var $348=(($347+((($342)*(40))&-1))|0);
   $cur_cmd=$348;
   var $349=$cur_cmd;
   var $350=(($349)|0);
   HEAP32[(($350)>>2)]=22;
   var $351=$cur_cmd;
   var $352=(($351+8)|0);
   var $353=(($352+4)|0);
   var $354=$cur_cmd;
   var $355=(($354+8)|0);
   var $356=(($355+12)|0);
   HEAP32[(($356)>>2)]=$353;
   var $357=$cur_cmd;
   var $358=(($357+24)|0);
   var $359=(($358+4)|0);
   var $360=$cur_cmd;
   var $361=(($360+24)|0);
   var $362=(($361+12)|0);
   HEAP32[(($362)>>2)]=$359;
   var $363=$cur_cmd;
   var $364=(($363+24)|0);
   var $365=(($364)|0);
   HEAP32[(($365)>>2)]=3;
   var $366=$cur_cmd;
   var $367=(($366+8)|0);
   var $368=(($367)|0);
   HEAP32[(($368)>>2)]=3;
   $i=0;
   label = 53; break;
  case 53: 
   var $370=$i;
   var $371=$6;
   var $372=(($371+12)|0);
   var $373=HEAP32[(($372)>>2)];
   var $374=(($370)|(0)) < (($373)|(0));
   if ($374) { label = 54; break; } else { label = 60; break; }
  case 54: 
   var $376=$i;
   var $377=$6;
   var $378=(($377)|0);
   var $379=(($378)|0);
   var $380=HEAP32[(($379)>>2)];
   var $381=(($380+((($376)*(40))&-1))|0);
   $cmd=$381;
   var $382=$i;
   var $383=$cmd;
   var $384=(($383)|0);
   var $385=HEAP32[(($384)>>2)];
   _rar_dbgmsg37();
   var $386=$cmd;
   var $387=(($386+8)|0);
   var $388=(($387+12)|0);
   var $389=HEAP32[(($388)>>2)];
   var $390=(($389)|(0))==0;
   if ($390) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $392=$cmd;
   var $393=(($392+8)|0);
   var $394=(($393+4)|0);
   var $395=$cmd;
   var $396=(($395+8)|0);
   var $397=(($396+12)|0);
   HEAP32[(($397)>>2)]=$394;
   label = 56; break;
  case 56: 
   var $399=$cmd;
   var $400=(($399+24)|0);
   var $401=(($400+12)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=(($402)|(0))==0;
   if ($403) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $405=$cmd;
   var $406=(($405+24)|0);
   var $407=(($406+4)|0);
   var $408=$cmd;
   var $409=(($408+24)|0);
   var $410=(($409+12)|0);
   HEAP32[(($410)>>2)]=$407;
   label = 58; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $413=$i;
   var $414=((($413)+(1))|0);
   $i=$414;
   label = 53; break;
  case 60: 
   var $416=$5;
   var $417=(($416)|(0))!=0;
   if ($417) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $419=$6;
   _rarvm_optimize($419);
   label = 62; break;
  case 62: 
   $1=1;
   label = 63; break;
  case 63: 
   var $422=$1;
   return $422;
  default: assert(0, "bad label: " + label);
 }
}
function _is_standard_filter($code, $code_size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $code_crc;
   var $i;
   var $std_filt_list=sp;
   $2=$code;
   $3=$code_size;
   var $4=$std_filt_list;
   assert(84 % 1 === 0);(_memcpy($4, 1656, 84)|0);
   var $5=$2;
   var $6=$3;
   var $7=_rar_crc(-1, $5, $6);
   var $8=$7 ^ -1;
   $code_crc=$8;
   var $9=$code_crc;
   _rar_dbgmsg37();
   $i=0;
   label = 2; break;
  case 2: 
   var $11=$i;
   var $12=(($11)>>>(0)) < 7;
   if ($12) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $14=$i;
   var $15=(($std_filt_list+((($14)*(12))&-1))|0);
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$code_crc;
   var $19=(($17)|(0))==(($18)|(0));
   if ($19) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $21=$i;
   var $22=(($std_filt_list+((($21)*(12))&-1))|0);
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$3;
   var $26=(($24)|(0))==(($25)|(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $28=$i;
   var $29=(($std_filt_list+((($28)*(12))&-1))|0);
   var $30=(($29+8)|0);
   var $31=HEAP32[(($30)>>2)];
   $1=$31;
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $34=$i;
   var $35=((($34)+(1))|0);
   $i=$35;
   label = 2; break;
  case 8: 
   $1=0;
   label = 9; break;
  case 9: 
   var $38=$1;
   STACKTOP = sp;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _execute_standard_filter($rarvm_data, $filter_type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $data;
   var $cmp_byte2;
   var $cur_byte;
   var $src_data;
   var $dest_data;
   var $i;
   var $j;
   var $data_size;
   var $channels;
   var $src_pos;
   var $dest_pos;
   var $border;
   var $width;
   var $PosR;
   var $op_type;
   var $cur_channel;
   var $byte_count;
   var $start_pos;
   var $pa;
   var $pb;
   var $pc;
   var $file_offset;
   var $cur_pos;
   var $predicted;
   var $offset;
   var $addr;
   var $file_size;
   var $Byte;
   var $cmd_mask;
   var $prev_byte;
   var $channels1;
   var $prev_byte2;
   var $upper_pos;
   var $upper_data;
   var $upper_byte;
   var $upper_left_byte;
   var $g;
   var $channels3;
   var $prev_byte4;
   var $prev_delta;
   var $Dif=sp;
   var $D;
   var $D1;
   var $D2;
   var $D3;
   var $K1;
   var $K2;
   var $K3;
   var $min_dif;
   var $num_min_dif;
   $1=$rarvm_data;
   $2=$filter_type;
   $file_size=16777216;
   var $3=$2;
   if ((($3)|(0))==1 | (($3)|(0))==2) {
    label = 2; break;
   }
   else if ((($3)|(0))==3) {
    label = 19; break;
   }
   else if ((($3)|(0))==6) {
    label = 38; break;
   }
   else if ((($3)|(0))==4) {
    label = 49; break;
   }
   else if ((($3)|(0))==5) {
    label = 74; break;
   }
   else if ((($3)|(0))==7) {
    label = 112; break;
   }
   else {
   label = 121; break;
   }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $data=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=(($9+16)|0);
   var $11=HEAP32[(($10)>>2)];
   $data_size=$11;
   var $12=$1;
   var $13=(($12+4)|0);
   var $14=(($13+24)|0);
   var $15=HEAP32[(($14)>>2)];
   $file_offset=$15;
   var $16=$data_size;
   var $17=(($16)|(0)) >= 245760;
   if ($17) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $19=$data_size;
   var $20=(($19)|(0)) < 4;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 121; break;
  case 5: 
   var $23=$2;
   var $24=(($23)|(0))==2;
   var $25=$24 ? 233 : 232;
   var $26=(($25) & 255);
   $cmp_byte2=$26;
   $cur_pos=0;
   label = 6; break;
  case 6: 
   var $28=$cur_pos;
   var $29=$data_size;
   var $30=((($29)-(4))|0);
   var $31=(($28)>>>(0)) < (($30)>>>(0));
   if ($31) { label = 7; break; } else { label = 18; break; }
  case 7: 
   var $33=$data;
   var $34=(($33+1)|0);
   $data=$34;
   var $35=HEAP8[($33)];
   $cur_byte=$35;
   var $36=$cur_pos;
   var $37=((($36)+(1))|0);
   $cur_pos=$37;
   var $38=$cur_byte;
   var $39=(($38)&(255));
   var $40=(($39)|(0))==232;
   if ($40) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $42=$cur_byte;
   var $43=(($42)&(255));
   var $44=$cmp_byte2;
   var $45=(($44)&(255));
   var $46=(($43)|(0))==(($45)|(0));
   if ($46) { label = 9; break; } else { label = 17; break; }
  case 9: 
   var $48=$cur_pos;
   var $49=$file_offset;
   var $50=((($48)+($49))|0);
   $offset=$50;
   var $51=$data;
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   $addr=$53;
   var $54=$addr;
   var $55=(($54)|(0)) < 0;
   if ($55) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $57=$addr;
   var $58=$offset;
   var $59=((($57)+($58))|0);
   var $60=(($59)|(0)) >= 0;
   if ($60) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $62=$addr;
   var $63=((($62)+(16777216))|0);
   var $64=$data;
   var $65=$64;
   HEAP32[(($65)>>2)]=$63;
   label = 12; break;
  case 12: 
   label = 16; break;
  case 13: 
   var $68=$addr;
   var $69=(($68)|(0)) < 16777216;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$addr;
   var $72=$offset;
   var $73=((($71)-($72))|0);
   var $74=$data;
   var $75=$74;
   HEAP32[(($75)>>2)]=$73;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $78=$data;
   var $79=(($78+4)|0);
   $data=$79;
   var $80=$cur_pos;
   var $81=((($80)+(4))|0);
   $cur_pos=$81;
   label = 17; break;
  case 17: 
   label = 6; break;
  case 18: 
   label = 121; break;
  case 19: 
   var $85=$1;
   var $86=(($85)|0);
   var $87=HEAP32[(($86)>>2)];
   $data=$87;
   var $88=$1;
   var $89=(($88+4)|0);
   var $90=(($89+16)|0);
   var $91=HEAP32[(($90)>>2)];
   $data_size=$91;
   var $92=$1;
   var $93=(($92+4)|0);
   var $94=(($93+24)|0);
   var $95=HEAP32[(($94)>>2)];
   $file_offset=$95;
   var $96=$data_size;
   var $97=(($96)|(0)) >= 245760;
   if ($97) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $99=$data_size;
   var $100=(($99)|(0)) < 21;
   if ($100) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 121; break;
  case 22: 
   $cur_pos=0;
   var $103=$file_offset;
   var $104=$103 >>> 4;
   $file_offset=$104;
   label = 23; break;
  case 23: 
   var $106=$cur_pos;
   var $107=$data_size;
   var $108=((($107)-(21))|0);
   var $109=(($106)>>>(0)) < (($108)>>>(0));
   if ($109) { label = 24; break; } else { label = 37; break; }
  case 24: 
   var $111=$data;
   var $112=(($111)|0);
   var $113=HEAP8[($112)];
   var $114=(($113)&(255));
   var $115=$114 & 31;
   var $116=((($115)-(16))|0);
   $Byte=$116;
   var $117=$Byte;
   var $118=(($117)|(0)) >= 0;
   if ($118) { label = 25; break; } else { label = 36; break; }
  case 25: 
   var $120=$Byte;
   var $121=((1816+$120)|0);
   var $122=HEAP8[($121)];
   $cmd_mask=$122;
   var $123=$cmd_mask;
   var $124=(($123)&(255));
   var $125=(($124)|(0))!=0;
   if ($125) { label = 26; break; } else { label = 35; break; }
  case 26: 
   $i=0;
   label = 27; break;
  case 27: 
   var $128=$i;
   var $129=(($128)|(0)) <= 2;
   if ($129) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $131=$cmd_mask;
   var $132=(($131)&(255));
   var $133=$i;
   var $134=1 << $133;
   var $135=$132 & $134;
   var $136=(($135)|(0))!=0;
   if ($136) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $138=$i;
   var $139=((($138)*(41))&-1);
   var $140=((($139)+(5))|0);
   $start_pos=$140;
   var $141=$data;
   var $142=$start_pos;
   var $143=((($142)+(37))|0);
   var $144=_filter_itanium_getbits($141, $143, 4);
   $op_type=$144;
   var $145=$op_type;
   var $146=(($145)|(0))==5;
   if ($146) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $148=$data;
   var $149=$start_pos;
   var $150=((($149)+(13))|0);
   var $151=_filter_itanium_getbits($148, $150, 20);
   $offset=$151;
   var $152=$data;
   var $153=$offset;
   var $154=$file_offset;
   var $155=((($153)-($154))|0);
   var $156=$155 & 1048575;
   var $157=$start_pos;
   var $158=((($157)+(13))|0);
   _filter_itanium_setbits($152, $156, $158, 20);
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $162=$i;
   var $163=((($162)+(1))|0);
   $i=$163;
   label = 27; break;
  case 34: 
   label = 35; break;
  case 35: 
   label = 36; break;
  case 36: 
   var $167=$data;
   var $168=(($167+16)|0);
   $data=$168;
   var $169=$cur_pos;
   var $170=((($169)+(16))|0);
   $cur_pos=$170;
   var $171=$file_offset;
   var $172=((($171)+(1))|0);
   $file_offset=$172;
   label = 23; break;
  case 37: 
   label = 121; break;
  case 38: 
   var $175=$1;
   var $176=(($175+4)|0);
   var $177=(($176+16)|0);
   var $178=HEAP32[(($177)>>2)];
   $data_size=$178;
   var $179=$1;
   var $180=(($179+4)|0);
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $channels=$182;
   $src_pos=0;
   var $183=$data_size;
   var $184=($183<<1);
   $border=$184;
   var $185=$data_size;
   var $186=$1;
   var $187=(($186)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+245792)|0);
   var $190=$189;
   HEAP32[(($190)>>2)]=$185;
   var $191=$data_size;
   var $192=(($191)|(0)) >= 122880;
   if ($192) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 121; break;
  case 40: 
   $cur_channel=0;
   label = 41; break;
  case 41: 
   var $196=$cur_channel;
   var $197=$channels;
   var $198=(($196)|(0)) < (($197)|(0));
   if ($198) { label = 42; break; } else { label = 48; break; }
  case 42: 
   $prev_byte=0;
   var $200=$data_size;
   var $201=$cur_channel;
   var $202=((($200)+($201))|0);
   $dest_pos=$202;
   label = 43; break;
  case 43: 
   var $204=$dest_pos;
   var $205=$border;
   var $206=(($204)|(0)) < (($205)|(0));
   if ($206) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $208=$src_pos;
   var $209=((($208)+(1))|0);
   $src_pos=$209;
   var $210=$1;
   var $211=(($210)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212+$208)|0);
   var $214=HEAP8[($213)];
   var $215=(($214)&(255));
   var $216=$prev_byte;
   var $217=(($216)&(255));
   var $218=((($217)-($215))|0);
   var $219=(($218) & 255);
   $prev_byte=$219;
   var $220=$dest_pos;
   var $221=$1;
   var $222=(($221)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=(($223+$220)|0);
   HEAP8[($224)]=$219;
   label = 45; break;
  case 45: 
   var $226=$channels;
   var $227=$dest_pos;
   var $228=((($227)+($226))|0);
   $dest_pos=$228;
   label = 43; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $231=$cur_channel;
   var $232=((($231)+(1))|0);
   $cur_channel=$232;
   label = 41; break;
  case 48: 
   label = 121; break;
  case 49: 
   $channels1=3;
   var $235=$1;
   var $236=(($235+4)|0);
   var $237=(($236+16)|0);
   var $238=HEAP32[(($237)>>2)];
   $data_size=$238;
   var $239=$1;
   var $240=(($239+4)|0);
   var $241=(($240)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=((($242)-(3))|0);
   $width=$243;
   var $244=$1;
   var $245=(($244+4)|0);
   var $246=(($245+4)|0);
   var $247=HEAP32[(($246)>>2)];
   $PosR=$247;
   var $248=$1;
   var $249=(($248)|0);
   var $250=HEAP32[(($249)>>2)];
   $src_data=$250;
   var $251=$src_data;
   var $252=$data_size;
   var $253=(($251+$252)|0);
   $dest_data=$253;
   var $254=$data_size;
   var $255=$1;
   var $256=(($255)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257+245792)|0);
   var $259=$258;
   HEAP32[(($259)>>2)]=$254;
   var $260=$data_size;
   var $261=(($260)|(0)) >= 122880;
   if ($261) { label = 50; break; } else { label = 51; break; }
  case 50: 
   label = 121; break;
  case 51: 
   $cur_channel=0;
   label = 52; break;
  case 52: 
   var $265=$cur_channel;
   var $266=(($265)|(0)) < 3;
   if ($266) { label = 53; break; } else { label = 69; break; }
  case 53: 
   $prev_byte2=0;
   var $268=$cur_channel;
   $i=$268;
   label = 54; break;
  case 54: 
   var $270=$i;
   var $271=$data_size;
   var $272=(($270)|(0)) < (($271)|(0));
   if ($272) { label = 55; break; } else { label = 67; break; }
  case 55: 
   var $274=$i;
   var $275=$width;
   var $276=((($274)-($275))|0);
   $upper_pos=$276;
   var $277=$upper_pos;
   var $278=(($277)|(0)) >= 3;
   if ($278) { label = 56; break; } else { label = 64; break; }
  case 56: 
   var $280=$dest_data;
   var $281=$upper_pos;
   var $282=(($280+$281)|0);
   $upper_data=$282;
   var $283=$upper_data;
   var $284=HEAP8[($283)];
   var $285=(($284)&(255));
   $upper_byte=$285;
   var $286=$upper_data;
   var $287=((($286)-(3))|0);
   var $288=HEAP8[($287)];
   var $289=(($288)&(255));
   $upper_left_byte=$289;
   var $290=$prev_byte2;
   var $291=$upper_byte;
   var $292=((($290)+($291))|0);
   var $293=$upper_left_byte;
   var $294=((($292)-($293))|0);
   $predicted=$294;
   var $295=$predicted;
   var $296=$prev_byte2;
   var $297=((($295)-($296))|0);
   var $298=Math.abs($297);
   $pa=$298;
   var $299=$predicted;
   var $300=$upper_byte;
   var $301=((($299)-($300))|0);
   var $302=Math.abs($301);
   $pb=$302;
   var $303=$predicted;
   var $304=$upper_left_byte;
   var $305=((($303)-($304))|0);
   var $306=Math.abs($305);
   $pc=$306;
   var $307=$pa;
   var $308=$pb;
   var $309=(($307)|(0)) <= (($308)|(0));
   if ($309) { label = 57; break; } else { label = 59; break; }
  case 57: 
   var $311=$pa;
   var $312=$pc;
   var $313=(($311)|(0)) <= (($312)|(0));
   if ($313) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $315=$prev_byte2;
   $predicted=$315;
   label = 63; break;
  case 59: 
   var $317=$pb;
   var $318=$pc;
   var $319=(($317)|(0)) <= (($318)|(0));
   if ($319) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $321=$upper_byte;
   $predicted=$321;
   label = 62; break;
  case 61: 
   var $323=$upper_left_byte;
   $predicted=$323;
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   label = 65; break;
  case 64: 
   var $327=$prev_byte2;
   $predicted=$327;
   label = 65; break;
  case 65: 
   var $329=$predicted;
   var $330=$src_data;
   var $331=(($330+1)|0);
   $src_data=$331;
   var $332=HEAP8[($330)];
   var $333=(($332)&(255));
   var $334=((($329)-($333))|0);
   var $335=(($334) & 255);
   var $336=(($335)&(255));
   $prev_byte2=$336;
   var $337=(($336) & 255);
   var $338=$i;
   var $339=$dest_data;
   var $340=(($339+$338)|0);
   HEAP8[($340)]=$337;
   label = 66; break;
  case 66: 
   var $342=$i;
   var $343=((($342)+(3))|0);
   $i=$343;
   label = 54; break;
  case 67: 
   label = 68; break;
  case 68: 
   var $346=$cur_channel;
   var $347=((($346)+(1))|0);
   $cur_channel=$347;
   label = 52; break;
  case 69: 
   var $349=$PosR;
   $i=$349;
   var $350=$data_size;
   var $351=((($350)-(2))|0);
   $border=$351;
   label = 70; break;
  case 70: 
   var $353=$i;
   var $354=$border;
   var $355=(($353)|(0)) < (($354)|(0));
   if ($355) { label = 71; break; } else { label = 73; break; }
  case 71: 
   var $357=$i;
   var $358=((($357)+(1))|0);
   var $359=$dest_data;
   var $360=(($359+$358)|0);
   var $361=HEAP8[($360)];
   $g=$361;
   var $362=$g;
   var $363=(($362)&(255));
   var $364=$i;
   var $365=$dest_data;
   var $366=(($365+$364)|0);
   var $367=HEAP8[($366)];
   var $368=(($367)&(255));
   var $369=((($368)+($363))|0);
   var $370=(($369) & 255);
   HEAP8[($366)]=$370;
   var $371=$g;
   var $372=(($371)&(255));
   var $373=$i;
   var $374=((($373)+(2))|0);
   var $375=$dest_data;
   var $376=(($375+$374)|0);
   var $377=HEAP8[($376)];
   var $378=(($377)&(255));
   var $379=((($378)+($372))|0);
   var $380=(($379) & 255);
   HEAP8[($376)]=$380;
   label = 72; break;
  case 72: 
   var $382=$i;
   var $383=((($382)+(3))|0);
   $i=$383;
   label = 70; break;
  case 73: 
   label = 121; break;
  case 74: 
   var $386=$1;
   var $387=(($386+4)|0);
   var $388=(($387)|0);
   var $389=HEAP32[(($388)>>2)];
   $channels3=$389;
   var $390=$1;
   var $391=(($390+4)|0);
   var $392=(($391+16)|0);
   var $393=HEAP32[(($392)>>2)];
   $data_size=$393;
   var $394=$1;
   var $395=(($394)|0);
   var $396=HEAP32[(($395)>>2)];
   $src_data=$396;
   var $397=$src_data;
   var $398=$data_size;
   var $399=(($397+$398)|0);
   $dest_data=$399;
   var $400=$data_size;
   var $401=$1;
   var $402=(($401)|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=(($403+245792)|0);
   var $405=$404;
   HEAP32[(($405)>>2)]=$400;
   var $406=$data_size;
   var $407=(($406)|(0)) >= 122880;
   if ($407) { label = 75; break; } else { label = 76; break; }
  case 75: 
   label = 121; break;
  case 76: 
   $cur_channel=0;
   label = 77; break;
  case 77: 
   var $411=$cur_channel;
   var $412=$channels3;
   var $413=(($411)|(0)) < (($412)|(0));
   if ($413) { label = 78; break; } else { label = 111; break; }
  case 78: 
   $prev_byte4=0;
   $prev_delta=0;
   $D1=0;
   $D2=0;
   $D3=0;
   $K1=0;
   $K2=0;
   $K3=0;
   var $415=$Dif;
   HEAP32[(($415)>>2)]=0; HEAP32[((($415)+(4))>>2)]=0; HEAP32[((($415)+(8))>>2)]=0; HEAP32[((($415)+(12))>>2)]=0; HEAP32[((($415)+(16))>>2)]=0; HEAP32[((($415)+(20))>>2)]=0; HEAP32[((($415)+(24))>>2)]=0;
   var $416=$cur_channel;
   $i=$416;
   $byte_count=0;
   label = 79; break;
  case 79: 
   var $418=$i;
   var $419=$data_size;
   var $420=(($418)|(0)) < (($419)|(0));
   if ($420) { label = 80; break; } else { label = 109; break; }
  case 80: 
   var $422=$D2;
   $D3=$422;
   var $423=$prev_delta;
   var $424=$D1;
   var $425=((($423)-($424))|0);
   $D2=$425;
   var $426=$prev_delta;
   $D1=$426;
   var $427=$prev_byte4;
   var $428=($427<<3);
   var $429=$K1;
   var $430=$D1;
   var $431=(Math.imul($429,$430)|0);
   var $432=((($428)+($431))|0);
   var $433=$K2;
   var $434=$D2;
   var $435=(Math.imul($433,$434)|0);
   var $436=((($432)+($435))|0);
   var $437=$K3;
   var $438=$D3;
   var $439=(Math.imul($437,$438)|0);
   var $440=((($436)+($439))|0);
   $predicted=$440;
   var $441=$predicted;
   var $442=$441 >>> 3;
   var $443=$442 & 255;
   $predicted=$443;
   var $444=$src_data;
   var $445=(($444+1)|0);
   $src_data=$445;
   var $446=HEAP8[($444)];
   $cur_byte=$446;
   var $447=$cur_byte;
   var $448=(($447)&(255));
   var $449=$predicted;
   var $450=((($449)-($448))|0);
   $predicted=$450;
   var $451=$predicted;
   var $452=(($451) & 255);
   var $453=$i;
   var $454=$dest_data;
   var $455=(($454+$453)|0);
   HEAP8[($455)]=$452;
   var $456=$predicted;
   var $457=$prev_byte4;
   var $458=((($456)-($457))|0);
   var $459=(($458) & 255);
   var $460=(($459 << 24) >> 24);
   $prev_delta=$460;
   var $461=$predicted;
   $prev_byte4=$461;
   var $462=$cur_byte;
   var $463=(($462 << 24) >> 24);
   var $464=$463 << 3;
   $D=$464;
   var $465=$D;
   var $466=Math.abs($465);
   var $467=(($Dif)|0);
   var $468=HEAP32[(($467)>>2)];
   var $469=((($468)+($466))|0);
   HEAP32[(($467)>>2)]=$469;
   var $470=$D;
   var $471=$D1;
   var $472=((($470)-($471))|0);
   var $473=Math.abs($472);
   var $474=(($Dif+4)|0);
   var $475=HEAP32[(($474)>>2)];
   var $476=((($475)+($473))|0);
   HEAP32[(($474)>>2)]=$476;
   var $477=$D;
   var $478=$D1;
   var $479=((($477)+($478))|0);
   var $480=Math.abs($479);
   var $481=(($Dif+8)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=((($482)+($480))|0);
   HEAP32[(($481)>>2)]=$483;
   var $484=$D;
   var $485=$D2;
   var $486=((($484)-($485))|0);
   var $487=Math.abs($486);
   var $488=(($Dif+12)|0);
   var $489=HEAP32[(($488)>>2)];
   var $490=((($489)+($487))|0);
   HEAP32[(($488)>>2)]=$490;
   var $491=$D;
   var $492=$D2;
   var $493=((($491)+($492))|0);
   var $494=Math.abs($493);
   var $495=(($Dif+16)|0);
   var $496=HEAP32[(($495)>>2)];
   var $497=((($496)+($494))|0);
   HEAP32[(($495)>>2)]=$497;
   var $498=$D;
   var $499=$D3;
   var $500=((($498)-($499))|0);
   var $501=Math.abs($500);
   var $502=(($Dif+20)|0);
   var $503=HEAP32[(($502)>>2)];
   var $504=((($503)+($501))|0);
   HEAP32[(($502)>>2)]=$504;
   var $505=$D;
   var $506=$D3;
   var $507=((($505)+($506))|0);
   var $508=Math.abs($507);
   var $509=(($Dif+24)|0);
   var $510=HEAP32[(($509)>>2)];
   var $511=((($510)+($508))|0);
   HEAP32[(($509)>>2)]=$511;
   var $512=$byte_count;
   var $513=$512 & 31;
   var $514=(($513)|(0))==0;
   if ($514) { label = 81; break; } else { label = 107; break; }
  case 81: 
   var $516=(($Dif)|0);
   var $517=HEAP32[(($516)>>2)];
   $min_dif=$517;
   $num_min_dif=0;
   var $518=(($Dif)|0);
   HEAP32[(($518)>>2)]=0;
   $j=1;
   label = 82; break;
  case 82: 
   var $520=$j;
   var $521=(($520)>>>(0)) < 7;
   if ($521) { label = 83; break; } else { label = 87; break; }
  case 83: 
   var $523=$j;
   var $524=(($Dif+($523<<2))|0);
   var $525=HEAP32[(($524)>>2)];
   var $526=$min_dif;
   var $527=(($525)>>>(0)) < (($526)>>>(0));
   if ($527) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $529=$j;
   var $530=(($Dif+($529<<2))|0);
   var $531=HEAP32[(($530)>>2)];
   $min_dif=$531;
   var $532=$j;
   $num_min_dif=$532;
   label = 85; break;
  case 85: 
   var $534=$j;
   var $535=(($Dif+($534<<2))|0);
   HEAP32[(($535)>>2)]=0;
   label = 86; break;
  case 86: 
   var $537=$j;
   var $538=((($537)+(1))|0);
   $j=$538;
   label = 82; break;
  case 87: 
   var $540=$num_min_dif;
   if ((($540)|(0))==1) {
    label = 88; break;
   }
   else if ((($540)|(0))==2) {
    label = 91; break;
   }
   else if ((($540)|(0))==3) {
    label = 94; break;
   }
   else if ((($540)|(0))==4) {
    label = 97; break;
   }
   else if ((($540)|(0))==5) {
    label = 100; break;
   }
   else if ((($540)|(0))==6) {
    label = 103; break;
   }
   else {
   label = 106; break;
   }
  case 88: 
   var $542=$K1;
   var $543=(($542)|(0)) >= -16;
   if ($543) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $545=$K1;
   var $546=((($545)-(1))|0);
   $K1=$546;
   label = 90; break;
  case 90: 
   label = 106; break;
  case 91: 
   var $549=$K1;
   var $550=(($549)|(0)) < 16;
   if ($550) { label = 92; break; } else { label = 93; break; }
  case 92: 
   var $552=$K1;
   var $553=((($552)+(1))|0);
   $K1=$553;
   label = 93; break;
  case 93: 
   label = 106; break;
  case 94: 
   var $556=$K2;
   var $557=(($556)|(0)) >= -16;
   if ($557) { label = 95; break; } else { label = 96; break; }
  case 95: 
   var $559=$K2;
   var $560=((($559)-(1))|0);
   $K2=$560;
   label = 96; break;
  case 96: 
   label = 106; break;
  case 97: 
   var $563=$K2;
   var $564=(($563)|(0)) < 16;
   if ($564) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $566=$K2;
   var $567=((($566)+(1))|0);
   $K2=$567;
   label = 99; break;
  case 99: 
   label = 106; break;
  case 100: 
   var $570=$K3;
   var $571=(($570)|(0)) >= -16;
   if ($571) { label = 101; break; } else { label = 102; break; }
  case 101: 
   var $573=$K3;
   var $574=((($573)-(1))|0);
   $K3=$574;
   label = 102; break;
  case 102: 
   label = 106; break;
  case 103: 
   var $577=$K3;
   var $578=(($577)|(0)) < 16;
   if ($578) { label = 104; break; } else { label = 105; break; }
  case 104: 
   var $580=$K3;
   var $581=((($580)+(1))|0);
   $K3=$581;
   label = 105; break;
  case 105: 
   label = 106; break;
  case 106: 
   label = 107; break;
  case 107: 
   label = 108; break;
  case 108: 
   var $586=$channels3;
   var $587=$i;
   var $588=((($587)+($586))|0);
   $i=$588;
   var $589=$byte_count;
   var $590=((($589)+(1))|0);
   $byte_count=$590;
   label = 79; break;
  case 109: 
   label = 110; break;
  case 110: 
   var $593=$cur_channel;
   var $594=((($593)+(1))|0);
   $cur_channel=$594;
   label = 77; break;
  case 111: 
   label = 121; break;
  case 112: 
   var $597=$1;
   var $598=(($597+4)|0);
   var $599=(($598+16)|0);
   var $600=HEAP32[(($599)>>2)];
   $data_size=$600;
   $src_pos=0;
   var $601=$data_size;
   $dest_pos=$601;
   var $602=$data_size;
   var $603=(($602)|(0)) >= 122880;
   if ($603) { label = 113; break; } else { label = 114; break; }
  case 113: 
   label = 121; break;
  case 114: 
   label = 115; break;
  case 115: 
   var $607=$src_pos;
   var $608=$data_size;
   var $609=(($607)|(0)) < (($608)|(0));
   if ($609) { label = 116; break; } else { label = 120; break; }
  case 116: 
   var $611=$src_pos;
   var $612=((($611)+(1))|0);
   $src_pos=$612;
   var $613=$1;
   var $614=(($613)|0);
   var $615=HEAP32[(($614)>>2)];
   var $616=(($615+$611)|0);
   var $617=HEAP8[($616)];
   $cur_byte=$617;
   var $618=$cur_byte;
   var $619=(($618)&(255));
   var $620=(($619)|(0))==2;
   if ($620) { label = 117; break; } else { label = 119; break; }
  case 117: 
   var $622=$src_pos;
   var $623=((($622)+(1))|0);
   $src_pos=$623;
   var $624=$1;
   var $625=(($624)|0);
   var $626=HEAP32[(($625)>>2)];
   var $627=(($626+$622)|0);
   var $628=HEAP8[($627)];
   $cur_byte=$628;
   var $629=(($628)&(255));
   var $630=(($629)|(0))!=2;
   if ($630) { label = 118; break; } else { label = 119; break; }
  case 118: 
   var $632=$cur_byte;
   var $633=(($632)&(255));
   var $634=((($633)-(32))|0);
   var $635=(($634) & 255);
   $cur_byte=$635;
   label = 119; break;
  case 119: 
   var $637=$cur_byte;
   var $638=$dest_pos;
   var $639=((($638)+(1))|0);
   $dest_pos=$639;
   var $640=$1;
   var $641=(($640)|0);
   var $642=HEAP32[(($641)>>2)];
   var $643=(($642+$638)|0);
   HEAP8[($643)]=$637;
   label = 115; break;
  case 120: 
   var $645=$dest_pos;
   var $646=$data_size;
   var $647=((($645)-($646))|0);
   var $648=$1;
   var $649=(($648)|0);
   var $650=HEAP32[(($649)>>2)];
   var $651=(($650+245788)|0);
   var $652=$651;
   HEAP32[(($652)>>2)]=$647;
   var $653=$data_size;
   var $654=$1;
   var $655=(($654)|0);
   var $656=HEAP32[(($655)>>2)];
   var $657=(($656+245792)|0);
   var $658=$657;
   HEAP32[(($658)>>2)]=$653;
   label = 121; break;
  case 121: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_dbgmsg37() {
 var label = 0;
 return;
}
function _rar_dbgmsg64($fmt, varrp) {
 var label = 0;
 var $1;
 $1=$fmt;
 return;
}
function _filter_itanium_getbits($data, $bit_pos, $bit_count) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $in_addr;
 var $in_bit;
 var $bit_field;
 $1=$data;
 $2=$bit_pos;
 $3=$bit_count;
 var $4=$2;
 var $5=((((($4)|(0)))/(8))&-1);
 $in_addr=$5;
 var $6=$2;
 var $7=$6 & 7;
 $in_bit=$7;
 var $8=$in_addr;
 var $9=((($8)+(1))|0);
 $in_addr=$9;
 var $10=$1;
 var $11=(($10+$8)|0);
 var $12=HEAP8[($11)];
 var $13=(($12)&(255));
 $bit_field=$13;
 var $14=$in_addr;
 var $15=((($14)+(1))|0);
 $in_addr=$15;
 var $16=$1;
 var $17=(($16+$14)|0);
 var $18=HEAP8[($17)];
 var $19=(($18)&(255));
 var $20=$19 << 8;
 var $21=$bit_field;
 var $22=$21 | $20;
 $bit_field=$22;
 var $23=$in_addr;
 var $24=((($23)+(1))|0);
 $in_addr=$24;
 var $25=$1;
 var $26=(($25+$23)|0);
 var $27=HEAP8[($26)];
 var $28=(($27)&(255));
 var $29=$28 << 16;
 var $30=$bit_field;
 var $31=$30 | $29;
 $bit_field=$31;
 var $32=$in_addr;
 var $33=$1;
 var $34=(($33+$32)|0);
 var $35=HEAP8[($34)];
 var $36=(($35)&(255));
 var $37=$36 << 24;
 var $38=$bit_field;
 var $39=$38 | $37;
 $bit_field=$39;
 var $40=$in_bit;
 var $41=$bit_field;
 var $42=$41 >>> (($40)>>>(0));
 $bit_field=$42;
 var $43=$bit_field;
 var $44=$3;
 var $45=(((32)-($44))|0);
 var $46=-1 >>> (($45)>>>(0));
 var $47=$43 & $46;
 return $47;
}
function _filter_itanium_setbits($data, $bit_field, $bit_pos, $bit_count) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $in_addr;
   var $in_bit;
   var $and_mask;
   $1=$data;
   $2=$bit_field;
   $3=$bit_pos;
   $4=$bit_count;
   var $5=$3;
   var $6=((((($5)|(0)))/(8))&-1);
   $in_addr=$6;
   var $7=$3;
   var $8=$7 & 7;
   $in_bit=$8;
   var $9=$4;
   var $10=(((32)-($9))|0);
   var $11=-1 >>> (($10)>>>(0));
   $and_mask=$11;
   var $12=$and_mask;
   var $13=$in_bit;
   var $14=$12 << $13;
   var $15=$14 ^ -1;
   $and_mask=$15;
   var $16=$in_bit;
   var $17=$2;
   var $18=$17 << $16;
   $2=$18;
   $i=0;
   label = 2; break;
  case 2: 
   var $20=$i;
   var $21=(($20)|(0)) < 4;
   if ($21) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $23=$and_mask;
   var $24=$in_addr;
   var $25=$i;
   var $26=((($24)+($25))|0);
   var $27=$1;
   var $28=(($27+$26)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$30 & $23;
   var $32=(($31) & 255);
   HEAP8[($28)]=$32;
   var $33=$2;
   var $34=$in_addr;
   var $35=$i;
   var $36=((($34)+($35))|0);
   var $37=$1;
   var $38=(($37+$36)|0);
   var $39=HEAP8[($38)];
   var $40=(($39)&(255));
   var $41=$40 | $33;
   var $42=(($41) & 255);
   HEAP8[($38)]=$42;
   var $43=$and_mask;
   var $44=$43 >>> 8;
   var $45=$44 | -16777216;
   $and_mask=$45;
   var $46=$2;
   var $47=$46 >>> 8;
   $2=$47;
   label = 4; break;
  case 4: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_crc_init() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $i;
   var $j;
   var $c;
   $i=0;
   label = 2; break;
  case 2: 
   var $2=$i;
   var $3=(($2)|(0)) < 256;
   if ($3) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $5=$i;
   $c=$5;
   $j=0;
   label = 4; break;
  case 4: 
   var $7=$j;
   var $8=(($7)|(0)) < 8;
   if ($8) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $10=$c;
   var $11=$10 & 1;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $14=$c;
   var $15=$14 >>> 1;
   var $16=$15 ^ -306674912;
   var $21 = $16;label = 8; break;
  case 7: 
   var $18=$c;
   var $19=$18 >>> 1;
   var $21 = $19;label = 8; break;
  case 8: 
   var $21;
   $c=$21;
   label = 9; break;
  case 9: 
   var $23=$j;
   var $24=((($23)+(1))|0);
   $j=$24;
   label = 4; break;
  case 10: 
   var $26=$c;
   var $27=$i;
   var $28=((4712+($27<<2))|0);
   HEAP32[(($28)>>2)]=$26;
   label = 11; break;
  case 11: 
   var $30=$i;
   var $31=((($30)+(1))|0);
   $i=$31;
   label = 2; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _addbits($unpack_data, $bits) {
 var label = 0;
 var $1;
 var $2;
 $1=$unpack_data;
 $2=$bits;
 var $3=$1;
 var $4=(($3+4227080)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=((($6)+($5))|0);
 $2=$7;
 var $8=$2;
 var $9=$8 >> 3;
 var $10=$1;
 var $11=(($10+4227076)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)+($9))|0);
 HEAP32[(($11)>>2)]=$13;
 var $14=$2;
 var $15=$14 & 7;
 var $16=$1;
 var $17=(($16+4227080)|0);
 HEAP32[(($17)>>2)]=$15;
 return;
}
function _getbits($unpack_data) {
 var label = 0;
 var $1;
 var $bit_field;
 $1=$unpack_data;
 var $2=$1;
 var $3=(($2+4227076)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=(($6+$4)|0);
 var $8=HEAP8[($7)];
 var $9=(($8)&(255));
 var $10=$9 << 16;
 $bit_field=$10;
 var $11=$1;
 var $12=(($11+4227076)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=((($13)+(1))|0);
 var $15=$1;
 var $16=(($15+4)|0);
 var $17=(($16+$14)|0);
 var $18=HEAP8[($17)];
 var $19=(($18)&(255));
 var $20=$19 << 8;
 var $21=$bit_field;
 var $22=$21 | $20;
 $bit_field=$22;
 var $23=$1;
 var $24=(($23+4227076)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($25)+(2))|0);
 var $27=$1;
 var $28=(($27+4)|0);
 var $29=(($28+$26)|0);
 var $30=HEAP8[($29)];
 var $31=(($30)&(255));
 var $32=$bit_field;
 var $33=$32 | $31;
 $bit_field=$33;
 var $34=$1;
 var $35=(($34+4227080)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(((8)-($36))|0);
 var $38=$bit_field;
 var $39=$38 >>> (($37)>>>(0));
 $bit_field=$39;
 var $40=$bit_field;
 var $41=$40 & 65535;
 return $41;
}
function _unp_read_buf($fd, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $data_size;
   var $retval;
   var $read_size;
   var $fill;
   $2=$fd;
   $3=$unpack_data;
   var $4=$3;
   var $5=(($4+4227096)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$3;
   var $8=(($7+4227076)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=((($6)-($9))|0);
   $data_size=$10;
   var $11=$data_size;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 21; break;
  case 3: 
   var $15=$3;
   var $16=(($15+4227076)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0)) > 16384;
   if ($18) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $20=$data_size;
   var $21=(($20)|(0)) > 0;
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=$3;
   var $24=(($23+4)|0);
   var $25=$24;
   var $26=$3;
   var $27=(($26+4)|0);
   var $28=(($27)|0);
   var $29=$3;
   var $30=(($29+4227076)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($28+$31)|0);
   var $33=$data_size;
   _memmove($25, $32, $33, 1, 0);
   label = 6; break;
  case 6: 
   var $35=$3;
   var $36=(($35+4227076)|0);
   HEAP32[(($36)>>2)]=0;
   var $37=$data_size;
   var $38=$3;
   var $39=(($38+4227096)|0);
   HEAP32[(($39)>>2)]=$37;
   label = 8; break;
  case 7: 
   var $41=$3;
   var $42=(($41+4227096)|0);
   var $43=HEAP32[(($42)>>2)];
   $data_size=$43;
   label = 8; break;
  case 8: 
   var $45=$3;
   var $46=(($45+4249552)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$data_size;
   var $49=(((32768)-($48))|0);
   var $50=$49 & -16;
   var $51=(($47)>>>(0)) < (($50)>>>(0));
   if ($51) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $53=$3;
   var $54=(($53+4249552)|0);
   var $55=HEAP32[(($54)>>2)];
   $read_size=$55;
   label = 11; break;
  case 10: 
   var $57=$data_size;
   var $58=(((32768)-($57))|0);
   var $59=$58 & -16;
   $read_size=$59;
   label = 11; break;
  case 11: 
   var $61=$2;
   var $62=$3;
   var $63=(($62+4)|0);
   var $64=(($63)|0);
   var $65=$data_size;
   var $66=(($64+$65)|0);
   var $67=$read_size;
   var $68=_read($61, $66, $67);
   $retval=$68;
   var $69=$retval;
   var $70=(($69)|(0)) > 0;
   if ($70) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $72=$retval;
   var $73=$3;
   var $74=(($73+4227096)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=((($75)+($72))|0);
   HEAP32[(($74)>>2)]=$76;
   var $77=$retval;
   var $78=$3;
   var $79=(($78+4249552)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=((($80)-($77))|0);
   HEAP32[(($79)>>2)]=$81;
   label = 13; break;
  case 13: 
   var $83=$3;
   var $84=(($83+4227096)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=((($85)-(30))|0);
   var $87=$3;
   var $88=(($87+4227100)|0);
   HEAP32[(($88)>>2)]=$86;
   var $89=$3;
   var $90=(($89+4227100)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$3;
   var $93=(($92+4227076)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($91)|(0)) < (($94)|(0));
   if ($95) { label = 14; break; } else { label = 20; break; }
  case 14: 
   var $97=$3;
   var $98=(($97+4227096)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=((($99)+(30))|0);
   var $101=(($100)|(0)) < 32768;
   if ($101) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $109 = 30;label = 17; break;
  case 16: 
   var $104=$3;
   var $105=(($104+4227096)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(((32768)-($106))|0);
   var $109 = $107;label = 17; break;
  case 17: 
   var $109;
   $fill=$109;
   var $110=$fill;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $113=$3;
   var $114=(($113+4)|0);
   var $115=(($114)|0);
   var $116=$3;
   var $117=(($116+4227096)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($115+$118)|0);
   var $120=$fill;
   _memset($119, 0, $120);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $123=$retval;
   var $124=(($123)|(0))!=-1;
   var $125=(($124)&(1));
   $1=$125;
   label = 21; break;
  case 21: 
   var $127=$1;
   return $127;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_get_char($fd, $unpack_data) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$fd;
   $3=$unpack_data;
   var $4=$3;
   var $5=(($4+4227076)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0)) > 32738;
   if ($7) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $9=$2;
   var $10=$3;
   var $11=_unp_read_buf($9, $10);
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=-1;
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$3;
   var $17=(($16+4227076)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$3;
   var $20=(($19+4)|0);
   var $21=(($20+$18)|0);
   var $22=HEAP8[($21)];
   var $23=(($22)&(255));
   _rar_dbgmsg64(((2472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$23,tempInt));
   var $24=$3;
   var $25=(($24+4227076)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($26)+(1))|0);
   HEAP32[(($25)>>2)]=$27;
   var $28=$3;
   var $29=(($28+4)|0);
   var $30=(($29+$26)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   $1=$32;
   label = 6; break;
  case 6: 
   var $34=$1;
   STACKTOP = sp;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _unp_write_buf_old($unpack_data) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$unpack_data;
   _rar_dbgmsg64(((3504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $2=$1;
   var $3=(($2+4227084)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$1;
   var $6=(($5+4227088)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($4)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$1;
   var $12=(($11+4227088)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$1;
   var $15=(($14+32772)|0);
   var $16=(($15+$13)|0);
   var $17=$1;
   var $18=(($17+4227088)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(((-$19))|0);
   var $21=$20 & 4194303;
   _unp_write_data($10, $16, $21);
   var $22=$1;
   var $23=$1;
   var $24=(($23+32772)|0);
   var $25=(($24)|0);
   var $26=$1;
   var $27=(($26+4227084)|0);
   var $28=HEAP32[(($27)>>2)];
   _unp_write_data($22, $25, $28);
   label = 4; break;
  case 3: 
   var $30=$1;
   var $31=$1;
   var $32=(($31+4227088)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$1;
   var $35=(($34+32772)|0);
   var $36=(($35+$33)|0);
   var $37=$1;
   var $38=(($37+4227084)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$1;
   var $41=(($40+4227088)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($39)-($42))|0);
   _unp_write_data($30, $36, $43);
   label = 4; break;
  case 4: 
   var $45=$1;
   var $46=(($45+4227084)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$1;
   var $49=(($48+4227088)|0);
   HEAP32[(($49)>>2)]=$47;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _unp_write_data($unpack_data, $data, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$unpack_data;
 $2=$data;
 $3=$size;
 var $4=$3;
 _rar_dbgmsg64(((2496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=$3;
 var $10=_write($7, $8, $9);
 var $11=$3;
 var $12$0=$11;
 var $12$1=((($11)|(0)) < 0 ? -1 : 0);
 var $13=$1;
 var $14=(($13+4249536)|0);
 var $ld$0$0=(($14)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $16$0 = _i64Add($15$0,$15$1,$12$0,$12$1); var $16$1 = tempRet0;
 var $st$2$0=(($14)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($14+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 var $17=$1;
 var $18=(($17+4249596)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$2;
 var $21=$3;
 var $22=_rar_crc($19, $20, $21);
 var $23=$1;
 var $24=(($23+4249596)|0);
 HEAP32[(($24)>>2)]=$22;
 STACKTOP = sp;
 return;
}
function _make_decode_tables($len_tab, $decode, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $len_count=sp;
   var $tmp_pos=(sp)+(64);
   var $i;
   var $m;
   var $n;
   $1=$len_tab;
   $2=$decode;
   $3=$size;
   var $4=$len_count;
   _memset($4, 0, 64);
   var $5=$2;
   var $6=(($5+132)|0);
   var $7=$6;
   var $8=$3;
   var $9=($8<<2);
   _memset($7, 0, $9);
   $i=0;
   label = 2; break;
  case 2: 
   var $11=$i;
   var $12=$3;
   var $13=(($11)|(0)) < (($12)|(0));
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$i;
   var $16=$1;
   var $17=(($16+$15)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=$19 & 15;
   var $21=(($len_count+($20<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)+(1))|0);
   HEAP32[(($21)>>2)]=$23;
   label = 4; break;
  case 4: 
   var $25=$i;
   var $26=((($25)+(1))|0);
   $i=$26;
   label = 2; break;
  case 5: 
   var $28=(($len_count)|0);
   HEAP32[(($28)>>2)]=0;
   var $29=$2;
   var $30=(($29+4)|0);
   var $31=(($30)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=$2;
   var $33=(($32+68)|0);
   var $34=(($33)|0);
   HEAP32[(($34)>>2)]=0;
   var $35=(($tmp_pos)|0);
   HEAP32[(($35)>>2)]=0;
   $n=0;
   $i=1;
   label = 6; break;
  case 6: 
   var $37=$i;
   var $38=(($37)|(0)) < 16;
   if ($38) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $40=$n;
   var $41=$i;
   var $42=(($len_count+($41<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($40)+($43))|0);
   var $45=($44<<1);
   $n=$45;
   var $46=$n;
   var $47=$i;
   var $48=(((15)-($47))|0);
   var $49=$46 << $48;
   $m=$49;
   var $50=$m;
   var $51=(($50)|(0)) > 65535;
   if ($51) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $m=65535;
   label = 9; break;
  case 9: 
   var $54=$m;
   var $55=$i;
   var $56=$2;
   var $57=(($56+4)|0);
   var $58=(($57+($55<<2))|0);
   HEAP32[(($58)>>2)]=$54;
   var $59=$i;
   var $60=((($59)-(1))|0);
   var $61=$2;
   var $62=(($61+68)|0);
   var $63=(($62+($60<<2))|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$i;
   var $66=((($65)-(1))|0);
   var $67=(($len_count+($66<<2))|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=((($64)+($68))|0);
   var $70=$i;
   var $71=$2;
   var $72=(($71+68)|0);
   var $73=(($72+($70<<2))|0);
   HEAP32[(($73)>>2)]=$69;
   var $74=$i;
   var $75=(($tmp_pos+($74<<2))|0);
   HEAP32[(($75)>>2)]=$69;
   label = 10; break;
  case 10: 
   var $77=$i;
   var $78=((($77)+(1))|0);
   $i=$78;
   label = 6; break;
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $81=$i;
   var $82=$3;
   var $83=(($81)|(0)) < (($82)|(0));
   if ($83) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $85=$i;
   var $86=$1;
   var $87=(($86+$85)|0);
   var $88=HEAP8[($87)];
   var $89=(($88)&(255));
   var $90=(($89)|(0))!=0;
   if ($90) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $92=$i;
   var $93=$i;
   var $94=$1;
   var $95=(($94+$93)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=$97 & 15;
   var $99=(($tmp_pos+($98<<2))|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   var $102=$2;
   var $103=(($102+132)|0);
   var $104=(($103+($100<<2))|0);
   HEAP32[(($104)>>2)]=$92;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $107=$i;
   var $108=((($107)+(1))|0);
   $i=$108;
   label = 12; break;
  case 17: 
   var $110=$3;
   var $111=$2;
   var $112=(($111)|0);
   HEAP32[(($112)>>2)]=$110;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _decode_number($unpack_data, $decode) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $bits;
   var $bit_field;
   var $n;
   $1=$unpack_data;
   $2=$decode;
   var $3=$1;
   var $4=_getbits($3);
   var $5=$4 & 65534;
   $bit_field=$5;
   var $6=$bit_field;
   _rar_dbgmsg64(((3008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
   var $7=$bit_field;
   var $8=$2;
   var $9=(($8+4)|0);
   var $10=(($9+32)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($7)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 2; break; } else { label = 24; break; }
  case 2: 
   var $14=$bit_field;
   var $15=$2;
   var $16=(($15+4)|0);
   var $17=(($16+16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($14)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $21=$bit_field;
   var $22=$2;
   var $23=(($22+4)|0);
   var $24=(($23+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($21)>>>(0)) < (($25)>>>(0));
   if ($26) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $28=$bit_field;
   var $29=$2;
   var $30=(($29+4)|0);
   var $31=(($30+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($28)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $bits=1;
   label = 7; break;
  case 6: 
   $bits=2;
   label = 7; break;
  case 7: 
   label = 12; break;
  case 8: 
   var $38=$bit_field;
   var $39=$2;
   var $40=(($39+4)|0);
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($38)>>>(0)) < (($42)>>>(0));
   if ($43) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $bits=3;
   label = 11; break;
  case 10: 
   $bits=4;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 23; break;
  case 13: 
   var $49=$bit_field;
   var $50=$2;
   var $51=(($50+4)|0);
   var $52=(($51+24)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($49)>>>(0)) < (($53)>>>(0));
   if ($54) { label = 14; break; } else { label = 18; break; }
  case 14: 
   var $56=$bit_field;
   var $57=$2;
   var $58=(($57+4)|0);
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($56)>>>(0)) < (($60)>>>(0));
   if ($61) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $bits=5;
   label = 17; break;
  case 16: 
   $bits=6;
   label = 17; break;
  case 17: 
   label = 22; break;
  case 18: 
   var $66=$bit_field;
   var $67=$2;
   var $68=(($67+4)|0);
   var $69=(($68+28)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($66)>>>(0)) < (($70)>>>(0));
   if ($71) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $bits=7;
   label = 21; break;
  case 20: 
   $bits=8;
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   label = 43; break;
  case 24: 
   var $78=$bit_field;
   var $79=$2;
   var $80=(($79+4)|0);
   var $81=(($80+48)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($78)>>>(0)) < (($82)>>>(0));
   if ($83) { label = 25; break; } else { label = 35; break; }
  case 25: 
   var $85=$bit_field;
   var $86=$2;
   var $87=(($86+4)|0);
   var $88=(($87+40)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($85)>>>(0)) < (($89)>>>(0));
   if ($90) { label = 26; break; } else { label = 30; break; }
  case 26: 
   var $92=$bit_field;
   var $93=$2;
   var $94=(($93+4)|0);
   var $95=(($94+36)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($92)>>>(0)) < (($96)>>>(0));
   if ($97) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $bits=9;
   label = 29; break;
  case 28: 
   $bits=10;
   label = 29; break;
  case 29: 
   label = 34; break;
  case 30: 
   var $102=$bit_field;
   var $103=$2;
   var $104=(($103+4)|0);
   var $105=(($104+44)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($102)>>>(0)) < (($106)>>>(0));
   if ($107) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $bits=11;
   label = 33; break;
  case 32: 
   $bits=12;
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   label = 42; break;
  case 35: 
   var $113=$bit_field;
   var $114=$2;
   var $115=(($114+4)|0);
   var $116=(($115+56)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($113)>>>(0)) < (($117)>>>(0));
   if ($118) { label = 36; break; } else { label = 40; break; }
  case 36: 
   var $120=$bit_field;
   var $121=$2;
   var $122=(($121+4)|0);
   var $123=(($122+52)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=(($120)>>>(0)) < (($124)>>>(0));
   if ($125) { label = 37; break; } else { label = 38; break; }
  case 37: 
   $bits=13;
   label = 39; break;
  case 38: 
   $bits=14;
   label = 39; break;
  case 39: 
   label = 41; break;
  case 40: 
   $bits=15;
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $133=$bits;
   _rar_dbgmsg64(((2528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$133,tempInt));
   var $134=$1;
   var $135=$bits;
   _addbits($134, $135);
   var $136=$bits;
   var $137=$2;
   var $138=(($137+68)|0);
   var $139=(($138+($136<<2))|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=$bit_field;
   var $142=$bits;
   var $143=((($142)-(1))|0);
   var $144=$2;
   var $145=(($144+4)|0);
   var $146=(($145+($143<<2))|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=((($141)-($147))|0);
   var $149=$bits;
   var $150=(((16)-($149))|0);
   var $151=$148 >>> (($150)>>>(0));
   var $152=((($140)+($151))|0);
   $n=$152;
   var $153=$n;
   var $154=$2;
   var $155=(($154)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=(($153)>>>(0)) >= (($156)>>>(0));
   if ($157) { label = 44; break; } else { label = 45; break; }
  case 44: 
   $n=0;
   label = 45; break;
  case 45: 
   var $160=$n;
   var $161=$2;
   var $162=(($161+132)|0);
   var $163=(($162+($160<<2))|0);
   var $164=HEAP32[(($163)>>2)];
   STACKTOP = sp;
   return $164;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack_init_data($solid, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$solid;
   $2=$unpack_data;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$2;
   var $7=(($6+4227092)|0);
   HEAP32[(($7)>>2)]=0;
   var $8=$2;
   var $9=(($8+4229876)|0);
   var $10=$9;
   HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0; HEAP32[((($10)+(12))>>2)]=0;
   var $11=$2;
   var $12=(($11+4229892)|0);
   HEAP32[(($12)>>2)]=0;
   var $13=$2;
   var $14=(($13+4227116)|0);
   var $15=$14;
   _memset($15, 0, 404);
   var $16=$2;
   var $17=(($16+4229896)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=$2;
   var $19=(($18+4229900)|0);
   HEAP32[(($19)>>2)]=0;
   var $20=$2;
   var $21=(($20+4249500)|0);
   HEAP32[(($21)>>2)]=2;
   var $22=$2;
   var $23=(($22+4227084)|0);
   HEAP32[(($23)>>2)]=0;
   var $24=$2;
   var $25=(($24+4227088)|0);
   HEAP32[(($25)>>2)]=0;
   var $26=$2;
   _init_filters($26);
   label = 3; break;
  case 3: 
   var $28=$2;
   var $29=(($28+4227080)|0);
   HEAP32[(($29)>>2)]=0;
   var $30=$2;
   var $31=(($30+4227076)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=$2;
   var $33=(($32+4227096)|0);
   HEAP32[(($33)>>2)]=0;
   var $34=$2;
   var $35=(($34+4249504)|0);
   HEAP32[(($35)>>2)]=0;
   var $36=$2;
   var $37=(($36+4249536)|0);
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $st$1$0=(($37)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($37+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $38=$2;
   var $39=(($38+4249556)|0);
   var $40=_rarvm_init($39);
   var $41=$2;
   var $42=(($41+4249596)|0);
   HEAP32[(($42)>>2)]=-1;
   var $43=$1;
   var $44=$2;
   _unpack_init_data20($43, $44);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _init_filters($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$unpack_data;
   var $2=$1;
   var $3=(($2+4249524)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($7+4249524)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   _free($10);
   var $11=$1;
   var $12=(($11+4249524)|0);
   HEAP32[(($12)>>2)]=0;
   label = 3; break;
  case 3: 
   var $14=$1;
   var $15=(($14+4249532)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=$1;
   var $17=(($16+4249528)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=$1;
   var $19=(($18+4249508)|0);
   _rar_filter_array_reset($19);
   var $20=$1;
   var $21=(($20+4249516)|0);
   _rar_filter_array_reset($21);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rar_unpack29($fd, $solid, $unpack_data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 384)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ldecode=sp;
   var $lbits=(sp)+(32);
   var $ddecode=(sp)+(64);
   var $dbits=(sp)+(304);
   var $sddecode=(sp)+(368);
   var $sdbits=(sp)+(376);
   var $bits;
   var $distance;
   var $retval;
   var $i;
   var $number;
   var $length;
   var $dist_number;
   var $low_dist;
   var $ch;
   var $next_ch;
   var $length_number;
   var $failed;
   var $length1;
   var $length2;
   $2=$fd;
   $3=$solid;
   $4=$unpack_data;
   var $5=$ldecode;
   assert(28 % 1 === 0);(_memcpy($5, ((416)|0), 28)|0);
   var $6=$lbits;
   assert(28 % 1 === 0);(_memcpy($6, ((448)|0), 28)|0);
   var $7=$ddecode;
   assert(240 % 1 === 0);(_memcpy($7, 480, 240)|0);
   var $8=$dbits;
   assert(60 % 1 === 0);(_memcpy($8, ((720)|0), 60)|0);
   var $9=$sddecode;
   assert(8 % 1 === 0);(_memcpy($9, ((400)|0), 8)|0);
   var $10=$sdbits;
   assert(8 % 1 === 0);(_memcpy($10, ((408)|0), 8)|0);
   $retval=1;
   var $11=$3;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 3; break;
  case 3: 
   var $15=$3;
   var $16=$4;
   _unpack_init_data($15, $16);
   var $17=$2;
   var $18=$4;
   var $19=_unp_read_buf($17, $18);
   var $20=(($19)|(0))!=0;
   if ($20) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $1=0;
   label = 109; break;
  case 5: 
   var $23=$3;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $26=$4;
   var $27=(($26+4227092)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $31=$2;
   var $32=$4;
   var $33=_read_tables($31, $32);
   var $34=(($33)|(0))!=0;
   if ($34) { label = 9; break; } else { label = 8; break; }
  case 8: 
   $1=0;
   label = 109; break;
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $39=$4;
   var $40=(($39+4227084)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41 & 4194303;
   HEAP32[(($40)>>2)]=$42;
   var $43=$4;
   var $44=(($43+4227084)|0);
   var $45=HEAP32[(($44)>>2)];
   _rar_dbgmsg64(((2376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$45,tempInt));
   var $46=$4;
   var $47=(($46+4227076)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$4;
   var $50=(($49+4227100)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($48)|(0)) > (($51)|(0));
   if ($52) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $54=$2;
   var $55=$4;
   var $56=_unp_read_buf($54, $55);
   var $57=(($56)|(0))!=0;
   if ($57) { label = 14; break; } else { label = 13; break; }
  case 13: 
   $retval=0;
   label = 106; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $61=$4;
   var $62=(($61+4227088)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$4;
   var $65=(($64+4227084)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=((($63)-($66))|0);
   var $68=$67 & 4194303;
   var $69=(($68)>>>(0)) < 260;
   if ($69) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $71=$4;
   var $72=(($71+4227088)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$4;
   var $75=(($74+4227084)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($73)|(0))!=(($76)|(0));
   if ($77) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $79=$4;
   _unp_write_buf($79);
   label = 18; break;
  case 18: 
   var $81=$4;
   var $82=(($81+4227104)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83)|(0))==1;
   if ($84) { label = 19; break; } else { label = 57; break; }
  case 19: 
   var $86=$4;
   var $87=(($86+4229904)|0);
   var $88=$2;
   var $89=$4;
   var $90=_ppm_decode_char($87, $88, $89);
   $ch=$90;
   var $91=$ch;
   _rar_dbgmsg64(((2336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$91,tempInt));
   var $92=$ch;
   var $93=(($92)|(0))==-1;
   if ($93) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $retval=0;
   var $95=$4;
   var $96=(($95+4249504)|0);
   HEAP32[(($96)>>2)]=1;
   label = 106; break;
  case 21: 
   var $98=$ch;
   var $99=$4;
   var $100=(($99+4249500)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($98)|(0))==(($101)|(0));
   if ($102) { label = 22; break; } else { label = 56; break; }
  case 22: 
   var $104=$4;
   var $105=(($104+4229904)|0);
   var $106=$2;
   var $107=$4;
   var $108=_ppm_decode_char($105, $106, $107);
   $next_ch=$108;
   var $109=$next_ch;
   _rar_dbgmsg64(((2272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$109,tempInt));
   var $110=$next_ch;
   var $111=(($110)|(0))==-1;
   if ($111) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $retval=0;
   var $113=$4;
   var $114=(($113+4249504)|0);
   HEAP32[(($114)>>2)]=1;
   label = 106; break;
  case 24: 
   var $116=$next_ch;
   var $117=(($116)|(0))==0;
   if ($117) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $119=$2;
   var $120=$4;
   var $121=_read_tables($119, $120);
   var $122=(($121)|(0))!=0;
   if ($122) { label = 27; break; } else { label = 26; break; }
  case 26: 
   $retval=0;
   label = 106; break;
  case 27: 
   label = 11; break;
  case 28: 
   var $126=$next_ch;
   var $127=(($126)|(0))==2;
   if ($127) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $129=$next_ch;
   var $130=(($129)|(0))==-1;
   if ($130) { label = 30; break; } else { label = 31; break; }
  case 30: 
   label = 106; break;
  case 31: 
   var $133=$next_ch;
   var $134=(($133)|(0))==3;
   if ($134) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $136=$4;
   var $137=$2;
   var $138=_read_vm_code_PPM($136, $137);
   var $139=(($138)|(0))!=0;
   if ($139) { label = 34; break; } else { label = 33; break; }
  case 33: 
   $retval=0;
   label = 106; break;
  case 34: 
   label = 11; break;
  case 35: 
   var $143=$next_ch;
   var $144=(($143)|(0))==4;
   if ($144) { label = 36; break; } else { label = 51; break; }
  case 36: 
   $distance=0;
   $failed=0;
   $i=0;
   label = 37; break;
  case 37: 
   var $147=$i;
   var $148=(($147)|(0)) < 4;
   if ($148) { label = 38; break; } else { var $154 = 0;label = 39; break; }
  case 38: 
   var $150=$failed;
   var $151=(($150)|(0))!=0;
   var $152=$151 ^ 1;
   var $154 = $152;label = 39; break;
  case 39: 
   var $154;
   if ($154) { label = 40; break; } else { label = 48; break; }
  case 40: 
   var $156=$4;
   var $157=(($156+4229904)|0);
   var $158=$2;
   var $159=$4;
   var $160=_ppm_decode_char($157, $158, $159);
   $ch=$160;
   var $161=$ch;
   var $162=(($161)|(0))==-1;
   if ($162) { label = 41; break; } else { label = 42; break; }
  case 41: 
   $failed=1;
   label = 46; break;
  case 42: 
   var $165=$i;
   var $166=(($165)|(0))==3;
   if ($166) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $168=$ch;
   var $169=(($168) & 255);
   var $170=(($169)&(255));
   $length1=$170;
   label = 45; break;
  case 44: 
   var $172=$distance;
   var $173=$172 << 8;
   var $174=$ch;
   var $175=(($174) & 255);
   var $176=(($175)&(255));
   var $177=((($173)+($176))|0);
   $distance=$177;
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $181=$i;
   var $182=((($181)+(1))|0);
   $i=$182;
   label = 37; break;
  case 48: 
   var $184=$failed;
   var $185=(($184)|(0))!=0;
   if ($185) { label = 49; break; } else { label = 50; break; }
  case 49: 
   $retval=0;
   label = 106; break;
  case 50: 
   var $188=$4;
   var $189=$length1;
   var $190=((($189)+(32))|0);
   var $191=$distance;
   var $192=((($191)+(2))|0);
   _copy_string($188, $190, $192);
   label = 11; break;
  case 51: 
   var $194=$next_ch;
   var $195=(($194)|(0))==5;
   if ($195) { label = 52; break; } else { label = 55; break; }
  case 52: 
   var $197=$4;
   var $198=(($197+4229904)|0);
   var $199=$2;
   var $200=$4;
   var $201=_ppm_decode_char($198, $199, $200);
   $length2=$201;
   var $202=$length2;
   _rar_dbgmsg64(((2232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$202,tempInt));
   var $203=$length2;
   var $204=(($203)|(0))==-1;
   if ($204) { label = 53; break; } else { label = 54; break; }
  case 53: 
   $retval=0;
   label = 106; break;
  case 54: 
   var $207=$4;
   var $208=$length2;
   var $209=((($208)+(4))|0);
   _copy_string($207, $209, 1);
   label = 11; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $212=$ch;
   var $213=(($212) & 255);
   var $214=$4;
   var $215=(($214+4227084)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=((($216)+(1))|0);
   HEAP32[(($215)>>2)]=$217;
   var $218=$4;
   var $219=(($218+32772)|0);
   var $220=(($219+$216)|0);
   HEAP8[($220)]=$213;
   label = 11; break;
  case 57: 
   var $222=$4;
   var $223=$4;
   var $224=(($223+4227520)|0);
   var $225=$224;
   var $226=_decode_number($222, $225);
   $number=$226;
   var $227=$number;
   _rar_dbgmsg64(((2160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$227,tempInt));
   var $228=$number;
   var $229=(($228)|(0)) < 256;
   if ($229) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $231=$number;
   var $232=(($231) & 255);
   var $233=$4;
   var $234=(($233+4227084)|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=((($235)+(1))|0);
   HEAP32[(($234)>>2)]=$236;
   var $237=$4;
   var $238=(($237+32772)|0);
   var $239=(($238+$235)|0);
   HEAP8[($239)]=$232;
   label = 11; break;
  case 59: 
   var $241=$number;
   var $242=(($241)|(0)) >= 271;
   if ($242) { label = 60; break; } else { label = 80; break; }
  case 60: 
   var $244=$number;
   var $245=((($244)-(271))|0);
   $number=$245;
   var $246=(($ldecode+$245)|0);
   var $247=HEAP8[($246)];
   var $248=(($247)&(255));
   var $249=((($248)+(3))|0);
   $length=$249;
   var $250=$number;
   var $251=(($lbits+$250)|0);
   var $252=HEAP8[($251)];
   var $253=(($252)&(255));
   $bits=$253;
   var $254=(($253)>>>(0)) > 0;
   if ($254) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $256=$4;
   var $257=_getbits($256);
   var $258=$bits;
   var $259=(((16)-($258))|0);
   var $260=$257 >>> (($259)>>>(0));
   var $261=$length;
   var $262=((($261)+($260))|0);
   $length=$262;
   var $263=$4;
   var $264=$bits;
   _addbits($263, $264);
   label = 62; break;
  case 62: 
   var $266=$4;
   var $267=$4;
   var $268=(($267+4228848)|0);
   var $269=$268;
   var $270=_decode_number($266, $269);
   $dist_number=$270;
   var $271=$dist_number;
   var $272=(($ddecode+($271<<2))|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=((($273)+(1))|0);
   $distance=$274;
   var $275=$dist_number;
   var $276=(($dbits+$275)|0);
   var $277=HEAP8[($276)];
   var $278=(($277)&(255));
   $bits=$278;
   var $279=(($278)>>>(0)) > 0;
   if ($279) { label = 63; break; } else { label = 75; break; }
  case 63: 
   var $281=$dist_number;
   var $282=(($281)|(0)) > 9;
   if ($282) { label = 64; break; } else { label = 73; break; }
  case 64: 
   var $284=$bits;
   var $285=(($284)>>>(0)) > 4;
   if ($285) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $287=$4;
   var $288=_getbits($287);
   var $289=$bits;
   var $290=(((20)-($289))|0);
   var $291=$288 >>> (($290)>>>(0));
   var $292=$291 << 4;
   var $293=$distance;
   var $294=((($293)+($292))|0);
   $distance=$294;
   var $295=$4;
   var $296=$bits;
   var $297=((($296)-(4))|0);
   _addbits($295, $297);
   label = 66; break;
  case 66: 
   var $299=$4;
   var $300=(($299+4227112)|0);
   var $301=HEAP32[(($300)>>2)];
   var $302=(($301)|(0)) > 0;
   if ($302) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $304=$4;
   var $305=(($304+4227112)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=((($306)-(1))|0);
   HEAP32[(($305)>>2)]=$307;
   var $308=$4;
   var $309=(($308+4227108)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=$distance;
   var $312=((($311)+($310))|0);
   $distance=$312;
   label = 72; break;
  case 68: 
   var $314=$4;
   var $315=$4;
   var $316=(($315+4229220)|0);
   var $317=$316;
   var $318=_decode_number($314, $317);
   $low_dist=$318;
   var $319=$low_dist;
   var $320=(($319)|(0))==16;
   if ($320) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $322=$4;
   var $323=(($322+4227112)|0);
   HEAP32[(($323)>>2)]=15;
   var $324=$4;
   var $325=(($324+4227108)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=$distance;
   var $328=((($327)+($326))|0);
   $distance=$328;
   label = 71; break;
  case 70: 
   var $330=$low_dist;
   var $331=$distance;
   var $332=((($331)+($330))|0);
   $distance=$332;
   var $333=$low_dist;
   var $334=$4;
   var $335=(($334+4227108)|0);
   HEAP32[(($335)>>2)]=$333;
   label = 71; break;
  case 71: 
   label = 72; break;
  case 72: 
   label = 74; break;
  case 73: 
   var $339=$4;
   var $340=_getbits($339);
   var $341=$bits;
   var $342=(((16)-($341))|0);
   var $343=$340 >>> (($342)>>>(0));
   var $344=$distance;
   var $345=((($344)+($343))|0);
   $distance=$345;
   var $346=$4;
   var $347=$bits;
   _addbits($346, $347);
   label = 74; break;
  case 74: 
   label = 75; break;
  case 75: 
   var $350=$distance;
   var $351=(($350)>>>(0)) >= 8192;
   if ($351) { label = 76; break; } else { label = 79; break; }
  case 76: 
   var $353=$length;
   var $354=((($353)+(1))|0);
   $length=$354;
   var $355=$distance;
   var $356=(($355)>>>(0)) >= 262144;
   if ($356) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $358=$length;
   var $359=((($358)+(1))|0);
   $length=$359;
   label = 78; break;
  case 78: 
   label = 79; break;
  case 79: 
   var $362=$4;
   var $363=$distance;
   _insert_old_dist($362, $363);
   var $364=$4;
   var $365=$length;
   var $366=$distance;
   _insert_last_match($364, $365, $366);
   var $367=$4;
   var $368=$length;
   var $369=$distance;
   _copy_string($367, $368, $369);
   label = 11; break;
  case 80: 
   var $371=$number;
   var $372=(($371)|(0))==256;
   if ($372) { label = 81; break; } else { label = 84; break; }
  case 81: 
   var $374=$2;
   var $375=$4;
   var $376=_read_end_of_block($374, $375);
   var $377=(($376)|(0))!=0;
   if ($377) { label = 83; break; } else { label = 82; break; }
  case 82: 
   label = 106; break;
  case 83: 
   label = 11; break;
  case 84: 
   var $381=$number;
   var $382=(($381)|(0))==257;
   if ($382) { label = 85; break; } else { label = 88; break; }
  case 85: 
   var $384=$4;
   var $385=$2;
   var $386=_read_vm_code($384, $385);
   var $387=(($386)|(0))!=0;
   if ($387) { label = 87; break; } else { label = 86; break; }
  case 86: 
   $retval=0;
   label = 106; break;
  case 87: 
   label = 11; break;
  case 88: 
   var $391=$number;
   var $392=(($391)|(0))==258;
   if ($392) { label = 89; break; } else { label = 92; break; }
  case 89: 
   var $394=$4;
   var $395=(($394+4229900)|0);
   var $396=HEAP32[(($395)>>2)];
   var $397=(($396)|(0))!=0;
   if ($397) { label = 90; break; } else { label = 91; break; }
  case 90: 
   var $399=$4;
   var $400=$4;
   var $401=(($400+4229900)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=$4;
   var $404=(($403+4229896)|0);
   var $405=HEAP32[(($404)>>2)];
   _copy_string($399, $402, $405);
   label = 91; break;
  case 91: 
   label = 11; break;
  case 92: 
   var $408=$number;
   var $409=(($408)|(0)) < 263;
   if ($409) { label = 93; break; } else { label = 100; break; }
  case 93: 
   var $411=$number;
   var $412=((($411)-(259))|0);
   $dist_number=$412;
   var $413=$dist_number;
   var $414=$4;
   var $415=(($414+4229876)|0);
   var $416=(($415+($413<<2))|0);
   var $417=HEAP32[(($416)>>2)];
   $distance=$417;
   var $418=$dist_number;
   $i=$418;
   label = 94; break;
  case 94: 
   var $420=$i;
   var $421=(($420)|(0)) > 0;
   if ($421) { label = 95; break; } else { label = 97; break; }
  case 95: 
   var $423=$i;
   var $424=((($423)-(1))|0);
   var $425=$4;
   var $426=(($425+4229876)|0);
   var $427=(($426+($424<<2))|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=$i;
   var $430=$4;
   var $431=(($430+4229876)|0);
   var $432=(($431+($429<<2))|0);
   HEAP32[(($432)>>2)]=$428;
   label = 96; break;
  case 96: 
   var $434=$i;
   var $435=((($434)-(1))|0);
   $i=$435;
   label = 94; break;
  case 97: 
   var $437=$distance;
   var $438=$4;
   var $439=(($438+4229876)|0);
   var $440=(($439)|0);
   HEAP32[(($440)>>2)]=$437;
   var $441=$4;
   var $442=$4;
   var $443=(($442+4229420)|0);
   var $444=$443;
   var $445=_decode_number($441, $444);
   $length_number=$445;
   var $446=$length_number;
   var $447=(($ldecode+$446)|0);
   var $448=HEAP8[($447)];
   var $449=(($448)&(255));
   var $450=((($449)+(2))|0);
   $length=$450;
   var $451=$length_number;
   var $452=(($lbits+$451)|0);
   var $453=HEAP8[($452)];
   var $454=(($453)&(255));
   $bits=$454;
   var $455=(($454)>>>(0)) > 0;
   if ($455) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $457=$4;
   var $458=_getbits($457);
   var $459=$bits;
   var $460=(((16)-($459))|0);
   var $461=$458 >>> (($460)>>>(0));
   var $462=$length;
   var $463=((($462)+($461))|0);
   $length=$463;
   var $464=$4;
   var $465=$bits;
   _addbits($464, $465);
   label = 99; break;
  case 99: 
   var $467=$4;
   var $468=$length;
   var $469=$distance;
   _insert_last_match($467, $468, $469);
   var $470=$4;
   var $471=$length;
   var $472=$distance;
   _copy_string($470, $471, $472);
   label = 11; break;
  case 100: 
   var $474=$number;
   var $475=(($474)|(0)) < 272;
   if ($475) { label = 101; break; } else { label = 104; break; }
  case 101: 
   var $477=$number;
   var $478=((($477)-(263))|0);
   $number=$478;
   var $479=(($sddecode+$478)|0);
   var $480=HEAP8[($479)];
   var $481=(($480)&(255));
   var $482=((($481)+(1))|0);
   $distance=$482;
   var $483=$number;
   var $484=(($sdbits+$483)|0);
   var $485=HEAP8[($484)];
   var $486=(($485)&(255));
   $bits=$486;
   var $487=(($486)>>>(0)) > 0;
   if ($487) { label = 102; break; } else { label = 103; break; }
  case 102: 
   var $489=$4;
   var $490=_getbits($489);
   var $491=$bits;
   var $492=(((16)-($491))|0);
   var $493=$490 >>> (($492)>>>(0));
   var $494=$distance;
   var $495=((($494)+($493))|0);
   $distance=$495;
   var $496=$4;
   var $497=$bits;
   _addbits($496, $497);
   label = 103; break;
  case 103: 
   var $499=$4;
   var $500=$distance;
   _insert_old_dist($499, $500);
   var $501=$4;
   var $502=$distance;
   _insert_last_match($501, 2, $502);
   var $503=$4;
   var $504=$distance;
   _copy_string($503, 2, $504);
   label = 11; break;
  case 104: 
   label = 105; break;
  case 105: 
   label = 11; break;
  case 106: 
   var $508=$retval;
   var $509=(($508)|(0))!=0;
   if ($509) { label = 107; break; } else { label = 108; break; }
  case 107: 
   var $511=$4;
   _unp_write_buf($511);
   label = 108; break;
  case 108: 
   var $513=$retval;
   $1=$513;
   label = 109; break;
  case 109: 
   var $515=$1;
   STACKTOP = sp;
   return $515;
  default: assert(0, "bad label: " + label);
 }
}
function _read_tables($fd, $unpack_data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 432)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $bit_length=sp;
   var $table=(sp)+(24);
   var $bit_field;
   var $i;
   var $length;
   var $zero_count;
   var $number;
   var $n;
   var $table_size;
   $2=$fd;
   $3=$unpack_data;
   $table_size=404;
   var $4=$3;
   var $5=(($4+4227076)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$3;
   var $8=(($7+4227096)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=((($9)-(25))|0);
   var $11=(($6)|(0)) > (($10)|(0));
   if ($11) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=_unp_read_buf($13, $14);
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 58; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$3;
   var $21=$3;
   var $22=(($21+4227080)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(((8)-($23))|0);
   var $25=$24 & 7;
   _addbits($20, $25);
   var $26=$3;
   var $27=_getbits($26);
   $bit_field=$27;
   var $28=$bit_field;
   _rar_dbgmsg64(((2640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$28,tempInt));
   var $29=$bit_field;
   var $30=$29 & 32768;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $33=$3;
   var $34=(($33+4227104)|0);
   HEAP32[(($34)>>2)]=1;
   _rar_dbgmsg64(((2608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $35=$3;
   var $36=(($35+4229904)|0);
   var $37=$2;
   var $38=$3;
   var $39=$3;
   var $40=(($39+4249500)|0);
   var $41=_ppm_decode_init($36, $37, $38, $40);
   var $42=(($41)|(0))!=0;
   if ($42) { label = 8; break; } else { label = 7; break; }
  case 7: 
   $1=0;
   label = 58; break;
  case 8: 
   $1=1;
   label = 58; break;
  case 9: 
   var $46=$3;
   var $47=(($46+4227104)|0);
   HEAP32[(($47)>>2)]=0;
   var $48=$3;
   var $49=(($48+4227108)|0);
   HEAP32[(($49)>>2)]=0;
   var $50=$3;
   var $51=(($50+4227112)|0);
   HEAP32[(($51)>>2)]=0;
   var $52=$bit_field;
   var $53=$52 & 16384;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $56=$3;
   var $57=(($56+4227116)|0);
   var $58=$57;
   _memset($58, 0, 404);
   label = 11; break;
  case 11: 
   var $60=$3;
   _addbits($60, 2);
   $i=0;
   label = 12; break;
  case 12: 
   var $62=$i;
   var $63=(($62)|(0)) < 20;
   if ($63) { label = 13; break; } else { label = 26; break; }
  case 13: 
   var $65=$3;
   var $66=_getbits($65);
   var $67=$66 >>> 12;
   var $68=(($67) & 255);
   var $69=(($68)&(255));
   $length=$69;
   var $70=$3;
   _addbits($70, 4);
   var $71=$length;
   var $72=(($71)|(0))==15;
   if ($72) { label = 14; break; } else { label = 23; break; }
  case 14: 
   var $74=$3;
   var $75=_getbits($74);
   var $76=$75 >>> 12;
   var $77=(($76) & 255);
   var $78=(($77)&(255));
   $zero_count=$78;
   var $79=$3;
   _addbits($79, 4);
   var $80=$zero_count;
   var $81=(($80)|(0))==0;
   if ($81) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $83=$i;
   var $84=(($bit_length+$83)|0);
   HEAP8[($84)]=15;
   label = 22; break;
  case 16: 
   var $86=$zero_count;
   var $87=((($86)+(2))|0);
   $zero_count=$87;
   label = 17; break;
  case 17: 
   var $89=$zero_count;
   var $90=((($89)-(1))|0);
   $zero_count=$90;
   var $91=(($89)|(0)) > 0;
   if ($91) { label = 18; break; } else { var $96 = 0;label = 19; break; }
  case 18: 
   var $93=$i;
   var $94=(($93)>>>(0)) < 20;
   var $96 = $94;label = 19; break;
  case 19: 
   var $96;
   if ($96) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $98=$i;
   var $99=((($98)+(1))|0);
   $i=$99;
   var $100=(($bit_length+$98)|0);
   HEAP8[($100)]=0;
   label = 17; break;
  case 21: 
   var $102=$i;
   var $103=((($102)-(1))|0);
   $i=$103;
   label = 22; break;
  case 22: 
   label = 24; break;
  case 23: 
   var $106=$length;
   var $107=(($106) & 255);
   var $108=$i;
   var $109=(($bit_length+$108)|0);
   HEAP8[($109)]=$107;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $112=$i;
   var $113=((($112)+(1))|0);
   $i=$113;
   label = 12; break;
  case 26: 
   var $115=(($bit_length)|0);
   var $116=$3;
   var $117=(($116+4229664)|0);
   var $118=$117;
   _make_decode_tables($115, $118, 20);
   $i=0;
   label = 27; break;
  case 27: 
   var $120=$i;
   var $121=(($120)|(0)) < 404;
   if ($121) { label = 28; break; } else { label = 55; break; }
  case 28: 
   var $123=$3;
   var $124=(($123+4227076)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=$3;
   var $127=(($126+4227096)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=((($128)-(5))|0);
   var $130=(($125)|(0)) > (($129)|(0));
   if ($130) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $132=$2;
   var $133=$3;
   var $134=_unp_read_buf($132, $133);
   var $135=(($134)|(0))!=0;
   if ($135) { label = 31; break; } else { label = 30; break; }
  case 30: 
   $1=0;
   label = 58; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $139=$3;
   var $140=$3;
   var $141=(($140+4229664)|0);
   var $142=$141;
   var $143=_decode_number($139, $142);
   $number=$143;
   var $144=$number;
   var $145=(($144)|(0)) < 16;
   if ($145) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $147=$number;
   var $148=$i;
   var $149=$3;
   var $150=(($149+4227116)|0);
   var $151=(($150+$148)|0);
   var $152=HEAP8[($151)];
   var $153=(($152)&(255));
   var $154=((($147)+($153))|0);
   var $155=$154 & 15;
   var $156=(($155) & 255);
   var $157=$i;
   var $158=(($table+$157)|0);
   HEAP8[($158)]=$156;
   var $159=$i;
   var $160=((($159)+(1))|0);
   $i=$160;
   label = 54; break;
  case 34: 
   var $162=$number;
   var $163=(($162)|(0)) < 18;
   if ($163) { label = 35; break; } else { label = 44; break; }
  case 35: 
   var $165=$number;
   var $166=(($165)|(0))==16;
   if ($166) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $168=$3;
   var $169=_getbits($168);
   var $170=$169 >>> 13;
   var $171=((($170)+(3))|0);
   $n=$171;
   var $172=$3;
   _addbits($172, 3);
   label = 38; break;
  case 37: 
   var $174=$3;
   var $175=_getbits($174);
   var $176=$175 >>> 9;
   var $177=((($176)+(11))|0);
   $n=$177;
   var $178=$3;
   _addbits($178, 7);
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $181=$n;
   var $182=((($181)-(1))|0);
   $n=$182;
   var $183=(($181)|(0)) > 0;
   if ($183) { label = 40; break; } else { var $188 = 0;label = 41; break; }
  case 40: 
   var $185=$i;
   var $186=(($185)|(0)) < 404;
   var $188 = $186;label = 41; break;
  case 41: 
   var $188;
   if ($188) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $190=$i;
   var $191=((($190)-(1))|0);
   var $192=(($table+$191)|0);
   var $193=HEAP8[($192)];
   var $194=$i;
   var $195=(($table+$194)|0);
   HEAP8[($195)]=$193;
   var $196=$i;
   var $197=((($196)+(1))|0);
   $i=$197;
   label = 39; break;
  case 43: 
   label = 53; break;
  case 44: 
   var $200=$number;
   var $201=(($200)|(0))==18;
   if ($201) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $203=$3;
   var $204=_getbits($203);
   var $205=$204 >>> 13;
   var $206=((($205)+(3))|0);
   $n=$206;
   var $207=$3;
   _addbits($207, 3);
   label = 47; break;
  case 46: 
   var $209=$3;
   var $210=_getbits($209);
   var $211=$210 >>> 9;
   var $212=((($211)+(11))|0);
   $n=$212;
   var $213=$3;
   _addbits($213, 7);
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $216=$n;
   var $217=((($216)-(1))|0);
   $n=$217;
   var $218=(($216)|(0)) > 0;
   if ($218) { label = 49; break; } else { var $223 = 0;label = 50; break; }
  case 49: 
   var $220=$i;
   var $221=(($220)|(0)) < 404;
   var $223 = $221;label = 50; break;
  case 50: 
   var $223;
   if ($223) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $225=$i;
   var $226=((($225)+(1))|0);
   $i=$226;
   var $227=(($table+$225)|0);
   HEAP8[($227)]=0;
   label = 48; break;
  case 52: 
   label = 53; break;
  case 53: 
   label = 54; break;
  case 54: 
   label = 27; break;
  case 55: 
   var $232=$3;
   var $233=(($232+4227092)|0);
   HEAP32[(($233)>>2)]=1;
   var $234=$3;
   var $235=(($234+4227076)|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=$3;
   var $238=(($237+4227096)|0);
   var $239=HEAP32[(($238)>>2)];
   var $240=(($236)|(0)) > (($239)|(0));
   if ($240) { label = 56; break; } else { label = 57; break; }
  case 56: 
   $1=0;
   label = 58; break;
  case 57: 
   var $243=(($table)|0);
   var $244=$3;
   var $245=(($244+4227520)|0);
   var $246=$245;
   _make_decode_tables($243, $246, 299);
   var $247=(($table+299)|0);
   var $248=$3;
   var $249=(($248+4228848)|0);
   var $250=$249;
   _make_decode_tables($247, $250, 60);
   var $251=(($table+359)|0);
   var $252=$3;
   var $253=(($252+4229220)|0);
   var $254=$253;
   _make_decode_tables($251, $254, 17);
   var $255=(($table+376)|0);
   var $256=$3;
   var $257=(($256+4229420)|0);
   var $258=$257;
   _make_decode_tables($255, $258, 28);
   var $259=$3;
   var $260=(($259+4227116)|0);
   var $261=$260;
   var $262=$table;
   assert(404 % 1 === 0);(_memcpy($261, $262, 404)|0);
   _rar_dbgmsg64(((2584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   $1=1;
   label = 58; break;
  case 58: 
   var $264=$1;
   STACKTOP = sp;
   return $264;
  default: assert(0, "bad label: " + label);
 }
}
function _unp_write_buf($unpack_data) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $written_border;
   var $part_length;
   var $filtered_size;
   var $write_size;
   var $block_start;
   var $block_length;
   var $block_end;
   var $flt;
   var $next_filter;
   var $prg;
   var $next_prg;
   var $filtered_data;
   var $i;
   var $j;
   $1=$unpack_data;
   _rar_dbgmsg64(((2896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $2=$1;
   var $3=(($2+4227088)|0);
   var $4=HEAP32[(($3)>>2)];
   $written_border=$4;
   var $5=$1;
   var $6=(($5+4227084)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$written_border;
   var $9=((($7)-($8))|0);
   var $10=$9 & 4194303;
   $write_size=$10;
   $i=0;
   label = 2; break;
  case 2: 
   var $12=$i;
   var $13=$1;
   var $14=(($13+4249516)|0);
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($12)>>>(0)) < (($16)>>>(0));
   if ($17) { label = 3; break; } else { label = 35; break; }
  case 3: 
   var $19=$i;
   var $20=$1;
   var $21=(($20+4249516)|0);
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+($19<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   $flt=$25;
   var $26=$flt;
   var $27=(($26)|(0))==0;
   if ($27) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 34; break;
  case 5: 
   var $30=$flt;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))!=0;
   if ($33) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $35=$flt;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=0;
   label = 34; break;
  case 7: 
   var $38=$flt;
   var $39=(($38)|0);
   var $40=HEAP32[(($39)>>2)];
   $block_start=$40;
   var $41=$flt;
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   $block_length=$43;
   var $44=$block_start;
   var $45=$written_border;
   var $46=((($44)-($45))|0);
   var $47=$46 & 4194303;
   var $48=$write_size;
   var $49=(($47)>>>(0)) < (($48)>>>(0));
   if ($49) { label = 8; break; } else { label = 33; break; }
  case 8: 
   var $51=$written_border;
   var $52=$block_start;
   var $53=(($51)|(0))!=(($52)|(0));
   if ($53) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $55=$1;
   var $56=$written_border;
   var $57=$block_start;
   _unp_write_area($55, $56, $57);
   var $58=$block_start;
   $written_border=$58;
   var $59=$1;
   var $60=(($59+4227084)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$written_border;
   var $63=((($61)-($62))|0);
   var $64=$63 & 4194303;
   $write_size=$64;
   label = 10; break;
  case 10: 
   var $66=$block_length;
   var $67=$write_size;
   var $68=(($66)>>>(0)) <= (($67)>>>(0));
   if ($68) { label = 11; break; } else { label = 24; break; }
  case 11: 
   var $70=$block_start;
   var $71=$block_length;
   var $72=((($70)+($71))|0);
   var $73=$72 & 4194303;
   $block_end=$73;
   var $74=$block_start;
   var $75=$block_end;
   var $76=(($74)>>>(0)) < (($75)>>>(0));
   if ($76) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $78=$block_end;
   var $79=(($78)|(0))==0;
   if ($79) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $81=$1;
   var $82=(($81+4249556)|0);
   var $83=$1;
   var $84=(($83+32772)|0);
   var $85=(($84)|0);
   var $86=$block_start;
   var $87=(($85+$86)|0);
   var $88=$block_length;
   _rarvm_set_memory($82, 0, $87, $88);
   label = 15; break;
  case 14: 
   var $90=$block_start;
   var $91=(((4194303)-($90))|0);
   $part_length=$91;
   var $92=$1;
   var $93=(($92+4249556)|0);
   var $94=$1;
   var $95=(($94+32772)|0);
   var $96=(($95)|0);
   var $97=$block_start;
   var $98=(($96+$97)|0);
   var $99=$part_length;
   _rarvm_set_memory($93, 0, $98, $99);
   var $100=$1;
   var $101=(($100+4249556)|0);
   var $102=$part_length;
   var $103=$1;
   var $104=(($103+32772)|0);
   var $105=(($104)|0);
   var $106=$block_end;
   _rarvm_set_memory($101, $102, $105, $106);
   label = 15; break;
  case 15: 
   var $108=$flt;
   var $109=(($108+16)|0);
   $prg=$109;
   var $110=$1;
   var $111=$prg;
   _execute_code($110, $111);
   var $112=$prg;
   var $113=(($112+60)|0);
   var $114=HEAP32[(($113)>>2)];
   $filtered_data=$114;
   var $115=$prg;
   var $116=(($115+64)|0);
   var $117=HEAP32[(($116)>>2)];
   $filtered_size=$117;
   var $118=$i;
   var $119=$1;
   var $120=(($119+4249516)|0);
   var $121=(($120)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122+($118<<2))|0);
   var $124=HEAP32[(($123)>>2)];
   _rar_filter_delete($124);
   var $125=$i;
   var $126=$1;
   var $127=(($126+4249516)|0);
   var $128=(($127)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+($125<<2))|0);
   HEAP32[(($130)>>2)]=0;
   label = 16; break;
  case 16: 
   var $132=$i;
   var $133=((($132)+(1))|0);
   var $134=$1;
   var $135=(($134+4249516)|0);
   var $136=(($135+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($133)>>>(0)) < (($137)>>>(0));
   if ($138) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $140=$i;
   var $141=((($140)+(1))|0);
   var $142=$1;
   var $143=(($142+4249516)|0);
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+($141<<2))|0);
   var $147=HEAP32[(($146)>>2)];
   $next_filter=$147;
   var $148=$next_filter;
   var $149=(($148)|(0))==0;
   if ($149) { label = 21; break; } else { label = 18; break; }
  case 18: 
   var $151=$next_filter;
   var $152=(($151)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$block_start;
   var $155=(($153)|(0))!=(($154)|(0));
   if ($155) { label = 21; break; } else { label = 19; break; }
  case 19: 
   var $157=$next_filter;
   var $158=(($157+4)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$filtered_size;
   var $161=(($159)|(0))!=(($160)|(0));
   if ($161) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $163=$next_filter;
   var $164=(($163+12)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165)|(0))!=0;
   if ($166) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 23; break;
  case 22: 
   var $169=$1;
   var $170=(($169+4249556)|0);
   var $171=$filtered_data;
   var $172=$filtered_size;
   _rarvm_set_memory($170, 0, $171, $172);
   var $173=$i;
   var $174=((($173)+(1))|0);
   var $175=$1;
   var $176=(($175+4249516)|0);
   var $177=(($176)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+($174<<2))|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=(($180+16)|0);
   $next_prg=$181;
   var $182=$1;
   var $183=$next_prg;
   _execute_code($182, $183);
   var $184=$next_prg;
   var $185=(($184+60)|0);
   var $186=HEAP32[(($185)>>2)];
   $filtered_data=$186;
   var $187=$next_prg;
   var $188=(($187+64)|0);
   var $189=HEAP32[(($188)>>2)];
   $filtered_size=$189;
   var $190=$i;
   var $191=((($190)+(1))|0);
   $i=$191;
   var $192=$i;
   var $193=$1;
   var $194=(($193+4249516)|0);
   var $195=(($194)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($196+($192<<2))|0);
   var $198=HEAP32[(($197)>>2)];
   _rar_filter_delete($198);
   var $199=$i;
   var $200=$1;
   var $201=(($200+4249516)|0);
   var $202=(($201)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203+($199<<2))|0);
   HEAP32[(($204)>>2)]=0;
   label = 16; break;
  case 23: 
   var $206=$1;
   var $207=$filtered_data;
   var $208=$filtered_size;
   _unp_write_data($206, $207, $208);
   var $209=$block_end;
   $written_border=$209;
   var $210=$1;
   var $211=(($210+4227084)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=$written_border;
   var $214=((($212)-($213))|0);
   var $215=$214 & 4194303;
   $write_size=$215;
   label = 32; break;
  case 24: 
   var $217=$i;
   $j=$217;
   label = 25; break;
  case 25: 
   var $219=$j;
   var $220=$1;
   var $221=(($220+4249516)|0);
   var $222=(($221+4)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=(($219)>>>(0)) < (($223)>>>(0));
   if ($224) { label = 26; break; } else { label = 31; break; }
  case 26: 
   var $226=$j;
   var $227=$1;
   var $228=(($227+4249516)|0);
   var $229=(($228)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=(($230+($226<<2))|0);
   var $232=HEAP32[(($231)>>2)];
   $flt=$232;
   var $233=$flt;
   var $234=(($233)|(0))!=0;
   if ($234) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $236=$flt;
   var $237=(($236+12)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=(($238)|(0))!=0;
   if ($239) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $241=$flt;
   var $242=(($241+12)|0);
   HEAP32[(($242)>>2)]=0;
   label = 29; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $245=$j;
   var $246=((($245)+(1))|0);
   $j=$246;
   label = 25; break;
  case 31: 
   var $248=$written_border;
   var $249=$1;
   var $250=(($249+4227088)|0);
   HEAP32[(($250)>>2)]=$248;
   label = 36; break;
  case 32: 
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $254=$i;
   var $255=((($254)+(1))|0);
   $i=$255;
   label = 2; break;
  case 35: 
   var $257=$1;
   var $258=$written_border;
   var $259=$1;
   var $260=(($259+4227084)|0);
   var $261=HEAP32[(($260)>>2)];
   _unp_write_area($257, $258, $261);
   var $262=$1;
   var $263=(($262+4227084)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=$1;
   var $266=(($265+4227088)|0);
   HEAP32[(($266)>>2)]=$264;
   label = 36; break;
  case 36: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _copy_string($unpack_data, $length, $distance) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $dest_ptr;
   $1=$unpack_data;
   $2=$length;
   $3=$distance;
   var $4=$1;
   var $5=(($4+4227084)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$3;
   var $8=((($6)-($7))|0);
   $dest_ptr=$8;
   var $9=$dest_ptr;
   var $10=(($9)>>>(0)) < 4194044;
   if ($10) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $12=$1;
   var $13=(($12+4227084)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)>>>(0)) < 4194044;
   if ($15) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $17=$dest_ptr;
   var $18=((($17)+(1))|0);
   $dest_ptr=$18;
   var $19=$1;
   var $20=(($19+32772)|0);
   var $21=(($20+$17)|0);
   var $22=HEAP8[($21)];
   var $23=$1;
   var $24=(($23+4227084)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=((($25)+(1))|0);
   HEAP32[(($24)>>2)]=$26;
   var $27=$1;
   var $28=(($27+32772)|0);
   var $29=(($28+$25)|0);
   HEAP8[($29)]=$22;
   label = 4; break;
  case 4: 
   var $31=$2;
   var $32=((($31)-(1))|0);
   $2=$32;
   var $33=(($32)>>>(0)) > 0;
   if ($33) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $35=$dest_ptr;
   var $36=((($35)+(1))|0);
   $dest_ptr=$36;
   var $37=$1;
   var $38=(($37+32772)|0);
   var $39=(($38+$35)|0);
   var $40=HEAP8[($39)];
   var $41=$1;
   var $42=(($41+4227084)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)+(1))|0);
   HEAP32[(($42)>>2)]=$44;
   var $45=$1;
   var $46=(($45+32772)|0);
   var $47=(($46+$43)|0);
   HEAP8[($47)]=$40;
   label = 4; break;
  case 6: 
   label = 11; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $51=$2;
   var $52=((($51)-(1))|0);
   $2=$52;
   var $53=(($51)|(0))!=0;
   if ($53) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $55=$dest_ptr;
   var $56=((($55)+(1))|0);
   $dest_ptr=$56;
   var $57=$55 & 4194303;
   var $58=$1;
   var $59=(($58+32772)|0);
   var $60=(($59+$57)|0);
   var $61=HEAP8[($60)];
   var $62=$1;
   var $63=(($62+4227084)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$1;
   var $66=(($65+32772)|0);
   var $67=(($66+$64)|0);
   HEAP8[($67)]=$61;
   var $68=$1;
   var $69=(($68+4227084)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)+(1))|0);
   var $72=$71 & 4194303;
   var $73=$1;
   var $74=(($73+4227084)|0);
   HEAP32[(($74)>>2)]=$72;
   label = 8; break;
  case 10: 
   label = 11; break;
  case 11: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _insert_old_dist($unpack_data, $distance) {
 var label = 0;
 var $1;
 var $2;
 $1=$unpack_data;
 $2=$distance;
 var $3=$1;
 var $4=(($3+4229876)|0);
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$1;
 var $8=(($7+4229876)|0);
 var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=$6;
 var $10=$1;
 var $11=(($10+4229876)|0);
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$1;
 var $15=(($14+4229876)|0);
 var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=$13;
 var $17=$1;
 var $18=(($17+4229876)|0);
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$1;
 var $22=(($21+4229876)|0);
 var $23=(($22+4)|0);
 HEAP32[(($23)>>2)]=$20;
 var $24=$2;
 var $25=$1;
 var $26=(($25+4229876)|0);
 var $27=(($26)|0);
 HEAP32[(($27)>>2)]=$24;
 return;
}
function _insert_last_match($unpack_data, $length, $distance) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$unpack_data;
 $2=$length;
 $3=$distance;
 var $4=$3;
 var $5=$1;
 var $6=(($5+4229896)|0);
 HEAP32[(($6)>>2)]=$4;
 var $7=$2;
 var $8=$1;
 var $9=(($8+4229900)|0);
 HEAP32[(($9)>>2)]=$7;
 return;
}
function _read_vm_code_PPM($unpack_data, $fd) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $first_byte;
   var $length;
   var $i;
   var $ch;
   var $retval;
   var $b1;
   var $b2;
   var $vmcode;
   $2=$unpack_data;
   $3=$fd;
   var $4=$2;
   var $5=(($4+4229904)|0);
   var $6=$3;
   var $7=$2;
   var $8=_ppm_decode_char($5, $6, $7);
   $first_byte=$8;
   var $9=$first_byte;
   var $10=(($9)|(0))==-1;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 23; break;
  case 3: 
   var $13=$first_byte;
   var $14=$13 & 7;
   var $15=((($14)+(1))|0);
   $length=$15;
   var $16=$length;
   var $17=(($16)|(0))==7;
   if ($17) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $19=$2;
   var $20=(($19+4229904)|0);
   var $21=$3;
   var $22=$2;
   var $23=_ppm_decode_char($20, $21, $22);
   $b1=$23;
   var $24=$b1;
   var $25=(($24)|(0))==-1;
   if ($25) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=0;
   label = 23; break;
  case 6: 
   var $28=$b1;
   var $29=((($28)+(7))|0);
   $length=$29;
   label = 14; break;
  case 7: 
   var $31=$length;
   var $32=(($31)|(0))==8;
   if ($32) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $34=$2;
   var $35=(($34+4229904)|0);
   var $36=$3;
   var $37=$2;
   var $38=_ppm_decode_char($35, $36, $37);
   $b1=$38;
   var $39=$b1;
   var $40=(($39)|(0))==-1;
   if ($40) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $1=0;
   label = 23; break;
  case 10: 
   var $43=$2;
   var $44=(($43+4229904)|0);
   var $45=$3;
   var $46=$2;
   var $47=_ppm_decode_char($44, $45, $46);
   $b2=$47;
   var $48=$b2;
   var $49=(($48)|(0))==-1;
   if ($49) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $1=0;
   label = 23; break;
  case 12: 
   var $52=$b1;
   var $53=($52<<8);
   var $54=$b2;
   var $55=((($53)+($54))|0);
   $length=$55;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $58=$length;
   var $59=((($58)+(2))|0);
   var $60=_malloc($59);
   $vmcode=$60;
   var $61=$length;
   _rar_dbgmsg64(((2920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$61,tempInt));
   var $62=$vmcode;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 16; break; } else { label = 15; break; }
  case 15: 
   $1=0;
   label = 23; break;
  case 16: 
   $i=0;
   label = 17; break;
  case 17: 
   var $67=$i;
   var $68=$length;
   var $69=(($67)|(0)) < (($68)|(0));
   if ($69) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $71=$2;
   var $72=(($71+4229904)|0);
   var $73=$3;
   var $74=$2;
   var $75=_ppm_decode_char($72, $73, $74);
   $ch=$75;
   var $76=$ch;
   var $77=(($76)|(0))==-1;
   if ($77) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $79=$vmcode;
   _free($79);
   $1=0;
   label = 23; break;
  case 20: 
   var $81=$ch;
   var $82=(($81) & 255);
   var $83=$i;
   var $84=$vmcode;
   var $85=(($84+$83)|0);
   HEAP8[($85)]=$82;
   label = 21; break;
  case 21: 
   var $87=$i;
   var $88=((($87)+(1))|0);
   $i=$88;
   label = 17; break;
  case 22: 
   var $90=$2;
   var $91=$first_byte;
   var $92=$vmcode;
   var $93=$length;
   var $94=_add_vm_code($90, $91, $92, $93);
   $retval=$94;
   var $95=$vmcode;
   _free($95);
   var $96=$retval;
   $1=$96;
   label = 23; break;
  case 23: 
   var $98=$1;
   STACKTOP = sp;
   return $98;
  default: assert(0, "bad label: " + label);
 }
}
function _read_end_of_block($fd, $unpack_data) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $bit_field;
   var $new_table;
   var $new_file;
   $1=$fd;
   $2=$unpack_data;
   $new_file=0;
   var $3=$2;
   var $4=_getbits($3);
   $bit_field=$4;
   var $5=$bit_field;
   var $6=$5 & 32768;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $new_table=1;
   var $9=$2;
   _addbits($9, 1);
   label = 4; break;
  case 3: 
   $new_file=1;
   var $11=$bit_field;
   var $12=$11 & 16384;
   $new_table=$12;
   var $13=$2;
   _addbits($13, 2);
   label = 4; break;
  case 4: 
   var $15=$new_table;
   var $16=(($15)|(0))!=0;
   var $17=$16 ^ 1;
   var $18=(($17)&(1));
   var $19=$2;
   var $20=(($19+4227092)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$new_file;
   var $22=$new_table;
   var $23=$2;
   var $24=(($23+4227092)|0);
   var $25=HEAP32[(($24)>>2)];
   _rar_dbgmsg64(((2944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$21,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(16))>>2)]=$25,tempInt));
   var $26=$new_file;
   var $27=(($26)|(0))!=0;
   if ($27) { var $40 = 1;label = 8; break; } else { label = 5; break; }
  case 5: 
   var $29=$new_table;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 6; break; } else { var $38 = 0;label = 7; break; }
  case 6: 
   var $32=$1;
   var $33=$2;
   var $34=_read_tables($32, $33);
   var $35=(($34)|(0))!=0;
   var $36=$35 ^ 1;
   var $38 = $36;label = 7; break;
  case 7: 
   var $38;
   var $40 = $38;label = 8; break;
  case 8: 
   var $40;
   var $41=$40 ^ 1;
   var $42=(($41)&(1));
   STACKTOP = sp;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _read_vm_code($unpack_data, $fd) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $first_byte;
   var $length;
   var $i;
   var $retval;
   var $vmcode;
   $2=$unpack_data;
   $3=$fd;
   var $4=$2;
   var $5=_getbits($4);
   var $6=$5 >>> 8;
   $first_byte=$6;
   var $7=$2;
   _addbits($7, 8);
   var $8=$first_byte;
   var $9=$8 & 7;
   var $10=((($9)+(1))|0);
   $length=$10;
   var $11=$length;
   var $12=(($11)|(0))==7;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$2;
   var $15=_getbits($14);
   var $16=$15 >>> 8;
   var $17=((($16)+(7))|0);
   $length=$17;
   var $18=$2;
   _addbits($18, 8);
   label = 6; break;
  case 3: 
   var $20=$length;
   var $21=(($20)|(0))==8;
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=$2;
   var $24=_getbits($23);
   $length=$24;
   var $25=$2;
   _addbits($25, 16);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $28=$length;
   var $29=((($28)+(2))|0);
   var $30=_malloc($29);
   $vmcode=$30;
   var $31=$length;
   _rar_dbgmsg64(((3360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$31,tempInt));
   var $32=$vmcode;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 8; break; } else { label = 7; break; }
  case 7: 
   $1=0;
   label = 17; break;
  case 8: 
   $i=0;
   label = 9; break;
  case 9: 
   var $37=$i;
   var $38=$length;
   var $39=(($37)|(0)) < (($38)|(0));
   if ($39) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $41=$2;
   var $42=(($41+4227076)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$2;
   var $45=(($44+4227096)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=((($46)-(1))|0);
   var $48=(($43)|(0)) >= (($47)|(0));
   if ($48) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $50=$3;
   var $51=$2;
   var $52=_unp_read_buf($50, $51);
   var $53=(($52)|(0))!=0;
   if ($53) { label = 14; break; } else { label = 12; break; }
  case 12: 
   var $55=$i;
   var $56=$length;
   var $57=((($56)-(1))|0);
   var $58=(($55)|(0)) < (($57)|(0));
   if ($58) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $1=0;
   label = 17; break;
  case 14: 
   var $61=$2;
   var $62=_getbits($61);
   var $63=$62 >>> 8;
   var $64=(($63) & 255);
   var $65=$i;
   var $66=$vmcode;
   var $67=(($66+$65)|0);
   HEAP8[($67)]=$64;
   var $68=$2;
   _addbits($68, 8);
   label = 15; break;
  case 15: 
   var $70=$i;
   var $71=((($70)+(1))|0);
   $i=$71;
   label = 9; break;
  case 16: 
   var $73=$2;
   var $74=$first_byte;
   var $75=$vmcode;
   var $76=$length;
   var $77=_add_vm_code($73, $74, $75, $76);
   $retval=$77;
   var $78=$vmcode;
   _free($78);
   var $79=$retval;
   $1=$79;
   label = 17; break;
  case 17: 
   var $81=$1;
   STACKTOP = sp;
   return $81;
  default: assert(0, "bad label: " + label);
 }
}
function _cli_unrar_open($fd, $dirname, $state) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ofd;
   var $retval;
   var $filename=sp;
   var $unpack_data;
   var $main_hdr;
   var $offset;
   var $comment_header;
   $2=$fd;
   $3=$dirname;
   $4=$state;
   var $5=$4;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=1;
   label = 30; break;
  case 3: 
   var $9=$2;
   var $10=_is_rar_archive($9);
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $1=2;
   label = 30; break;
  case 5: 
   var $14=_malloc(4266976);
   var $15=$14;
   $unpack_data=$15;
   var $16=$unpack_data;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 7; break; } else { label = 6; break; }
  case 6: 
   $1=3;
   label = 30; break;
  case 7: 
   var $20=$unpack_data;
   var $21=(($20+4249556)|0);
   var $22=(($21)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=$unpack_data;
   var $24=(($23+4249524)|0);
   HEAP32[(($24)>>2)]=0;
   var $25=$unpack_data;
   var $26=(($25+4249508)|0);
   var $27=(($26)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=$unpack_data;
   var $29=(($28+4249516)|0);
   var $30=(($29)|0);
   HEAP32[(($30)>>2)]=0;
   var $31=$unpack_data;
   var $32=(($31+4249508)|0);
   var $33=(($32+4)|0);
   HEAP32[(($33)>>2)]=0;
   var $34=$unpack_data;
   var $35=(($34+4249516)|0);
   var $36=(($35+4)|0);
   HEAP32[(($36)>>2)]=0;
   var $37=$unpack_data;
   var $38=(($37+4249596)|0);
   HEAP32[(($38)>>2)]=-1;
   var $39=$unpack_data;
   var $40=(($39+4229904)|0);
   _ppm_constructor($40);
   var $41=$2;
   var $42=_read_header($41, 115);
   var $43=$42;
   $main_hdr=$43;
   var $44=$main_hdr;
   var $45=(($44)|(0))!=0;
   if ($45) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $47=$unpack_data;
   var $48=(($47+4229904)|0);
   _ppm_destructor($48);
   var $49=$unpack_data;
   _init_filters($49);
   var $50=$unpack_data;
   _unpack_free_data($50);
   var $51=$unpack_data;
   var $52=$51;
   _free($52);
   $1=4;
   label = 30; break;
  case 9: 
   var $54=(($filename)|0);
   var $55=$3;
   var $56=_snprintf($54, 1024, ((2120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$55,tempInt));
   var $57=(($filename)|0);
   var $58=_mkdir($57, 448);
   var $59=(($58)|(0))!=0;
   if ($59) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $61=$main_hdr;
   var $62=$61;
   _free($62);
   var $63=$unpack_data;
   var $64=(($63+4229904)|0);
   _ppm_destructor($64);
   var $65=$unpack_data;
   _init_filters($65);
   var $66=$unpack_data;
   _unpack_free_data($66);
   var $67=$unpack_data;
   var $68=$67;
   _free($68);
   $1=5;
   label = 30; break;
  case 11: 
   var $70=(($filename)|0);
   var $71=_strdup($70);
   var $72=$4;
   var $73=(($72+20)|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=$4;
   var $75=(($74+20)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|(0))!=0;
   if ($77) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $79=$main_hdr;
   var $80=$79;
   _free($80);
   var $81=$unpack_data;
   var $82=(($81+4229904)|0);
   _ppm_destructor($82);
   var $83=$unpack_data;
   _init_filters($83);
   var $84=$unpack_data;
   _unpack_free_data($84);
   var $85=$unpack_data;
   var $86=$85;
   _free($86);
   $1=3;
   label = 30; break;
  case 13: 
   var $88=$main_hdr;
   var $89=(($88+6)|0);
   var $90=HEAP16[(($89)>>1)];
   var $91=(($90)&(65535));
   var $92=(($91)|(0)) < 13;
   if ($92) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $94=$main_hdr;
   var $95=$94;
   _free($95);
   var $96=$unpack_data;
   var $97=(($96+4229904)|0);
   _ppm_destructor($97);
   var $98=$unpack_data;
   _init_filters($98);
   var $99=$unpack_data;
   _unpack_free_data($99);
   var $100=$unpack_data;
   var $101=$100;
   _free($101);
   var $102=$4;
   var $103=(($102+20)|0);
   var $104=HEAP32[(($103)>>2)];
   _free($104);
   $1=2;
   label = 30; break;
  case 15: 
   var $106=$main_hdr;
   var $107=(($106+4)|0);
   var $108=HEAP16[(($107)>>1)];
   var $109=(($108)&(65535));
   var $110=$109 & 2;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 16; break; } else { label = 25; break; }
  case 16: 
   var $113=$2;
   var $114=_lseek($113, 0, 1);
   $offset=$114;
   var $115=$2;
   var $116=_read_header($115, 117);
   var $117=$116;
   $comment_header=$117;
   var $118=$comment_header;
   var $119=(($118)|(0))!=0;
   if ($119) { label = 17; break; } else { label = 24; break; }
  case 17: 
   var $121=(($filename)|0);
   var $122=$4;
   var $123=(($122+20)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=_snprintf($121, 1024, ((3696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$124,tempInt));
   var $126=(($filename)|0);
   var $127=_open($126, 1537, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=384,tempInt));
   $ofd=$127;
   var $128=$ofd;
   var $129=(($128)|(0)) < 0;
   if ($129) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $131=$comment_header;
   var $132=$131;
   _free($132);
   var $133=$main_hdr;
   var $134=$133;
   _free($134);
   var $135=$unpack_data;
   var $136=(($135+4229904)|0);
   _ppm_destructor($136);
   var $137=$unpack_data;
   _init_filters($137);
   var $138=$unpack_data;
   _unpack_free_data($138);
   var $139=$unpack_data;
   var $140=$139;
   _free($140);
   var $141=$4;
   var $142=(($141+20)|0);
   var $143=HEAP32[(($142)>>2)];
   _free($143);
   $1=6;
   label = 30; break;
  case 19: 
   var $145=$comment_header;
   var $146=(($145+11)|0);
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   var $149=(($148)|(0))==48;
   if ($149) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $151=$2;
   var $152=$ofd;
   var $153=$comment_header;
   var $154=(($153+8)|0);
   var $155=HEAP16[(($154)>>1)];
   var $156$0=(($155)&(65535));
   var $156$1=0;
   var $157$0=_copy_file_data($151, $152, $156$0, $156$1);
   var $157$1=tempRet0;
   label = 22; break;
  case 21: 
   var $159=$ofd;
   var $160=$unpack_data;
   var $161=(($160)|0);
   HEAP32[(($161)>>2)]=$159;
   var $162=$comment_header;
   var $163=(($162+8)|0);
   var $164=HEAP16[(($163)>>1)];
   var $165$0=(($164)&(65535));
   var $165$1=0;
   var $166=$unpack_data;
   var $167=(($166+4249544)|0);
   var $st$0$0=(($167)|0);
   HEAP32[(($st$0$0)>>2)]=$165$0;
   var $st$1$1=(($167+4)|0);
   HEAP32[(($st$1$1)>>2)]=$165$1;
   var $168=$comment_header;
   var $169=(($168+6)|0);
   var $170=HEAP16[(($169)>>1)];
   var $171=(($170)&(65535));
   var $172=((($171)-(13))|0);
   var $173=$unpack_data;
   var $174=(($173+4249552)|0);
   HEAP32[(($174)>>2)]=$172;
   var $175=$2;
   var $176=$comment_header;
   var $177=(($176+10)|0);
   var $178=HEAP8[($177)];
   var $179=(($178)&(255));
   var $180=$unpack_data;
   var $181=_rar_unpack($175, $179, 0, $180);
   $retval=$181;
   var $182=$unpack_data;
   _unpack_free_data($182);
   label = 22; break;
  case 22: 
   var $184=$ofd;
   var $185=_close($184);
   label = 23; break;
  case 23: 
   var $187=$comment_header;
   var $188=$187;
   _free($188);
   label = 24; break;
  case 24: 
   var $190=$2;
   var $191=$offset;
   var $192=_lseek($190, $191, 0);
   label = 25; break;
  case 25: 
   var $194=$main_hdr;
   var $195=(($194+6)|0);
   var $196=HEAP16[(($195)>>1)];
   var $197=(($196)&(65535));
   var $198=(($197)|(0)) > 13;
   if ($198) { label = 26; break; } else { label = 29; break; }
  case 26: 
   var $200=$2;
   var $201=$main_hdr;
   var $202=(($201+6)|0);
   var $203=HEAP16[(($202)>>1)];
   var $204=(($203)&(65535));
   var $205=((($204)-(13))|0);
   var $206=_lseek($200, $205, 1);
   var $207=(($206)|(0))!=0;
   if ($207) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $209=$main_hdr;
   var $210=$209;
   _free($210);
   var $211=$unpack_data;
   var $212=(($211+4229904)|0);
   _ppm_destructor($212);
   var $213=$unpack_data;
   _init_filters($213);
   var $214=$unpack_data;
   _unpack_free_data($214);
   var $215=$unpack_data;
   var $216=$215;
   _free($216);
   var $217=$4;
   var $218=(($217+20)|0);
   var $219=HEAP32[(($218)>>2)];
   _free($219);
   $1=2;
   label = 30; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $222=$unpack_data;
   var $223=$4;
   var $224=(($223+12)|0);
   HEAP32[(($224)>>2)]=$222;
   var $225=$main_hdr;
   var $226=$4;
   var $227=(($226+16)|0);
   HEAP32[(($227)>>2)]=$225;
   var $228=$4;
   var $229=(($228+4)|0);
   HEAP32[(($229)>>2)]=0;
   var $230=$4;
   var $231=(($230+8)|0);
   HEAP32[(($231)>>2)]=0;
   var $232=$4;
   var $233=(($232+24)|0);
   HEAP32[(($233)>>2)]=1;
   var $234=$offset;
   var $235=$4;
   var $236=(($235+28)|0);
   HEAP32[(($236)>>2)]=$234;
   var $237=$2;
   var $238=$4;
   var $239=(($238+32)|0);
   HEAP32[(($239)>>2)]=$237;
   $1=0;
   label = 30; break;
  case 30: 
   var $241=$1;
   STACKTOP = sp;
   return $241;
  default: assert(0, "bad label: " + label);
 }
}
function _is_rar_archive($fd) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $mark=sp;
   $2=$fd;
   var $3=$2;
   var $4=_read($3, $mark, 7);
   var $5=(($4)|(0))!=7;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 8; break;
  case 3: 
   var $8=$mark;
   var $9=_memcmp($8, ((1744)|0), 7);
   var $10=(($9)|(0))==0;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 8; break;
  case 5: 
   var $13=$mark;
   var $14=_memcmp($13, ((1751)|0), 7);
   var $15=(($14)|(0))==0;
   if ($15) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=1;
   label = 8; break;
  case 7: 
   $1=0;
   label = 8; break;
  case 8: 
   var $19=$1;
   STACKTOP = sp;
   return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _read_header($fd, $hdr_type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $encrypt_ver=sp;
   var $main_hdr;
   var $file_hdr;
   var $comment_hdr;
   $2=$fd;
   $3=$hdr_type;
   var $4=$3;
   if ((($4)|(0))==115) {
    label = 2; break;
   }
   else if ((($4)|(0))==116) {
    label = 11; break;
   }
   else if ((($4)|(0))==117) {
    label = 21; break;
   }
   else {
   label = 26; break;
   }
  case 2: 
   var $6=_malloc(16);
   var $7=$6;
   $main_hdr=$7;
   var $8=$main_hdr;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 27; break;
  case 4: 
   var $12=$2;
   var $13=$main_hdr;
   var $14=_read($12, $13, 13);
   var $15=(($14)|(0))!=13;
   if ($15) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $17=$main_hdr;
   var $18=$17;
   _free($18);
   $1=0;
   label = 27; break;
  case 6: 
   var $20=$main_hdr;
   var $21=(($20+4)|0);
   var $22=HEAP16[(($21)>>1)];
   var $23=(($22)&(65535));
   var $24=$23 >> 8;
   var $25=$main_hdr;
   var $26=(($25+4)|0);
   var $27=HEAP16[(($26)>>1)];
   var $28=(($27)&(65535));
   var $29=$28 << 8;
   var $30=$24 | $29;
   var $31=(($30) & 65535);
   var $32=_htons($31);
   var $33=$main_hdr;
   var $34=(($33+4)|0);
   HEAP16[(($34)>>1)]=$32;
   var $35=$main_hdr;
   var $36=(($35+6)|0);
   var $37=HEAP16[(($36)>>1)];
   var $38=(($37)&(65535));
   var $39=$38 >> 8;
   var $40=$main_hdr;
   var $41=(($40+6)|0);
   var $42=HEAP16[(($41)>>1)];
   var $43=(($42)&(65535));
   var $44=$43 << 8;
   var $45=$39 | $44;
   var $46=(($45) & 65535);
   var $47=_htons($46);
   var $48=$main_hdr;
   var $49=(($48+6)|0);
   HEAP16[(($49)>>1)]=$47;
   var $50=$main_hdr;
   var $51=(($50)|0);
   var $52=HEAP16[(($51)>>1)];
   var $53=(($52)&(65535));
   var $54=$53 >> 8;
   var $55=$main_hdr;
   var $56=(($55)|0);
   var $57=HEAP16[(($56)>>1)];
   var $58=(($57)&(65535));
   var $59=$58 << 8;
   var $60=$54 | $59;
   var $61=(($60) & 65535);
   var $62=_htons($61);
   var $63=$main_hdr;
   var $64=(($63)|0);
   HEAP16[(($64)>>1)]=$62;
   var $65=$main_hdr;
   var $66=(($65+4)|0);
   var $67=HEAP16[(($66)>>1)];
   var $68=(($67)&(65535));
   var $69=$68 & 512;
   var $70=(($69)|(0))!=0;
   if ($70) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $72=$2;
   var $73=_read($72, $encrypt_ver, 1);
   var $74=(($73)|(0))!=1;
   if ($74) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $76=$main_hdr;
   var $77=$76;
   _free($77);
   $1=0;
   label = 27; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $80=$main_hdr;
   var $81=$80;
   $1=$81;
   label = 27; break;
  case 11: 
   var $83=_malloc(56);
   var $84=$83;
   $file_hdr=$84;
   var $85=$file_hdr;
   var $86=(($85)|(0))!=0;
   if ($86) { label = 13; break; } else { label = 12; break; }
  case 12: 
   $1=0;
   label = 27; break;
  case 13: 
   var $89=$2;
   var $90=$file_hdr;
   var $91=_read($89, $90, 32);
   var $92=(($91)|(0))!=32;
   if ($92) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $94=$file_hdr;
   var $95=$94;
   _free($95);
   $1=0;
   label = 27; break;
  case 15: 
   var $97=$file_hdr;
   var $98=(($97+4)|0);
   var $99=HEAP16[(($98)>>1)];
   var $100=(($99)&(65535));
   var $101=$100 >> 8;
   var $102=$file_hdr;
   var $103=(($102+4)|0);
   var $104=HEAP16[(($103)>>1)];
   var $105=(($104)&(65535));
   var $106=$105 << 8;
   var $107=$101 | $106;
   var $108=(($107) & 65535);
   var $109=_htons($108);
   var $110=$file_hdr;
   var $111=(($110+4)|0);
   HEAP16[(($111)>>1)]=$109;
   var $112=$file_hdr;
   var $113=(($112+6)|0);
   var $114=HEAP16[(($113)>>1)];
   var $115=(($114)&(65535));
   var $116=$115 >> 8;
   var $117=$file_hdr;
   var $118=(($117+6)|0);
   var $119=HEAP16[(($118)>>1)];
   var $120=(($119)&(65535));
   var $121=$120 << 8;
   var $122=$116 | $121;
   var $123=(($122) & 65535);
   var $124=_htons($123);
   var $125=$file_hdr;
   var $126=(($125+6)|0);
   HEAP16[(($126)>>1)]=$124;
   var $127=$file_hdr;
   var $128=(($127+8)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$129 >>> 24;
   var $131=$file_hdr;
   var $132=(($131+8)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133 << 8;
   var $135=$134 & 16711680;
   var $136=$130 | $135;
   var $137=$file_hdr;
   var $138=(($137+8)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=$139 >>> 8;
   var $141=$140 & 65280;
   var $142=$136 | $141;
   var $143=$file_hdr;
   var $144=(($143+8)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=$145 << 24;
   var $147=$142 | $146;
   var $148=_htonl($147);
   var $149=$file_hdr;
   var $150=(($149+8)|0);
   HEAP32[(($150)>>2)]=$148;
   var $151=$file_hdr;
   var $152=(($151+12)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$153 >>> 24;
   var $155=$file_hdr;
   var $156=(($155+12)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=$157 << 8;
   var $159=$158 & 16711680;
   var $160=$154 | $159;
   var $161=$file_hdr;
   var $162=(($161+12)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=$163 >>> 8;
   var $165=$164 & 65280;
   var $166=$160 | $165;
   var $167=$file_hdr;
   var $168=(($167+12)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=$169 << 24;
   var $171=$166 | $170;
   var $172=_htonl($171);
   var $173=$file_hdr;
   var $174=(($173+12)|0);
   HEAP32[(($174)>>2)]=$172;
   var $175=$file_hdr;
   var $176=(($175+20)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=$177 >>> 24;
   var $179=$file_hdr;
   var $180=(($179+20)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=$181 << 8;
   var $183=$182 & 16711680;
   var $184=$178 | $183;
   var $185=$file_hdr;
   var $186=(($185+20)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$187 >>> 8;
   var $189=$188 & 65280;
   var $190=$184 | $189;
   var $191=$file_hdr;
   var $192=(($191+20)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=$193 << 24;
   var $195=$190 | $194;
   var $196=_htonl($195);
   var $197=$file_hdr;
   var $198=(($197+20)|0);
   HEAP32[(($198)>>2)]=$196;
   var $199=$file_hdr;
   var $200=(($199+30)|0);
   var $201=HEAP16[(($200)>>1)];
   var $202=(($201)&(65535));
   var $203=$202 >> 8;
   var $204=$file_hdr;
   var $205=(($204+30)|0);
   var $206=HEAP16[(($205)>>1)];
   var $207=(($206)&(65535));
   var $208=$207 << 8;
   var $209=$203 | $208;
   var $210=(($209) & 65535);
   var $211=_htons($210);
   var $212=$file_hdr;
   var $213=(($212+30)|0);
   HEAP16[(($213)>>1)]=$211;
   var $214=$file_hdr;
   var $215=(($214+4)|0);
   var $216=HEAP16[(($215)>>1)];
   var $217=(($216)&(65535));
   var $218=$217 & 256;
   var $219=(($218)|(0))!=0;
   if ($219) { label = 16; break; } else { label = 19; break; }
  case 16: 
   var $221=$2;
   var $222=$file_hdr;
   var $223=$222;
   var $224=(($223+32)|0);
   var $225=_read($221, $224, 8);
   var $226=(($225)|(0))!=8;
   if ($226) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $228=$file_hdr;
   var $229=$228;
   _free($229);
   $1=0;
   label = 27; break;
  case 18: 
   var $231=$file_hdr;
   var $232=(($231+36)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=$233 >>> 24;
   var $235=$file_hdr;
   var $236=(($235+36)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$237 << 8;
   var $239=$238 & 16711680;
   var $240=$234 | $239;
   var $241=$file_hdr;
   var $242=(($241+36)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=$243 >>> 8;
   var $245=$244 & 65280;
   var $246=$240 | $245;
   var $247=$file_hdr;
   var $248=(($247+36)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=$249 << 24;
   var $251=$246 | $250;
   var $252=_htonl($251);
   var $253=$file_hdr;
   var $254=(($253+36)|0);
   HEAP32[(($254)>>2)]=$252;
   var $255=$file_hdr;
   var $256=(($255+40)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=$257 >>> 24;
   var $259=$file_hdr;
   var $260=(($259+40)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=$261 << 8;
   var $263=$262 & 16711680;
   var $264=$258 | $263;
   var $265=$file_hdr;
   var $266=(($265+40)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=$267 >>> 8;
   var $269=$268 & 65280;
   var $270=$264 | $269;
   var $271=$file_hdr;
   var $272=(($271+40)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=$273 << 24;
   var $275=$270 | $274;
   var $276=_htonl($275);
   var $277=$file_hdr;
   var $278=(($277+40)|0);
   HEAP32[(($278)>>2)]=$276;
   label = 20; break;
  case 19: 
   var $280=$file_hdr;
   var $281=(($280+36)|0);
   HEAP32[(($281)>>2)]=0;
   var $282=$file_hdr;
   var $283=(($282+40)|0);
   HEAP32[(($283)>>2)]=0;
   label = 20; break;
  case 20: 
   var $285=$file_hdr;
   var $286=$285;
   $1=$286;
   label = 27; break;
  case 21: 
   var $288=_malloc(14);
   var $289=$288;
   $comment_hdr=$289;
   var $290=$comment_hdr;
   var $291=(($290)|(0))!=0;
   if ($291) { label = 23; break; } else { label = 22; break; }
  case 22: 
   $1=0;
   label = 27; break;
  case 23: 
   var $294=$2;
   var $295=$comment_hdr;
   var $296=_read($294, $295, 13);
   var $297=(($296)|(0))!=13;
   if ($297) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $299=$comment_hdr;
   var $300=$299;
   _free($300);
   $1=0;
   label = 27; break;
  case 25: 
   var $302=$comment_hdr;
   var $303=(($302+8)|0);
   var $304=HEAP16[(($303)>>1)];
   var $305=(($304)&(65535));
   var $306=$305 >> 8;
   var $307=$comment_hdr;
   var $308=(($307+8)|0);
   var $309=HEAP16[(($308)>>1)];
   var $310=(($309)&(65535));
   var $311=$310 << 8;
   var $312=$306 | $311;
   var $313=(($312) & 65535);
   var $314=_htons($313);
   var $315=$comment_hdr;
   var $316=(($315+8)|0);
   HEAP16[(($316)>>1)]=$314;
   var $317=$comment_hdr;
   var $318=(($317+12)|0);
   var $319=HEAP16[(($318)>>1)];
   var $320=(($319)&(65535));
   var $321=$320 >> 8;
   var $322=$comment_hdr;
   var $323=(($322+12)|0);
   var $324=HEAP16[(($323)>>1)];
   var $325=(($324)&(65535));
   var $326=$325 << 8;
   var $327=$321 | $326;
   var $328=(($327) & 65535);
   var $329=_htons($328);
   var $330=$comment_hdr;
   var $331=(($330+12)|0);
   HEAP16[(($331)>>1)]=$329;
   var $332=$comment_hdr;
   var $333=$332;
   $1=$333;
   label = 27; break;
  case 26: 
   $1=0;
   label = 27; break;
  case 27: 
   var $336=$1;
   STACKTOP = sp;
   return $336;
  default: assert(0, "bad label: " + label);
 }
}
function _unpack_free_data($unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$unpack_data;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 4; break;
  case 3: 
   var $6=$1;
   var $7=(($6+4249556)|0);
   _rarvm_free($7);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _copy_file_data($ifd, $ofd, $len$0, $len$1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $2;
   var $3;
   var $4=(sp)+(8);
   var $data=(sp)+(16);
   var $count=(sp)+(8208);
   var $rem=(sp)+(8216);
   var $todo;
   $2=$ifd;
   $3=$ofd;
   var $st$0$0=(($4)|0);
   HEAP32[(($st$0$0)>>2)]=$len$0;
   var $st$1$1=(($4+4)|0);
   HEAP32[(($st$1$1)>>2)]=$len$1;
   var $ld$2$0=(($4)|0);
   var $5$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($4+4)|0);
   var $5$1=HEAP32[(($ld$3$1)>>2)];
   var $st$4$0=(($rem)|0);
   HEAP32[(($st$4$0)>>2)]=$5$0;
   var $st$5$1=(($rem+4)|0);
   HEAP32[(($st$5$1)>>2)]=$5$1;
   label = 2; break;
  case 2: 
   var $ld$6$0=(($rem)|0);
   var $7$0=HEAP32[(($ld$6$0)>>2)];
   var $ld$7$1=(($rem+4)|0);
   var $7$1=HEAP32[(($ld$7$1)>>2)];
   var $$etemp$8$0=0;
   var $$etemp$8$1=0;
   var $8=(($7$1>>>0) > ($$etemp$8$1>>>0)) | (((($7$1>>>0) == ($$etemp$8$1>>>0) & ($7$0>>>0) >  ($$etemp$8$0>>>0))));
   if ($8) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $ld$9$0=(($rem)|0);
   var $10$0=HEAP32[(($ld$9$0)>>2)];
   var $ld$10$1=(($rem+4)|0);
   var $10$1=HEAP32[(($ld$10$1)>>2)];
   var $$etemp$11$0=8192;
   var $$etemp$11$1=0;
   var $11=(($$etemp$11$1>>>0) < ($10$1>>>0)) | (((($$etemp$11$1>>>0) == ($10$1>>>0) & ($$etemp$11$0>>>0) <  ($10$0>>>0))));
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16$1 = 0;var $16$0 = 8192;label = 6; break;
  case 5: 
   var $ld$12$0=(($rem)|0);
   var $14$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($rem+4)|0);
   var $14$1=HEAP32[(($ld$13$1)>>2)];
   var $16$1 = $14$1;var $16$0 = $14$0;label = 6; break;
  case 6: 
   var $16$0;
   var $16$1;
   var $17$0=$16$0;
   var $17=$17$0;
   $todo=$17;
   var $18=$2;
   var $19=(($data)|0);
   var $20=$todo;
   var $21=_read($18, $19, $20);
   var $22$0=$21;
   var $22$1=((($21)|(0)) < 0 ? -1 : 0);
   var $st$14$0=(($count)|0);
   HEAP32[(($st$14$0)>>2)]=$22$0;
   var $st$15$1=(($count+4)|0);
   HEAP32[(($st$15$1)>>2)]=$22$1;
   var $ld$16$0=(($count)|0);
   var $23$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($count+4)|0);
   var $23$1=HEAP32[(($ld$17$1)>>2)];
   var $24=$todo;
   var $25$0=$24;
   var $25$1=0;
   var $26=(($23$0|0) != ($25$0|0)) | (($23$1|0) != ($25$1|0));
   if ($26) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $ld$18$0=(($4)|0);
   var $28$0=HEAP32[(($ld$18$0)>>2)];
   var $ld$19$1=(($4+4)|0);
   var $28$1=HEAP32[(($ld$19$1)>>2)];
   var $ld$20$0=(($rem)|0);
   var $29$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($rem+4)|0);
   var $29$1=HEAP32[(($ld$21$1)>>2)];
   var $30$0 = _i64Subtract($28$0,$28$1,$29$0,$29$1); var $30$1 = tempRet0;
   var $st$22$0=(($1)|0);
   HEAP32[(($st$22$0)>>2)]=$30$0;
   var $st$23$1=(($1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$30$1;
   label = 12; break;
  case 8: 
   var $32=$3;
   var $33=(($data)|0);
   var $ld$24$0=(($count)|0);
   var $34$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($count+4)|0);
   var $34$1=HEAP32[(($ld$25$1)>>2)];
   var $35=_write($32, $33, $34$0, $34$1);
   var $36$0=$35;
   var $36$1=((($35)|(0)) < 0 ? -1 : 0);
   var $ld$26$0=(($count)|0);
   var $37$0=HEAP32[(($ld$26$0)>>2)];
   var $ld$27$1=(($count+4)|0);
   var $37$1=HEAP32[(($ld$27$1)>>2)];
   var $38=(($36$0|0) != ($37$0|0)) | (($36$1|0) != ($37$1|0));
   if ($38) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $ld$28$0=(($4)|0);
   var $40$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($4+4)|0);
   var $40$1=HEAP32[(($ld$29$1)>>2)];
   var $ld$30$0=(($rem)|0);
   var $41$0=HEAP32[(($ld$30$0)>>2)];
   var $ld$31$1=(($rem+4)|0);
   var $41$1=HEAP32[(($ld$31$1)>>2)];
   var $42$0 = _i64Subtract($40$0,$40$1,$41$0,$41$1); var $42$1 = tempRet0;
   var $ld$32$0=(($count)|0);
   var $43$0=HEAP32[(($ld$32$0)>>2)];
   var $ld$33$1=(($count+4)|0);
   var $43$1=HEAP32[(($ld$33$1)>>2)];
   var $44$0 = _i64Subtract($42$0,$42$1,$43$0,$43$1); var $44$1 = tempRet0;
   var $st$34$0=(($1)|0);
   HEAP32[(($st$34$0)>>2)]=$44$0;
   var $st$35$1=(($1+4)|0);
   HEAP32[(($st$35$1)>>2)]=$44$1;
   label = 12; break;
  case 10: 
   var $ld$36$0=(($count)|0);
   var $46$0=HEAP32[(($ld$36$0)>>2)];
   var $ld$37$1=(($count+4)|0);
   var $46$1=HEAP32[(($ld$37$1)>>2)];
   var $ld$38$0=(($rem)|0);
   var $47$0=HEAP32[(($ld$38$0)>>2)];
   var $ld$39$1=(($rem+4)|0);
   var $47$1=HEAP32[(($ld$39$1)>>2)];
   var $48$0 = _i64Subtract($47$0,$47$1,$46$0,$46$1); var $48$1 = tempRet0;
   var $st$40$0=(($rem)|0);
   HEAP32[(($st$40$0)>>2)]=$48$0;
   var $st$41$1=(($rem+4)|0);
   HEAP32[(($st$41$1)>>2)]=$48$1;
   label = 2; break;
  case 11: 
   var $ld$42$0=(($4)|0);
   var $50$0=HEAP32[(($ld$42$0)>>2)];
   var $ld$43$1=(($4+4)|0);
   var $50$1=HEAP32[(($ld$43$1)>>2)];
   var $st$44$0=(($1)|0);
   HEAP32[(($st$44$0)>>2)]=$50$0;
   var $st$45$1=(($1+4)|0);
   HEAP32[(($st$45$1)>>2)]=$50$1;
   label = 12; break;
  case 12: 
   var $ld$46$0=(($1)|0);
   var $52$0=HEAP32[(($ld$46$0)>>2)];
   var $ld$47$1=(($1+4)|0);
   var $52$1=HEAP32[(($ld$47$1)>>2)];
   STACKTOP = sp;
   return (tempRet0=$52$1,$52$0);
  default: assert(0, "bad label: " + label);
 }
}
function _rar_unpack($fd, $method, $solid, $unpack_data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $retval;
   $1=$fd;
   $2=$method;
   $3=$solid;
   $4=$unpack_data;
   $retval=0;
   var $5=$2;
   if ((($5)|(0))==15) {
    label = 2; break;
   }
   else if ((($5)|(0))==20 | (($5)|(0))==26) {
    label = 3; break;
   }
   else if ((($5)|(0))==29) {
    label = 4; break;
   }
   else {
   label = 5; break;
   }
  case 2: 
   var $7=$1;
   var $8=$3;
   var $9=$4;
   var $10=_rar_unpack15($7, $8, $9);
   $retval=$10;
   label = 6; break;
  case 3: 
   var $12=$1;
   var $13=$3;
   var $14=$4;
   var $15=_rar_unpack20($12, $13, $14);
   $retval=$15;
   label = 6; break;
  case 4: 
   var $17=$1;
   var $18=$3;
   var $19=$4;
   var $20=_rar_unpack29($17, $18, $19);
   $retval=$20;
   label = 6; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $23=$retval;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _cli_unrar_extract_next_prepare($state, $dirname) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $filename=sp;
   var $ofd;
   var $new_metadata;
   var $comment_header;
   $2=$state;
   $3=$dirname;
   var $4=$2;
   var $5=(($4+32)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=_read_block($6, 116);
   var $8=$2;
   var $9=(($8)|0);
   HEAP32[(($9)>>2)]=$7;
   var $10=$2;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=7;
   label = 21; break;
  case 3: 
   var $16=_malloc(40);
   var $17=$16;
   $new_metadata=$17;
   var $18=$new_metadata;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $1=3;
   label = 21; break;
  case 5: 
   var $22=$2;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+36)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27$0=$26;
   var $27$1=0;
   var $$etemp$0$0=0;
   var $$etemp$0$1=1;
   var $28$0 = ___muldi3($27$0,$27$1,$$etemp$0$0,$$etemp$0$1); var $28$1 = tempRet0;
   var $29=$2;
   var $30=(($29)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+8)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34$0=$33;
   var $34$1=0;
   var $35$0 = _i64Add($28$0,$28$1,$34$0,$34$1); var $35$1 = tempRet0;
   var $36=$new_metadata;
   var $37=(($36)|0);
   var $st$1$0=(($37)|0);
   HEAP32[(($st$1$0)>>2)]=$35$0;
   var $st$2$1=(($37+4)|0);
   HEAP32[(($st$2$1)>>2)]=$35$1;
   var $38=$2;
   var $39=(($38)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+40)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43$0=$42;
   var $43$1=0;
   var $$etemp$3$0=0;
   var $$etemp$3$1=1;
   var $44$0 = ___muldi3($43$0,$43$1,$$etemp$3$0,$$etemp$3$1); var $44$1 = tempRet0;
   var $45=$2;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50$0=$49;
   var $50$1=0;
   var $51$0 = _i64Add($44$0,$44$1,$50$0,$50$1); var $51$1 = tempRet0;
   var $52=$new_metadata;
   var $53=(($52+8)|0);
   var $st$4$0=(($53)|0);
   HEAP32[(($st$4$0)>>2)]=$51$0;
   var $st$5$1=(($53+4)|0);
   HEAP32[(($st$5$1)>>2)]=$51$1;
   var $54=$2;
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+20)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$new_metadata;
   var $60=(($59+16)|0);
   HEAP32[(($60)>>2)]=$58;
   var $61=$2;
   var $62=(($61)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+29)|0);
   var $65=HEAP8[($64)];
   var $66=$new_metadata;
   var $67=(($66+24)|0);
   HEAP8[($67)]=$65;
   var $68=$2;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+44)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=_strdup($72);
   var $74=$new_metadata;
   var $75=(($74+28)|0);
   HEAP32[(($75)>>2)]=$73;
   var $76=$new_metadata;
   var $77=(($76+32)|0);
   HEAP32[(($77)>>2)]=0;
   var $78=$new_metadata;
   var $79=(($78+20)|0);
   HEAP32[(($79)>>2)]=0;
   var $80=$2;
   var $81=(($80+8)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($82)|(0))==0;
   if ($83) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $85=$new_metadata;
   var $86=$2;
   var $87=(($86+4)|0);
   HEAP32[(($87)>>2)]=$85;
   var $88=$2;
   var $89=(($88+8)|0);
   HEAP32[(($89)>>2)]=$85;
   label = 8; break;
  case 7: 
   var $91=$new_metadata;
   var $92=$2;
   var $93=(($92+8)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94+32)|0);
   HEAP32[(($95)>>2)]=$91;
   var $96=$new_metadata;
   var $97=$2;
   var $98=(($97+8)|0);
   HEAP32[(($98)>>2)]=$96;
   label = 8; break;
  case 8: 
   var $100=$2;
   var $101=(($100)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+4)|0);
   var $104=HEAP16[(($103)>>1)];
   var $105=(($104)&(65535));
   var $106=$105 & 8;
   var $107=(($106)|(0))!=0;
   if ($107) { label = 9; break; } else { label = 20; break; }
  case 9: 
   var $109=$2;
   var $110=(($109+32)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=_read_header($111, 117);
   var $113=$112;
   $comment_header=$113;
   var $114=$comment_header;
   var $115=(($114)|(0))!=0;
   if ($115) { label = 10; break; } else { label = 19; break; }
  case 10: 
   var $117=$comment_header;
   var $118=(($117+10)|0);
   var $119=HEAP8[($118)];
   var $120=(($119)&(255));
   var $121=(($120)|(0)) < 15;
   if ($121) { label = 13; break; } else { label = 11; break; }
  case 11: 
   var $123=$comment_header;
   var $124=(($123+10)|0);
   var $125=HEAP8[($124)];
   var $126=(($125)&(255));
   var $127=(($126)|(0)) > 29;
   if ($127) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $129=$comment_header;
   var $130=(($129+11)|0);
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=(($132)|(0)) > 48;
   if ($133) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 18; break;
  case 14: 
   var $136=(($filename)|0);
   var $137=$2;
   var $138=(($137+20)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=$2;
   var $141=(($140+24)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=_snprintf($136, 1024, ((3656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$139,HEAP32[(((tempInt)+(8))>>2)]=$142,tempInt));
   var $144=(($filename)|0);
   var $145=_open($144, 1537, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=384,tempInt));
   $ofd=$145;
   var $146=$ofd;
   var $147=(($146)|(0)) < 0;
   if ($147) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $149=$comment_header;
   var $150=$149;
   _free($150);
   label = 17; break;
  case 16: 
   var $152=$2;
   var $153=(($152+32)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=$ofd;
   var $156=$comment_header;
   var $157=(($156+8)|0);
   var $158=HEAP16[(($157)>>1)];
   var $159$0=(($158)&(65535));
   var $159$1=0;
   var $160$0=_copy_file_data($154, $155, $159$0, $159$1);
   var $160$1=tempRet0;
   var $161=$ofd;
   var $162=_close($161);
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $165=$comment_header;
   var $166=$165;
   _free($166);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   $1=0;
   label = 21; break;
  case 21: 
   var $170=$1;
   STACKTOP = sp;
   return $170;
  default: assert(0, "bad label: " + label);
 }
}
function _read_block($fd, $hdr_type) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $file_header;
   var $offset;
   $2=$fd;
   $3=$hdr_type;
   label = 2; break;
  case 2: 
   var $5=$2;
   var $6=_lseek($5, 0, 1);
   $offset=$6;
   var $7=$offset;
   _rar_dbgmsg64(((3528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
   var $8=$2;
   var $9=_read_header($8, 116);
   var $10=$9;
   $file_header=$10;
   var $11=$file_header;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 18; break;
  case 4: 
   var $15=$file_header;
   var $16=(($15+6)|0);
   var $17=HEAP16[(($16)>>1)];
   var $18=(($17)&(65535));
   _rar_dbgmsg64(((3472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$18,tempInt));
   var $19=$offset;
   var $20=$file_header;
   var $21=(($20+48)|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=$offset;
   var $23=$file_header;
   var $24=(($23+6)|0);
   var $25=HEAP16[(($24)>>1)];
   var $26=(($25)&(65535));
   var $27=((($22)+($26))|0);
   var $28=$file_header;
   var $29=(($28+52)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$file_header;
   var $31=(($30+4)|0);
   var $32=HEAP16[(($31)>>1)];
   var $33=(($32)&(65535));
   var $34=$33 & 32768;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $37=$file_header;
   var $38=(($37+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$file_header;
   var $41=(($40+52)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($42)+($39))|0);
   HEAP32[(($41)>>2)]=$43;
   label = 6; break;
  case 6: 
   var $45=$file_header;
   var $46=(($45+52)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$offset;
   var $49=(($47)|(0)) <= (($48)|(0));
   if ($49) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $51=$file_header;
   var $52=$51;
   _free($52);
   $1=0;
   label = 18; break;
  case 8: 
   var $54=$file_header;
   var $55=(($54+2)|0);
   var $56=HEAP8[($55)];
   var $57=(($56)&(255));
   var $58=$3;
   var $59=(($57)|(0))==(($58)|(0));
   if ($59) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 13; break;
  case 10: 
   var $62=$2;
   var $63=$file_header;
   var $64=(($63+52)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=_lseek($62, $65, 0);
   var $67=$file_header;
   var $68=(($67+52)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($66)|(0))!=(($69)|(0));
   if ($70) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $1=0;
   label = 18; break;
  case 12: 
   var $73=$file_header;
   var $74=$73;
   _free($74);
   label = 2; break;
  case 13: 
   var $76=$2;
   var $77=_lseek($76, 0, 1);
   _rar_dbgmsg64(((3392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$77,tempInt));
   var $78=$file_header;
   var $79=(($78+30)|0);
   var $80=HEAP16[(($79)>>1)];
   var $81=(($80)&(65535));
   var $82=((($81)+(1))|0);
   var $83=_malloc($82);
   var $84=$file_header;
   var $85=(($84+44)|0);
   HEAP32[(($85)>>2)]=$83;
   var $86=$file_header;
   var $87=(($86+44)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88)|(0))!=0;
   if ($89) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $91=$file_header;
   var $92=$91;
   _free($92);
   $1=0;
   label = 18; break;
  case 15: 
   var $94=$2;
   var $95=$file_header;
   var $96=(($95+44)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=$file_header;
   var $99=(($98+30)|0);
   var $100=HEAP16[(($99)>>1)];
   var $101=(($100)&(65535));
   var $102=_read($94, $97, $101);
   var $103=$file_header;
   var $104=(($103+30)|0);
   var $105=HEAP16[(($104)>>1)];
   var $106=(($105)&(65535));
   var $107=(($102)|(0))!=(($106)|(0));
   if ($107) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $109=$file_header;
   var $110=(($109+44)|0);
   var $111=HEAP32[(($110)>>2)];
   _free($111);
   var $112=$file_header;
   var $113=$112;
   _free($113);
   $1=0;
   label = 18; break;
  case 17: 
   var $115=$file_header;
   var $116=(($115+30)|0);
   var $117=HEAP16[(($116)>>1)];
   var $118=(($117)&(65535));
   var $119=$file_header;
   var $120=(($119+44)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+$118)|0);
   HEAP8[($122)]=0;
   var $123=$file_header;
   $1=$123;
   label = 18; break;
  case 18: 
   var $125=$1;
   STACKTOP = sp;
   return $125;
  default: assert(0, "bad label: " + label);
 }
}
function _cli_unrar_extract_next($state, $dirname) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ofd;
   var $retval;
   $2=$state;
   $3=$dirname;
   var $4=$2;
   var $5=(($4+32)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+48)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$2;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+6)|0);
   var $16=HEAP16[(($15)>>1)];
   var $17=(($16)&(65535));
   var $18=((($11)+($17))|0);
   var $19=_lseek($6, $18, 0);
   var $20=$2;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+48)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$2;
   var $26=(($25)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+6)|0);
   var $29=HEAP16[(($28)>>1)];
   var $30=(($29)&(65535));
   var $31=((($24)+($30))|0);
   var $32=(($19)|(0))!=(($31)|(0));
   if ($32) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $34=$2;
   var $35=(($34)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+44)|0);
   var $38=HEAP32[(($37)>>2)];
   _free($38);
   var $39=$2;
   var $40=(($39)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   _free($42);
   $1=4;
   label = 37; break;
  case 3: 
   var $44=$2;
   var $45=(($44)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+4)|0);
   var $48=HEAP16[(($47)>>1)];
   var $49=(($48)&(65535));
   var $50=$49 & 4;
   var $51=(($50)|(0))!=0;
   if ($51) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $53=$2;
   var $54=(($53+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+20)|0);
   HEAP32[(($56)>>2)]=1;
   label = 34; break;
  case 5: 
   var $58=$2;
   var $59=(($58)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60+4)|0);
   var $62=HEAP16[(($61)>>1)];
   var $63=(($62)&(65535));
   var $64=$63 & 3;
   var $65=(($64)|(0))!=0;
   if ($65) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 33; break;
  case 7: 
   var $68=$2;
   var $69=(($68+16)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+4)|0);
   var $72=HEAP16[(($71)>>1)];
   var $73=(($72)&(65535));
   var $74=$73 & 1;
   var $75=(($74)|(0))!=0;
   if ($75) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $77=$2;
   var $78=(($77+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+4)|0);
   var $81=HEAP16[(($80)>>1)];
   var $82=(($81)&(65535));
   var $83=$82 & 8;
   var $84=(($83)|(0))!=0;
   if ($84) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 32; break;
  case 10: 
   var $87=$2;
   var $88=(($87+36)|0);
   var $89=(($88)|0);
   var $90=$3;
   var $91=$2;
   var $92=(($91+24)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=_snprintf($89, 1024, ((3576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$90,HEAP32[(((tempInt)+(8))>>2)]=$93,tempInt));
   var $95=$2;
   var $96=(($95+36)|0);
   var $97=(($96)|0);
   var $98=_open($97, 1538, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=384,tempInt));
   $ofd=$98;
   var $99=$ofd;
   var $100=(($99)|(0)) < 0;
   if ($100) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $102=$2;
   var $103=(($102)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+44)|0);
   var $106=HEAP32[(($105)>>2)];
   _free($106);
   var $107=$2;
   var $108=(($107)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$109;
   _free($110);
   $1=8;
   label = 37; break;
  case 12: 
   var $112=$ofd;
   var $113=$2;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115)|0);
   HEAP32[(($116)>>2)]=$112;
   var $117=$2;
   var $118=(($117)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+29)|0);
   var $121=HEAP8[($120)];
   var $122=(($121)&(255));
   var $123=(($122)|(0))==48;
   if ($123) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $125=$2;
   var $126=(($125+32)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=$ofd;
   var $129=$2;
   var $130=(($129)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+8)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134$0=$133;
   var $134$1=0;
   var $135$0=_copy_file_data($127, $128, $134$0, $134$1);
   var $135$1=tempRet0;
   label = 31; break;
  case 14: 
   var $137=$2;
   var $138=(($137)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=(($139+12)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142$0=$141;
   var $142$1=0;
   var $143=$2;
   var $144=(($143+12)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+4249544)|0);
   var $st$0$0=(($146)|0);
   HEAP32[(($st$0$0)>>2)]=$142$0;
   var $st$1$1=(($146+4)|0);
   HEAP32[(($st$1$1)>>2)]=$142$1;
   var $147=$2;
   var $148=(($147)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149+8)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=$2;
   var $153=(($152+12)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+4249552)|0);
   HEAP32[(($155)>>2)]=$151;
   var $156=$2;
   var $157=(($156)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($158+28)|0);
   var $160=HEAP8[($159)];
   var $161=(($160)&(255));
   var $162=(($161)|(0)) <= 15;
   if ($162) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $164=$2;
   var $165=(($164+32)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=$2;
   var $168=(($167+24)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($169)>>>(0)) > 1;
   if ($170) { label = 16; break; } else { var $181 = 0;label = 17; break; }
  case 16: 
   var $172=$2;
   var $173=(($172+16)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($174+4)|0);
   var $176=HEAP16[(($175)>>1)];
   var $177=(($176)&(65535));
   var $178=$177 & 8;
   var $179=(($178)|(0))!=0;
   var $181 = $179;label = 17; break;
  case 17: 
   var $181;
   var $182=(($181)&(1));
   var $183=$2;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=_rar_unpack($166, 15, $182, $185);
   $retval=$186;
   label = 22; break;
  case 18: 
   var $188=$2;
   var $189=(($188+24)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=(($190)|(0))==1;
   if ($191) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $193=$2;
   var $194=(($193)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+4)|0);
   var $197=HEAP16[(($196)>>1)];
   var $198=(($197)&(65535));
   var $199=$198 & 16;
   var $200=(($199)|(0))!=0;
   if ($200) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $202=$2;
   var $203=(($202)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+4)|0);
   var $206=HEAP16[(($205)>>1)];
   var $207=(($206)&(65535));
   var $208=((($207)-(16))|0);
   var $209=(($208) & 65535);
   HEAP16[(($205)>>1)]=$209;
   label = 21; break;
  case 21: 
   var $211=$2;
   var $212=(($211+32)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=$2;
   var $215=(($214)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216+28)|0);
   var $218=HEAP8[($217)];
   var $219=(($218)&(255));
   var $220=$2;
   var $221=(($220)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=(($222+4)|0);
   var $224=HEAP16[(($223)>>1)];
   var $225=(($224)&(65535));
   var $226=$225 & 16;
   var $227=$2;
   var $228=(($227+12)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=_rar_unpack($213, $219, $226, $229);
   $retval=$230;
   label = 22; break;
  case 22: 
   var $232=$2;
   var $233=(($232+12)|0);
   var $234=HEAP32[(($233)>>2)];
   var $235=(($234+4249596)|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236)|(0))!=-1;
   if ($237) { label = 23; break; } else { label = 26; break; }
  case 23: 
   var $239=$2;
   var $240=(($239)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241+20)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=$2;
   var $245=(($244+12)|0);
   var $246=HEAP32[(($245)>>2)];
   var $247=(($246+4249596)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=$248 ^ -1;
   var $250=(($243)|(0))!=(($249)|(0));
   if ($250) { label = 24; break; } else { label = 25; break; }
  case 24: 
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $254=$retval;
   var $255=(($254)|(0))!=0;
   if ($255) { label = 30; break; } else { label = 27; break; }
  case 27: 
   var $257=$2;
   var $258=(($257)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259+4)|0);
   var $261=HEAP16[(($260)>>1)];
   var $262=(($261)&(65535));
   var $263=$262 & 16;
   var $264=(($263)|(0))!=0;
   if ($264) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $266=$2;
   var $267=(($266)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269=(($268+44)|0);
   var $270=HEAP32[(($269)>>2)];
   _free($270);
   var $271=$2;
   var $272=(($271)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=$273;
   _free($274);
   $1=4;
   label = 37; break;
  case 29: 
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $281=$2;
   var $282=(($281+32)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=$2;
   var $285=(($284)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286+52)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=_lseek($283, $288, 0);
   var $290=$2;
   var $291=(($290)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=(($292+52)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=(($289)|(0))!=(($294)|(0));
   if ($295) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $297=$2;
   var $298=(($297)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=(($299+44)|0);
   var $301=HEAP32[(($300)>>2)];
   _free($301);
   var $302=$2;
   var $303=(($302)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=$304;
   _free($305);
   $1=4;
   label = 37; break;
  case 36: 
   var $307=$2;
   var $308=(($307)|0);
   var $309=HEAP32[(($308)>>2)];
   var $310=(($309+44)|0);
   var $311=HEAP32[(($310)>>2)];
   _free($311);
   var $312=$2;
   var $313=(($312)|0);
   var $314=HEAP32[(($313)>>2)];
   var $315=$314;
   _free($315);
   var $316=$2;
   var $317=(($316+12)|0);
   var $318=HEAP32[(($317)>>2)];
   _unpack_free_data($318);
   var $319=$2;
   var $320=(($319+24)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=((($321)+(1))|0);
   HEAP32[(($320)>>2)]=$322;
   $1=0;
   label = 37; break;
  case 37: 
   var $324=$1;
   STACKTOP = sp;
   return $324;
  default: assert(0, "bad label: " + label);
 }
}
function _cli_unrar_close($state) {
 var label = 0;
 var $1;
 $1=$state;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4229904)|0);
 _ppm_destructor($5);
 var $6=$1;
 var $7=(($6+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 _free($9);
 var $10=$1;
 var $11=(($10+12)|0);
 var $12=HEAP32[(($11)>>2)];
 _init_filters($12);
 var $13=$1;
 var $14=(($13+12)|0);
 var $15=HEAP32[(($14)>>2)];
 _unpack_free_data($15);
 var $16=$1;
 var $17=(($16+12)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18;
 _free($19);
 var $20=$1;
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 _free($22);
 return;
}
function _add_vm_code($unpack_data, $first_byte, $vmcode, $code_size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $rarvm_input=sp;
   var $filter_pos;
   var $new_filter;
   var $block_start;
   var $init_mask;
   var $cur_size;
   var $filter;
   var $stack_filter;
   var $i;
   var $empty_count;
   var $stack_pos;
   var $vm_codesize;
   var $static_size;
   var $data_size;
   var $vm_code;
   var $global_data;
   $2=$unpack_data;
   $3=$first_byte;
   $4=$vmcode;
   $5=$code_size;
   var $6=$3;
   var $7=$5;
   _rar_dbgmsg64(((3312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,HEAP32[(((tempInt)+(8))>>2)]=$7,tempInt));
   var $8=$4;
   var $9=(($rarvm_input)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$5;
   var $11=(($rarvm_input+4)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=(($rarvm_input+8)|0);
   HEAP32[(($12)>>2)]=0;
   var $13=(($rarvm_input+12)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=$3;
   var $15=$14 & 128;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $18=_rarvm_read_data($rarvm_input);
   $filter_pos=$18;
   var $19=$filter_pos;
   var $20=(($19)|(0))==0;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$2;
   _init_filters($22);
   label = 5; break;
  case 4: 
   var $24=$filter_pos;
   var $25=((($24)-(1))|0);
   $filter_pos=$25;
   label = 5; break;
  case 5: 
   label = 7; break;
  case 6: 
   var $28=$2;
   var $29=(($28+4249528)|0);
   var $30=HEAP32[(($29)>>2)];
   $filter_pos=$30;
   label = 7; break;
  case 7: 
   var $32=$filter_pos;
   _rar_dbgmsg64(((3288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$32,tempInt));
   var $33=$filter_pos;
   var $34=$2;
   var $35=(($34+4249508)|0);
   var $36=(($35+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($33)>>>(0)) > (($37)>>>(0));
   if ($38) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $40=$filter_pos;
   var $41=$2;
   var $42=(($41+4249532)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($40)>>>(0)) > (($43)>>>(0));
   if ($44) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $1=0;
   label = 93; break;
  case 10: 
   var $47=$filter_pos;
   var $48=$2;
   var $49=(($48+4249528)|0);
   HEAP32[(($49)>>2)]=$47;
   var $50=$filter_pos;
   var $51=$2;
   var $52=(($51+4249508)|0);
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($50)|(0))==(($54)|(0));
   var $56=(($55)&(1));
   $new_filter=$56;
   var $57=$2;
   var $58=(($57+4249508)|0);
   var $59=(($58+4)|0);
   var $60=HEAP32[(($59)>>2)];
   _rar_dbgmsg64(((3216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$60,tempInt));
   var $61=$new_filter;
   _rar_dbgmsg64(((3168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$61,tempInt));
   var $62=$new_filter;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 11; break; } else { label = 18; break; }
  case 11: 
   var $65=$2;
   var $66=(($65+4249508)|0);
   var $67=_rar_filter_array_add($66, 1);
   var $68=(($67)|(0))!=0;
   if ($68) { label = 13; break; } else { label = 12; break; }
  case 12: 
   $1=0;
   label = 93; break;
  case 13: 
   var $71=_rar_filter_new();
   $filter=$71;
   var $72=$2;
   var $73=(($72+4249508)|0);
   var $74=(($73+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=((($75)-(1))|0);
   var $77=$2;
   var $78=(($77+4249508)|0);
   var $79=(($78)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80+($76<<2))|0);
   HEAP32[(($81)>>2)]=$71;
   var $82=$2;
   var $83=(($82+4249508)|0);
   var $84=(($83+4)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=((($85)-(1))|0);
   var $87=$2;
   var $88=(($87+4249508)|0);
   var $89=(($88)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+($86<<2))|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))!=0;
   if ($93) { label = 15; break; } else { label = 14; break; }
  case 14: 
   $1=0;
   label = 93; break;
  case 15: 
   var $96=$2;
   var $97=(($96+4249532)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=((($98)+(1))|0);
   HEAP32[(($97)>>2)]=$99;
   var $100=$2;
   var $101=(($100+4249524)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$102;
   var $104=$2;
   var $105=(($104+4249532)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=($106<<2);
   var $108=_realloc($103, $107);
   var $109=$108;
   var $110=$2;
   var $111=(($110+4249524)|0);
   HEAP32[(($111)>>2)]=$109;
   var $112=$2;
   var $113=(($112+4249524)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114)|(0))!=0;
   if ($115) { label = 17; break; } else { label = 16; break; }
  case 16: 
   $1=0;
   label = 93; break;
  case 17: 
   var $118=$2;
   var $119=(($118+4249532)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=((($120)-(1))|0);
   var $122=$2;
   var $123=(($122+4249524)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=(($124+($121<<2))|0);
   HEAP32[(($125)>>2)]=0;
   var $126=$filter;
   var $127=(($126+8)|0);
   HEAP32[(($127)>>2)]=0;
   label = 19; break;
  case 18: 
   var $129=$filter_pos;
   var $130=$2;
   var $131=(($130+4249508)|0);
   var $132=(($131)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+($129<<2))|0);
   var $135=HEAP32[(($134)>>2)];
   $filter=$135;
   var $136=$filter;
   var $137=(($136+8)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=((($138)+(1))|0);
   HEAP32[(($137)>>2)]=$139;
   label = 19; break;
  case 19: 
   var $141=_rar_filter_new();
   $stack_filter=$141;
   $empty_count=0;
   $i=0;
   label = 20; break;
  case 20: 
   var $143=$i;
   var $144=$2;
   var $145=(($144+4249516)|0);
   var $146=(($145+4)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($143)>>>(0)) < (($147)>>>(0));
   if ($148) { label = 21; break; } else { label = 27; break; }
  case 21: 
   var $150=$i;
   var $151=$2;
   var $152=(($151+4249516)|0);
   var $153=(($152)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+($150<<2))|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=$i;
   var $158=$empty_count;
   var $159=((($157)-($158))|0);
   var $160=$2;
   var $161=(($160+4249516)|0);
   var $162=(($161)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+($159<<2))|0);
   HEAP32[(($164)>>2)]=$156;
   var $165=$i;
   var $166=$2;
   var $167=(($166+4249516)|0);
   var $168=(($167)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($169+($165<<2))|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171)|(0))==0;
   if ($172) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $174=$empty_count;
   var $175=((($174)+(1))|0);
   $empty_count=$175;
   label = 23; break;
  case 23: 
   var $177=$empty_count;
   var $178=(($177)|(0)) > 0;
   if ($178) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $180=$i;
   var $181=$2;
   var $182=(($181+4249516)|0);
   var $183=(($182)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+($180<<2))|0);
   HEAP32[(($185)>>2)]=0;
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $188=$i;
   var $189=((($188)+(1))|0);
   $i=$189;
   label = 20; break;
  case 27: 
   var $191=$empty_count;
   var $192=(($191)|(0))==0;
   if ($192) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $194=$2;
   var $195=(($194+4249516)|0);
   var $196=_rar_filter_array_add($195, 1);
   $empty_count=1;
   label = 29; break;
  case 29: 
   var $198=$2;
   var $199=(($198+4249516)|0);
   var $200=(($199+4)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=$empty_count;
   var $203=((($201)-($202))|0);
   $stack_pos=$203;
   var $204=$stack_filter;
   var $205=$stack_pos;
   var $206=$2;
   var $207=(($206+4249516)|0);
   var $208=(($207)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=(($209+($205<<2))|0);
   HEAP32[(($210)>>2)]=$204;
   var $211=$filter;
   var $212=(($211+8)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=$stack_filter;
   var $215=(($214+8)|0);
   HEAP32[(($215)>>2)]=$213;
   var $216=_rarvm_read_data($rarvm_input);
   $block_start=$216;
   var $217=$block_start;
   _rar_dbgmsg64(((3144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$217,tempInt));
   var $218=$3;
   var $219=$218 & 64;
   var $220=(($219)|(0))!=0;
   if ($220) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $222=$block_start;
   var $223=((($222)+(258))|0);
   $block_start=$223;
   label = 31; break;
  case 31: 
   var $225=$block_start;
   var $226=$2;
   var $227=(($226+4227084)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=((($225)+($228))|0);
   var $230=$229 & 4194303;
   var $231=$stack_filter;
   var $232=(($231)|0);
   HEAP32[(($232)>>2)]=$230;
   var $233=$3;
   var $234=$233 & 32;
   var $235=(($234)|(0))!=0;
   if ($235) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $237=_rarvm_read_data($rarvm_input);
   var $238=$stack_filter;
   var $239=(($238+4)|0);
   HEAP32[(($239)>>2)]=$237;
   label = 37; break;
  case 33: 
   var $241=$filter_pos;
   var $242=$2;
   var $243=(($242+4249532)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=(($241)>>>(0)) < (($244)>>>(0));
   if ($245) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $247=$filter_pos;
   var $248=$2;
   var $249=(($248+4249524)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=(($250+($247<<2))|0);
   var $252=HEAP32[(($251)>>2)];
   var $255 = $252;label = 36; break;
  case 35: 
   var $255 = 0;label = 36; break;
  case 36: 
   var $255;
   var $256=$stack_filter;
   var $257=(($256+4)|0);
   HEAP32[(($257)>>2)]=$255;
   label = 37; break;
  case 37: 
   var $259=$stack_filter;
   var $260=(($259+4)|0);
   var $261=HEAP32[(($260)>>2)];
   _rar_dbgmsg64(((3096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$261,tempInt));
   var $262=$2;
   var $263=(($262+4227088)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=$2;
   var $266=(($265+4227084)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($264)|(0))!=(($267)|(0));
   if ($268) { label = 38; break; } else { var $281 = 0;label = 39; break; }
  case 38: 
   var $270=$2;
   var $271=(($270+4227088)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=$2;
   var $274=(($273+4227084)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=((($272)-($275))|0);
   var $277=$276 & 4194303;
   var $278=$block_start;
   var $279=(($277)>>>(0)) <= (($278)>>>(0));
   var $281 = $279;label = 39; break;
  case 39: 
   var $281;
   var $282=(($281)&(1));
   var $283=$stack_filter;
   var $284=(($283+12)|0);
   HEAP32[(($284)>>2)]=$282;
   var $285=$stack_filter;
   var $286=(($285+4)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=$filter_pos;
   var $289=$2;
   var $290=(($289+4249524)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292=(($291+($288<<2))|0);
   HEAP32[(($292)>>2)]=$287;
   var $293=$stack_filter;
   var $294=(($293+16)|0);
   var $295=(($294+32)|0);
   var $296=$295;
   HEAP32[(($296)>>2)]=0; HEAP32[((($296)+(4))>>2)]=0; HEAP32[((($296)+(8))>>2)]=0; HEAP32[((($296)+(12))>>2)]=0; HEAP32[((($296)+(16))>>2)]=0; HEAP32[((($296)+(20))>>2)]=0; HEAP32[((($296)+(24))>>2)]=0;
   var $297=$stack_filter;
   var $298=(($297+16)|0);
   var $299=(($298+32)|0);
   var $300=(($299+12)|0);
   HEAP32[(($300)>>2)]=245760;
   var $301=$stack_filter;
   var $302=(($301+4)|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=$stack_filter;
   var $305=(($304+16)|0);
   var $306=(($305+32)|0);
   var $307=(($306+16)|0);
   HEAP32[(($307)>>2)]=$303;
   var $308=$stack_filter;
   var $309=(($308+8)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=$stack_filter;
   var $312=(($311+16)|0);
   var $313=(($312+32)|0);
   var $314=(($313+20)|0);
   HEAP32[(($314)>>2)]=$310;
   var $315=$3;
   var $316=$315 & 16;
   var $317=(($316)|(0))!=0;
   if ($317) { label = 40; break; } else { label = 47; break; }
  case 40: 
   var $319=_rarvm_getbits($rarvm_input);
   var $320=$319 >>> 9;
   $init_mask=$320;
   _rarvm_addbits($rarvm_input, 7);
   $i=0;
   label = 41; break;
  case 41: 
   var $322=$i;
   var $323=(($322)|(0)) < 7;
   if ($323) { label = 42; break; } else { label = 46; break; }
  case 42: 
   var $325=$init_mask;
   var $326=$i;
   var $327=1 << $326;
   var $328=$325 & $327;
   var $329=(($328)|(0))!=0;
   if ($329) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $331=_rarvm_read_data($rarvm_input);
   var $332=$i;
   var $333=$stack_filter;
   var $334=(($333+16)|0);
   var $335=(($334+32)|0);
   var $336=(($335+($332<<2))|0);
   HEAP32[(($336)>>2)]=$331;
   var $337=$i;
   var $338=$i;
   var $339=$stack_filter;
   var $340=(($339+16)|0);
   var $341=(($340+32)|0);
   var $342=(($341+($338<<2))|0);
   var $343=HEAP32[(($342)>>2)];
   _rar_dbgmsg64(((3064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$337,HEAP32[(((tempInt)+(8))>>2)]=$343,tempInt));
   label = 44; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $346=$i;
   var $347=((($346)+(1))|0);
   $i=$347;
   label = 41; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $350=$new_filter;
   var $351=(($350)|(0))!=0;
   if ($351) { label = 48; break; } else { label = 61; break; }
  case 48: 
   var $353=_rarvm_read_data($rarvm_input);
   $vm_codesize=$353;
   var $354=$vm_codesize;
   var $355=(($354)|(0)) >= 4096;
   if ($355) { label = 51; break; } else { label = 49; break; }
  case 49: 
   var $357=$vm_codesize;
   var $358=(($357)|(0))==0;
   if ($358) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $360=$vm_codesize;
   var $361=(($rarvm_input+4)|0);
   var $362=HEAP32[(($361)>>2)];
   var $363=(($360)|(0)) > (($362)|(0));
   if ($363) { label = 51; break; } else { label = 52; break; }
  case 51: 
   $1=0;
   label = 93; break;
  case 52: 
   var $366=$vm_codesize;
   var $367=_malloc($366);
   $vm_code=$367;
   var $368=$vm_code;
   var $369=(($368)|(0))!=0;
   if ($369) { label = 54; break; } else { label = 53; break; }
  case 53: 
   $1=0;
   label = 93; break;
  case 54: 
   $i=0;
   label = 55; break;
  case 55: 
   var $373=$i;
   var $374=$vm_codesize;
   var $375=(($373)|(0)) < (($374)|(0));
   if ($375) { label = 56; break; } else { label = 58; break; }
  case 56: 
   var $377=_rarvm_getbits($rarvm_input);
   var $378=$377 >>> 8;
   var $379=(($378) & 255);
   var $380=$i;
   var $381=$vm_code;
   var $382=(($381+$380)|0);
   HEAP8[($382)]=$379;
   _rarvm_addbits($rarvm_input, 8);
   label = 57; break;
  case 57: 
   var $384=$i;
   var $385=((($384)+(1))|0);
   $i=$385;
   label = 55; break;
  case 58: 
   var $387=$2;
   var $388=(($387+4249556)|0);
   var $389=$vm_code;
   var $390=(($389)|0);
   var $391=$vm_codesize;
   var $392=$filter;
   var $393=(($392+16)|0);
   var $394=_rarvm_prepare($388, $rarvm_input, $390, $391, $393);
   var $395=(($394)|(0))!=0;
   if ($395) { label = 60; break; } else { label = 59; break; }
  case 59: 
   var $397=$vm_code;
   _free($397);
   $1=0;
   label = 93; break;
  case 60: 
   var $399=$vm_code;
   _free($399);
   label = 61; break;
  case 61: 
   var $401=$filter;
   var $402=(($401+16)|0);
   var $403=(($402)|0);
   var $404=(($403)|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=(($405)|0);
   var $407=$stack_filter;
   var $408=(($407+16)|0);
   var $409=(($408+8)|0);
   HEAP32[(($409)>>2)]=$406;
   var $410=$filter;
   var $411=(($410+16)|0);
   var $412=(($411+12)|0);
   var $413=HEAP32[(($412)>>2)];
   var $414=$stack_filter;
   var $415=(($414+16)|0);
   var $416=(($415+12)|0);
   HEAP32[(($416)>>2)]=$413;
   var $417=$filter;
   var $418=(($417+16)|0);
   var $419=(($418+28)|0);
   var $420=HEAP32[(($419)>>2)];
   $static_size=$420;
   var $421=$static_size;
   var $422=(($421)|(0)) > 0;
   if ($422) { label = 62; break; } else { label = 66; break; }
  case 62: 
   var $424=$static_size;
   var $425=(($424)|(0)) < 8192;
   if ($425) { label = 63; break; } else { label = 66; break; }
  case 63: 
   var $427=$static_size;
   var $428=_malloc($427);
   var $429=$stack_filter;
   var $430=(($429+16)|0);
   var $431=(($430+20)|0);
   HEAP32[(($431)>>2)]=$428;
   var $432=$stack_filter;
   var $433=(($432+16)|0);
   var $434=(($433+20)|0);
   var $435=HEAP32[(($434)>>2)];
   var $436=(($435)|(0))!=0;
   if ($436) { label = 65; break; } else { label = 64; break; }
  case 64: 
   $1=0;
   label = 93; break;
  case 65: 
   var $439=$stack_filter;
   var $440=(($439+16)|0);
   var $441=(($440+20)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=$filter;
   var $444=(($443+16)|0);
   var $445=(($444+20)|0);
   var $446=HEAP32[(($445)>>2)];
   var $447=$static_size;
   assert($447 % 1 === 0);(_memcpy($442, $446, $447)|0);
   label = 66; break;
  case 66: 
   var $449=$stack_filter;
   var $450=(($449+16)|0);
   var $451=(($450+24)|0);
   var $452=HEAP32[(($451)>>2)];
   var $453=(($452)|(0)) < 64;
   if ($453) { label = 67; break; } else { label = 70; break; }
  case 67: 
   var $455=$stack_filter;
   var $456=(($455+16)|0);
   var $457=(($456+16)|0);
   var $458=HEAP32[(($457)>>2)];
   _free($458);
   var $459=_malloc(64);
   var $460=$stack_filter;
   var $461=(($460+16)|0);
   var $462=(($461+16)|0);
   HEAP32[(($462)>>2)]=$459;
   var $463=$stack_filter;
   var $464=(($463+16)|0);
   var $465=(($464+16)|0);
   var $466=HEAP32[(($465)>>2)];
   var $467=(($466)|(0))!=0;
   if ($467) { label = 69; break; } else { label = 68; break; }
  case 68: 
   $1=0;
   label = 93; break;
  case 69: 
   var $470=$stack_filter;
   var $471=(($470+16)|0);
   var $472=(($471+16)|0);
   var $473=HEAP32[(($472)>>2)];
   _memset($473, 0, 64);
   var $474=$stack_filter;
   var $475=(($474+16)|0);
   var $476=(($475+24)|0);
   HEAP32[(($476)>>2)]=64;
   label = 70; break;
  case 70: 
   var $478=$stack_filter;
   var $479=(($478+16)|0);
   var $480=(($479+16)|0);
   var $481=HEAP32[(($480)>>2)];
   var $482=(($481)|0);
   $global_data=$482;
   $i=0;
   label = 71; break;
  case 71: 
   var $484=$i;
   var $485=(($484)|(0)) < 7;
   if ($485) { label = 72; break; } else { label = 74; break; }
  case 72: 
   var $487=$i;
   var $488=$i;
   var $489=$stack_filter;
   var $490=(($489+16)|0);
   var $491=(($490+32)|0);
   var $492=(($491+($488<<2))|0);
   var $493=HEAP32[(($492)>>2)];
   _rar_dbgmsg64(((3040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$487,HEAP32[(((tempInt)+(8))>>2)]=$493,tempInt));
   var $494=$i;
   var $495=($494<<2);
   var $496=$global_data;
   var $497=(($496+$495)|0);
   var $498=$497;
   var $499=$i;
   var $500=$stack_filter;
   var $501=(($500+16)|0);
   var $502=(($501+32)|0);
   var $503=(($502+($499<<2))|0);
   var $504=HEAP32[(($503)>>2)];
   _rarvm_set_value(0, $498, $504);
   label = 73; break;
  case 73: 
   var $506=$i;
   var $507=((($506)+(1))|0);
   $i=$507;
   label = 71; break;
  case 74: 
   var $509=$global_data;
   var $510=(($509+28)|0);
   var $511=$510;
   var $512=$stack_filter;
   var $513=(($512+4)|0);
   var $514=HEAP32[(($513)>>2)];
   _rarvm_set_value(0, $511, $514);
   var $515=$global_data;
   var $516=(($515+32)|0);
   var $517=$516;
   _rarvm_set_value(0, $517, 0);
   var $518=$global_data;
   var $519=(($518+44)|0);
   var $520=$519;
   var $521=$stack_filter;
   var $522=(($521+8)|0);
   var $523=HEAP32[(($522)>>2)];
   _rarvm_set_value(0, $520, $523);
   var $524=$global_data;
   var $525=(($524+48)|0);
   _memset($525, 0, 16);
   $i=0;
   label = 75; break;
  case 75: 
   var $527=$i;
   var $528=(($527)|(0)) < 30;
   if ($528) { label = 76; break; } else { label = 78; break; }
  case 76: 
   var $530=$i;
   var $531=$i;
   var $532=$global_data;
   var $533=(($532+$531)|0);
   var $534=HEAP8[($533)];
   var $535=(($534)&(255));
   _rar_dbgmsg64(((2984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$530,HEAP32[(((tempInt)+(8))>>2)]=$535,tempInt));
   label = 77; break;
  case 77: 
   var $537=$i;
   var $538=((($537)+(1))|0);
   $i=$538;
   label = 75; break;
  case 78: 
   var $540=$3;
   var $541=$540 & 8;
   var $542=(($541)|(0))!=0;
   if ($542) { label = 79; break; } else { label = 92; break; }
  case 79: 
   var $544=_rarvm_read_data($rarvm_input);
   $data_size=$544;
   var $545=$data_size;
   var $546=(($545)|(0)) >= 65536;
   if ($546) { label = 80; break; } else { label = 81; break; }
  case 80: 
   $1=0;
   label = 93; break;
  case 81: 
   var $549=$stack_filter;
   var $550=(($549+16)|0);
   var $551=(($550+24)|0);
   var $552=HEAP32[(($551)>>2)];
   $cur_size=$552;
   var $553=$cur_size;
   var $554=$data_size;
   var $555=((($554)+(64))|0);
   var $556=(($553)>>>(0)) < (($555)>>>(0));
   if ($556) { label = 82; break; } else { label = 85; break; }
  case 82: 
   var $558=$data_size;
   var $559=((($558)+(64))|0);
   var $560=$cur_size;
   var $561=((($559)-($560))|0);
   var $562=$stack_filter;
   var $563=(($562+16)|0);
   var $564=(($563+24)|0);
   var $565=HEAP32[(($564)>>2)];
   var $566=((($565)+($561))|0);
   HEAP32[(($564)>>2)]=$566;
   var $567=$stack_filter;
   var $568=(($567+16)|0);
   var $569=(($568+16)|0);
   var $570=HEAP32[(($569)>>2)];
   var $571=$stack_filter;
   var $572=(($571+16)|0);
   var $573=(($572+24)|0);
   var $574=HEAP32[(($573)>>2)];
   var $575=_realloc($570, $574);
   var $576=$stack_filter;
   var $577=(($576+16)|0);
   var $578=(($577+16)|0);
   HEAP32[(($578)>>2)]=$575;
   var $579=$stack_filter;
   var $580=(($579+16)|0);
   var $581=(($580+16)|0);
   var $582=HEAP32[(($581)>>2)];
   var $583=(($582)|(0))!=0;
   if ($583) { label = 84; break; } else { label = 83; break; }
  case 83: 
   $1=0;
   label = 93; break;
  case 84: 
   label = 85; break;
  case 85: 
   var $587=$stack_filter;
   var $588=(($587+16)|0);
   var $589=(($588+16)|0);
   var $590=HEAP32[(($589)>>2)];
   var $591=(($590+64)|0);
   $global_data=$591;
   $i=0;
   label = 86; break;
  case 86: 
   var $593=$i;
   var $594=$data_size;
   var $595=(($593)|(0)) < (($594)|(0));
   if ($595) { label = 87; break; } else { label = 91; break; }
  case 87: 
   var $597=(($rarvm_input+8)|0);
   var $598=HEAP32[(($597)>>2)];
   var $599=((($598)+(2))|0);
   var $600=(($rarvm_input+4)|0);
   var $601=HEAP32[(($600)>>2)];
   var $602=(($599)|(0)) > (($601)|(0));
   if ($602) { label = 88; break; } else { label = 89; break; }
  case 88: 
   $1=0;
   label = 93; break;
  case 89: 
   var $605=_rarvm_getbits($rarvm_input);
   var $606=$605 >>> 8;
   var $607=(($606) & 255);
   var $608=$i;
   var $609=$global_data;
   var $610=(($609+$608)|0);
   HEAP8[($610)]=$607;
   var $611=$i;
   var $612=$i;
   var $613=$global_data;
   var $614=(($613+$612)|0);
   var $615=HEAP8[($614)];
   var $616=(($615)&(255));
   _rar_dbgmsg64(((2984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$611,HEAP32[(((tempInt)+(8))>>2)]=$616,tempInt));
   _rarvm_addbits($rarvm_input, 8);
   label = 90; break;
  case 90: 
   var $618=$i;
   var $619=((($618)+(1))|0);
   $i=$619;
   label = 86; break;
  case 91: 
   label = 92; break;
  case 92: 
   $1=1;
   label = 93; break;
  case 93: 
   var $623=$1;
   STACKTOP = sp;
   return $623;
  default: assert(0, "bad label: " + label);
 }
}
function _unp_write_area($unpack_data, $start_ptr, $end_ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$unpack_data;
   $2=$start_ptr;
   $3=$end_ptr;
   var $4=$3;
   var $5=$2;
   var $6=(($4)>>>(0)) < (($5)>>>(0));
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   var $10=$1;
   var $11=(($10+32772)|0);
   var $12=(($11+$9)|0);
   var $13=$2;
   var $14=(((-$13))|0);
   var $15=$14 & 4194303;
   _unp_write_data($8, $12, $15);
   var $16=$1;
   var $17=$1;
   var $18=(($17+32772)|0);
   var $19=(($18)|0);
   var $20=$3;
   _unp_write_data($16, $19, $20);
   label = 4; break;
  case 3: 
   var $22=$1;
   var $23=$2;
   var $24=$1;
   var $25=(($24+32772)|0);
   var $26=(($25+$23)|0);
   var $27=$3;
   var $28=$2;
   var $29=((($27)-($28))|0);
   _unp_write_data($22, $26, $29);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _InitCRC() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $I;
   var $J;
   var $C;
   $I=0;
   label = 2; break;
  case 2: 
   var $2=$I;
   var $3=(($2)|(0)) < 256;
   if ($3) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $5=$I;
   $C=$5;
   $J=0;
   label = 4; break;
  case 4: 
   var $7=$J;
   var $8=(($7)|(0)) < 8;
   if ($8) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $10=$C;
   var $11=$10 & 1;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $14=$C;
   var $15=$14 >>> 1;
   var $16=$15 ^ -306674912;
   var $21 = $16;label = 8; break;
  case 7: 
   var $18=$C;
   var $19=$18 >>> 1;
   var $21 = $19;label = 8; break;
  case 8: 
   var $21;
   $C=$21;
   label = 9; break;
  case 9: 
   var $23=$J;
   var $24=((($23)+(1))|0);
   $J=$24;
   label = 4; break;
  case 10: 
   var $26=$C;
   var $27=$I;
   var $28=((22680+($27<<2))|0);
   HEAP32[(($28)>>2)]=$26;
   label = 11; break;
  case 11: 
   var $30=$I;
   var $31=((($30)+(1))|0);
   $I=$31;
   label = 2; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _execute_code($unpack_data, $prg) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$unpack_data;
   $2=$prg;
   _rar_dbgmsg64(((2720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $3=$2;
   var $4=(($3+24)|0);
   var $5=HEAP32[(($4)>>2)];
   _rar_dbgmsg64(((2664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
   var $6=$2;
   var $7=(($6+24)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0)) > 0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=(($11+4249536)|0);
   var $ld$0$0=(($12)|0);
   var $13$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($12+4)|0);
   var $13$1=HEAP32[(($ld$1$1)>>2)];
   var $14$0=$13$0;
   var $14=$14$0;
   var $15=$2;
   var $16=(($15+32)|0);
   var $17=(($16+24)|0);
   HEAP32[(($17)>>2)]=$14;
   var $18=$2;
   var $19=(($18+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+36)|0);
   var $22=$21;
   var $23=$1;
   var $24=(($23+4249536)|0);
   var $ld$2$0=(($24)|0);
   var $25$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($24+4)|0);
   var $25$1=HEAP32[(($ld$3$1)>>2)];
   var $26$0=$25$0;
   var $26=$26$0;
   _rarvm_set_value(0, $22, $26);
   var $27=$2;
   var $28=(($27+16)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+40)|0);
   var $31=$30;
   var $32=$1;
   var $33=(($32+4249536)|0);
   var $ld$4$0=(($33)|0);
   var $34$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($33+4)|0);
   var $34$1=HEAP32[(($ld$5$1)>>2)];
   var $35$0=$34$1;
   var $35$1=((($34$1)|(0)) < 0 ? -1 : 0);
   var $36$0=$35$0;
   var $36=$36$0;
   _rarvm_set_value(0, $31, $36);
   var $37=$1;
   var $38=(($37+4249556)|0);
   var $39=$2;
   var $40=_rarvm_execute($38, $39);
   label = 3; break;
  case 3: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _urarlib_get($output, $size, $filename, $rarfile, $libpassword) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $retcode;
   $1=$output;
   $2=$size;
   $3=$filename;
   $4=$rarfile;
   $5=$libpassword;
   _InitCRC();
   var $6=HEAP32[((24304)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[((24304)>>2)];
   _free($9);
   label = 3; break;
  case 3: 
   var $11=$3;
   var $12=_strdup($11);
   HEAP32[((24304)>>2)]=$12;
   var $13=HEAP32[((24312)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=HEAP32[((24312)>>2)];
   _free($16);
   label = 5; break;
  case 5: 
   var $18=$4;
   var $19=_strdup($18);
   HEAP32[((24312)>>2)]=$19;
   var $20=HEAP32[((7904)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $23=HEAP32[((7904)>>2)];
   _free($23);
   label = 7; break;
  case 7: 
   var $25=$5;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $28=$5;
   var $29=_strdup($28);
   HEAP32[((7904)>>2)]=$29;
   label = 10; break;
  case 9: 
   var $31=_strdup(((5752)|0));
   HEAP32[((7904)>>2)]=$31;
   label = 10; break;
  case 10: 
   HEAP32[((4648)>>2)]=0;
   var $33=$2;
   HEAP32[((4640)>>2)]=$33;
   var $34=_ExtrFile();
   var $35=(($34)&(1));
   $retcode=$35;
   var $36=HEAP32[((7904)>>2)];
   var $37=(($36)|(0))!=0;
   if ($37) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $39=HEAP32[((7904)>>2)];
   _free($39);
   label = 12; break;
  case 12: 
   var $41=_strdup(((5752)|0));
   HEAP32[((7904)>>2)]=$41;
   var $42=HEAP32[((4704)>>2)];
   var $43=(($42)|(0))!=0;
   if ($43) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $45=HEAP32[((4704)>>2)];
   var $46=_fclose($45);
   HEAP32[((4704)>>2)]=0;
   label = 14; break;
  case 14: 
   var $48=HEAP32[((7344)>>2)];
   var $49=(($48)|(0))!=0;
   if ($49) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $51=HEAP32[((7344)>>2)];
   _free($51);
   label = 16; break;
  case 16: 
   var $53=HEAP32[((7376)>>2)];
   var $54=(($53)|(0))!=0;
   if ($54) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $56=HEAP32[((7376)>>2)];
   _free($56);
   label = 18; break;
  case 18: 
   var $58=HEAP32[((22664)>>2)];
   var $59=(($58)|(0))!=0;
   if ($59) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $61=HEAP32[((22664)>>2)];
   _free($61);
   label = 20; break;
  case 20: 
   HEAP32[((7344)>>2)]=0;
   HEAP32[((7376)>>2)]=0;
   HEAP32[((22664)>>2)]=0;
   var $63=$retcode;
   var $64=(($63) & 1);
   var $65=(($64)&(1));
   var $66=(($65)|(0))==0;
   if ($66) { label = 21; break; } else { label = 24; break; }
  case 21: 
   var $68=HEAP32[((4648)>>2)];
   var $69=(($68)|(0))!=0;
   if ($69) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $71=HEAP32[((4648)>>2)];
   _free($71);
   label = 23; break;
  case 23: 
   HEAP32[((4648)>>2)]=0;
   var $73=$1;
   var $74=$73;
   HEAP32[(($74)>>2)]=0;
   var $75=$2;
   HEAP32[(($75)>>2)]=0;
   label = 24; break;
  case 24: 
   var $77=HEAP32[((4648)>>2)];
   var $78=$77;
   var $79=$1;
   var $80=$79;
   HEAP32[(($80)>>2)]=$78;
   var $81=$retcode;
   var $82=(($81) & 1);
   var $83=(($82)&(1));
   return $83;
  default: assert(0, "bad label: " + label);
 }
}
function _ExtrFile() {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ReturnCode;
   var $DebugMsg=sp;
   $ReturnCode=1;
   HEAP8[(22256)]=0;
   var $2=HEAP32[((24312)>>2)];
   var $3=_fopen($2, ((3280)|0));
   HEAP32[((4704)>>2)]=$3;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $6=_IsArchive();
   var $7=(($6)|(0))!=0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=HEAP32[((4704)>>2)];
   var $10=_fclose($9);
   HEAP32[((4704)>>2)]=0;
   $1=0;
   label = 46; break;
  case 4: 
   label = 6; break;
  case 5: 
   $1=0;
   label = 46; break;
  case 6: 
   var $14=_malloc(1048576);
   HEAP32[((7344)>>2)]=$14;
   var $15=(($14)|(0))==0;
   if ($15) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $1=0;
   label = 46; break;
  case 8: 
   var $18=HEAP32[((4704)>>2)];
   var $19=((tempInt=(HEAPU8[((((5741)|0))|0)])|(HEAPU8[(((((5741)|0))+(1))|0)]<<8),(tempInt << 16) >> 16));
   var $20=(($19)&(65535));
   var $21=((($20)-(13))|0);
   var $22=_fseek($18, $21, 1);
   label = 9; break;
  case 9: 
   var $24=_ReadBlock(32884);
   var $25=(($24)|(0)) <= 0;
   if ($25) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $ReturnCode=0;
   label = 43; break;
  case 11: 
   var $28=HEAP8[((((23706)|0))|0)];
   var $29=(($28)&(255));
   var $30=(($29)|(0))==119;
   if ($30) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $ReturnCode=0;
   label = 43; break;
  case 13: 
   var $33=HEAP32[((24304)>>2)];
   var $34=HEAP32[((24320)>>2)];
   var $35=_stricomp($33, $34);
   var $36=(($35)|(0))==0;
   var $37=(($36)&(1));
   HEAP8[(22256)]=$37;
   var $38=HEAP8[(22256)];
   var $39=(($38) & 1);
   if ($39) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $41=HEAP32[((((7996)|0))>>2)];
   var $42=_malloc($41);
   HEAP32[((4648)>>2)]=$42;
   var $43=HEAP32[((4640)>>2)];
   HEAP32[(($43)>>2)]=0;
   var $44=HEAP32[((4648)>>2)];
   var $45=(($44)|(0))==0;
   if ($45) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $ReturnCode=0;
   label = 43; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $49=((tempInt=(HEAPU8[((((5739)|0))|0)])|(HEAPU8[(((((5739)|0))+(1))|0)]<<8),(tempInt << 16) >> 16));
   var $50=(($49)&(65535));
   var $51=$50 & 8;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $54=HEAP8[(22256)];
   var $55=(($54) & 1);
   if ($55) { label = 19; break; } else { label = 39; break; }
  case 19: 
   var $57=HEAP8[((((8012)|0))|0)];
   var $58=(($57)&(255));
   var $59=(($58)|(0)) < 13;
   if ($59) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $61=HEAP8[((((8012)|0))|0)];
   var $62=(($61)&(255));
   var $63=(($62)|(0)) > 29;
   if ($63) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $65=(($DebugMsg)|0);
   var $66=HEAP8[((((8012)|0))|0)];
   var $67=(($66)&(255));
   var $68=_snprintf($65, 64, ((2440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$67,tempInt));
   $ReturnCode=0;
   label = 43; break;
  case 22: 
   HEAP32[((22632)>>2)]=0;
   HEAP32[((22640)>>2)]=0;
   var $70=HEAP32[((7904)>>2)];
   var $71=HEAP8[($70)];
   var $72=(($71 << 24) >> 24);
   var $73=(($72)|(0))!=0;
   if ($73) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $75=HEAP16[((((7988)|0))>>1)];
   var $76=(($75)&(65535));
   var $77=$76 & 4;
   var $78=(($77)|(0))!=0;
   if ($78) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $80=HEAP8[((((8012)|0))|0)];
   var $81=(($80)&(255));
   HEAP32[((22264)>>2)]=$81;
   label = 26; break;
  case 25: 
   HEAP32[((22264)>>2)]=0;
   label = 26; break;
  case 26: 
   var $84=HEAP32[((22264)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $87=HEAP32[((7904)>>2)];
   _SetCryptKeys($87);
   label = 28; break;
  case 28: 
   var $89=HEAP32[((((7992)|0))>>2)];
   HEAP32[((6304)>>2)]=$89;
   var $90=HEAP32[((((7996)|0))>>2)];
   HEAP32[((22280)>>2)]=$90;
   var $91=HEAP8[((((8013)|0))|0)];
   var $92=(($91)&(255));
   var $93=(($92)|(0))==48;
   if ($93) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $95=_UnstoreFile();
   label = 34; break;
  case 30: 
   var $97=HEAP8[((((8012)|0))|0)];
   var $98=(($97)&(255));
   var $99=(($98)|(0))==29;
   if ($99) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $101=HEAP32[((4704)>>2)];
   var $102=HEAP32[((22280)>>2)];
   var $103=HEAP32[((6304)>>2)];
   var $104=HEAP16[((((7988)|0))>>1)];
   var $105=(($104)&(65535));
   var $106=_Unpack29($101, $102, $103, $105);
   label = 33; break;
  case 32: 
   var $108=HEAP32[((7344)>>2)];
   _Unpack($108);
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $111=HEAP32[((4648)>>2)];
   var $112=(($111)|(0))!=0;
   if ($112) { label = 35; break; } else { label = 38; break; }
  case 35: 
   var $114=HEAP32[((((8004)|0))>>2)];
   var $115=HEAP32[((4648)>>2)];
   var $116=HEAP32[((((7996)|0))>>2)];
   var $117=_CalcCRC32(-1, $115, $116);
   var $118=$117 ^ -1;
   var $119=(($114)|(0))!=(($118)|(0));
   if ($119) { label = 36; break; } else { label = 37; break; }
  case 36: 
   $ReturnCode=0;
   label = 43; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $124=HEAP32[((4704)>>2)];
   var $125=(($124)|(0))!=0;
   if ($125) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $127=HEAP32[((4704)>>2)];
   var $128=HEAP32[((7976)>>2)];
   var $129=_fseek($127, $128, 0);
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $132=HEAP32[((24304)>>2)];
   var $133=HEAP32[((24320)>>2)];
   var $134=_stricomp($132, $133);
   var $135=(($134)|(0))!=0;
   if ($135) { label = 9; break; } else { label = 43; break; }
  case 43: 
   var $137=HEAP32[((7344)>>2)];
   _free($137);
   HEAP32[((7344)>>2)]=0;
   var $138=HEAP32[((4704)>>2)];
   var $139=(($138)|(0))!=0;
   if ($139) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $141=HEAP32[((4704)>>2)];
   var $142=_fclose($141);
   HEAP32[((4704)>>2)]=0;
   label = 45; break;
  case 45: 
   var $144=$ReturnCode;
   var $145=(($144) & 1);
   $1=$145;
   label = 46; break;
  case 46: 
   var $147=$1;
   STACKTOP = sp;
   return $147;
  default: assert(0, "bad label: " + label);
 }
}
function _urarlib_list($rarfile, $list) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $tmp_List;
   var $filecount;
   $2=$rarfile;
   $3=$list;
   $tmp_List=0;
   $filecount=0;
   _InitCRC();
   var $4=$2;
   var $5=_fopen($4, ((3280)|0));
   HEAP32[((4704)>>2)]=$5;
   var $6=HEAP32[((4704)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $9=_IsArchive();
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=HEAP32[((4704)>>2)];
   var $13=_fclose($12);
   HEAP32[((4704)>>2)]=0;
   $1=0;
   label = 30; break;
  case 4: 
   label = 6; break;
  case 5: 
   $1=0;
   label = 30; break;
  case 6: 
   var $17=_malloc(1048576);
   HEAP32[((7344)>>2)]=$17;
   var $18=HEAP32[((7344)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 8; break; } else { label = 7; break; }
  case 7: 
   $1=0;
   label = 30; break;
  case 8: 
   var $22=HEAP32[((4704)>>2)];
   var $23=((tempInt=(HEAPU8[((((5741)|0))|0)])|(HEAPU8[(((((5741)|0))+(1))|0)]<<8),(tempInt << 16) >> 16));
   var $24=(($23)&(65535));
   var $25=((($24)-(13))|0);
   var $26=_fseek($22, $25, 1);
   var $27=$3;
   HEAP32[(($27)>>2)]=0;
   label = 9; break;
  case 9: 
   var $29=_ReadBlock(32884);
   var $30=(($29)|(0)) <= 0;
   if ($30) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 19; break;
  case 11: 
   var $33=HEAP8[((((23706)|0))|0)];
   var $34=(($33)&(255));
   var $35=(($34)|(0))==119;
   if ($35) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 19; break;
  case 13: 
   var $38=$3;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $42=_malloc(40);
   var $43=$42;
   $tmp_List=$43;
   var $44=$tmp_List;
   var $45=(($44+36)|0);
   HEAP32[(($45)>>2)]=0;
   var $46=$tmp_List;
   var $47=$3;
   HEAP32[(($47)>>2)]=$46;
   label = 16; break;
  case 15: 
   var $49=_malloc(40);
   var $50=$49;
   var $51=$tmp_List;
   var $52=(($51+36)|0);
   HEAP32[(($52)>>2)]=$50;
   var $53=$tmp_List;
   var $54=(($53+36)|0);
   var $55=HEAP32[(($54)>>2)];
   $tmp_List=$55;
   var $56=$tmp_List;
   var $57=(($56+36)|0);
   HEAP32[(($57)>>2)]=0;
   label = 16; break;
  case 16: 
   var $59=HEAP16[((((8014)|0))>>1)];
   var $60=(($59)&(65535));
   var $61=((($60)+(1))|0);
   var $62=_malloc($61);
   var $63=$tmp_List;
   var $64=(($63)|0);
   var $65=(($64)|0);
   HEAP32[(($65)>>2)]=$62;
   var $66=$tmp_List;
   var $67=(($66)|0);
   var $68=(($67)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=HEAP32[((24320)>>2)];
   var $71=_strcpy($69, $70);
   var $72=HEAP16[((((8014)|0))>>1)];
   var $73=$tmp_List;
   var $74=(($73)|0);
   var $75=(($74+4)|0);
   HEAP16[(($75)>>1)]=$72;
   var $76=HEAP32[((((7992)|0))>>2)];
   var $77=$tmp_List;
   var $78=(($77)|0);
   var $79=(($78+8)|0);
   HEAP32[(($79)>>2)]=$76;
   var $80=HEAP32[((((7996)|0))>>2)];
   var $81=$tmp_List;
   var $82=(($81)|0);
   var $83=(($82+12)|0);
   HEAP32[(($83)>>2)]=$80;
   var $84=HEAP8[((((8000)|0))|0)];
   var $85=$tmp_List;
   var $86=(($85)|0);
   var $87=(($86+16)|0);
   HEAP8[($87)]=$84;
   var $88=HEAP32[((((8004)|0))>>2)];
   var $89=$tmp_List;
   var $90=(($89)|0);
   var $91=(($90+20)|0);
   HEAP32[(($91)>>2)]=$88;
   var $92=HEAP32[((((8008)|0))>>2)];
   var $93=$tmp_List;
   var $94=(($93)|0);
   var $95=(($94+24)|0);
   HEAP32[(($95)>>2)]=$92;
   var $96=HEAP8[((((8012)|0))|0)];
   var $97=$tmp_List;
   var $98=(($97)|0);
   var $99=(($98+28)|0);
   HEAP8[($99)]=$96;
   var $100=HEAP8[((((8013)|0))|0)];
   var $101=$tmp_List;
   var $102=(($101)|0);
   var $103=(($102+29)|0);
   HEAP8[($103)]=$100;
   var $104=HEAP32[((((8016)|0))>>2)];
   var $105=$tmp_List;
   var $106=(($105)|0);
   var $107=(($106+32)|0);
   HEAP32[(($107)>>2)]=$104;
   var $108=$filecount;
   var $109=((($108)+(1))|0);
   $filecount=$109;
   var $110=HEAP32[((4704)>>2)];
   var $111=(($110)|(0))!=0;
   if ($111) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $113=HEAP32[((4704)>>2)];
   var $114=HEAP32[((7976)>>2)];
   var $115=_fseek($113, $114, 0);
   label = 18; break;
  case 18: 
   label = 9; break;
  case 19: 
   var $118=HEAP32[((7904)>>2)];
   var $119=(($118)|(0))!=0;
   if ($119) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $121=HEAP32[((7904)>>2)];
   _free($121);
   label = 21; break;
  case 21: 
   var $123=_strdup(((5752)|0));
   HEAP32[((7904)>>2)]=$123;
   var $124=HEAP32[((4704)>>2)];
   var $125=(($124)|(0))!=0;
   if ($125) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $127=HEAP32[((4704)>>2)];
   var $128=_fclose($127);
   HEAP32[((4704)>>2)]=0;
   label = 23; break;
  case 23: 
   var $130=HEAP32[((7344)>>2)];
   var $131=(($130)|(0))!=0;
   if ($131) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $133=HEAP32[((7344)>>2)];
   _free($133);
   label = 25; break;
  case 25: 
   var $135=HEAP32[((7376)>>2)];
   var $136=(($135)|(0))!=0;
   if ($136) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $138=HEAP32[((7376)>>2)];
   _free($138);
   label = 27; break;
  case 27: 
   var $140=HEAP32[((22664)>>2)];
   var $141=(($140)|(0))!=0;
   if ($141) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $143=HEAP32[((22664)>>2)];
   _free($143);
   label = 29; break;
  case 29: 
   HEAP32[((7344)>>2)]=0;
   HEAP32[((7376)>>2)]=0;
   HEAP32[((22664)>>2)]=0;
   var $145=$filecount;
   $1=$145;
   label = 30; break;
  case 30: 
   var $147=$1;
   return $147;
  default: assert(0, "bad label: " + label);
 }
}
function _IsArchive() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=HEAP32[((4704)>>2)];
   var $3=_fread(4696, 1, 7, $2);
   var $4=(($3)|(0))!=7;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 11; break;
  case 3: 
   var $7=((tempInt=(HEAPU8[((((4696)|0))|0)])|(HEAPU8[(((((4696)|0))+(1))|0)]<<8),(tempInt << 16) >> 16));
   var $8=(($7)&(65535));
   var $9=(($8)|(0))==24914;
   if ($9) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $11=HEAP8[((((4698)|0))|0)];
   var $12=(($11)&(255));
   var $13=(($12)|(0))==114;
   if ($13) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $15=((tempInt=(HEAPU8[((((4699)|0))|0)])|(HEAPU8[(((((4699)|0))+(1))|0)]<<8),(tempInt << 16) >> 16));
   var $16=(($15)&(65535));
   var $17=(($16)|(0))==6689;
   if ($17) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $19=((tempInt=(HEAPU8[((((4701)|0))|0)])|(HEAPU8[(((((4701)|0))+(1))|0)]<<8),(tempInt << 16) >> 16));
   var $20=(($19)&(65535));
   var $21=(($20)|(0))==7;
   if ($21) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $23=HEAP32[((_stderr)>>2)];
   var $24=_fputs(((2776)|0), $23);
   $1=0;
   label = 11; break;
  case 8: 
   var $26=_ReadHeader(115);
   var $27=(($26)|(0))!=13;
   if ($27) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $1=0;
   label = 11; break;
  case 10: 
   $1=1;
   label = 11; break;
  case 11: 
   var $31=$1;
   return $31;
  default: assert(0, "bad label: " + label);
 }
}
function _CalcCRC32($StartCRC, $Addr, $Size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $I;
   $1=$StartCRC;
   $2=$Addr;
   $3=$Size;
   $I=0;
   label = 2; break;
  case 2: 
   var $5=$I;
   var $6=$3;
   var $7=(($5)>>>(0)) < (($6)>>>(0));
   if ($7) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $9=$1;
   var $10=(($9) & 255);
   var $11=(($10)&(255));
   var $12=$I;
   var $13=$2;
   var $14=(($13+$12)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$11 ^ $16;
   var $18=((22680+($17<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$1;
   var $21=$20 >>> 8;
   var $22=$19 ^ $21;
   $1=$22;
   label = 4; break;
  case 4: 
   var $24=$I;
   var $25=((($24)+(1))|0);
   $I=$25;
   label = 2; break;
  case 5: 
   var $27=$1;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _ReadBlock($BlockType) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $SaveFileHead=sp;
   var $Size;
   var $ReadSubBlock;
   var $tmpbuf1=(sp)+(48);
   var $i;
   var $j;
   var $sflag;
   $2=$BlockType;
   $ReadSubBlock=0;
   var $3=$SaveFileHead;
   assert(44 % 1 === 0);(_memcpy($3, 7984, 44)|0);
   var $4=$2;
   var $5=$4 & 32768;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $ReadSubBlock=1;
   label = 3; break;
  case 3: 
   var $9=$2;
   var $10=$9 & 255;
   $2=$10;
   label = 4; break;
  case 4: 
   var $12=HEAP32[((4704)>>2)];
   var $13=_ftell($12);
   HEAP32[((22656)>>2)]=$13;
   var $14=_ReadHeader(116);
   $Size=$14;
   var $15=$Size;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $18=HEAP16[((((7990)|0))>>1)];
   var $19=(($18)&(65535));
   var $20=(($19)|(0)) < 7;
   if ($20) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 54; break;
  case 7: 
   var $23=HEAP32[((22656)>>2)];
   var $24=HEAP16[((((7990)|0))>>1)];
   var $25=(($24)&(65535));
   var $26=((($23)+($25))|0);
   HEAP32[((7976)>>2)]=$26;
   var $27=HEAP16[((((7988)|0))>>1)];
   var $28=(($27)&(65535));
   var $29=$28 & 32768;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $32=HEAP32[((((7992)|0))>>2)];
   var $33=HEAP32[((7976)>>2)];
   var $34=((($33)+($32))|0);
   HEAP32[((7976)>>2)]=$34;
   label = 9; break;
  case 9: 
   var $36=HEAP32[((7976)>>2)];
   var $37=HEAP32[((22656)>>2)];
   var $38=(($36)|(0)) <= (($37)|(0));
   if ($38) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $1=0;
   label = 54; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $42=$Size;
   var $43=(($42)|(0)) > 0;
   if ($43) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $45=$2;
   var $46=(($45)|(0))!=119;
   if ($46) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $48=$2;
   HEAP32[((7648)>>2)]=$48;
   label = 15; break;
  case 15: 
   var $50=$Size;
   var $51=(($50)|(0))==0;
   if ($51) { label = 21; break; } else { label = 16; break; }
  case 16: 
   var $53=$2;
   var $54=(($53)|(0))==0;
   if ($54) { label = 21; break; } else { label = 17; break; }
  case 17: 
   var $56=HEAP8[((((7986)|0))|0)];
   var $57=(($56)&(255));
   var $58=$2;
   var $59=(($57)|(0))==(($58)|(0));
   if ($59) { label = 21; break; } else { label = 18; break; }
  case 18: 
   var $61=HEAP8[((((7986)|0))|0)];
   var $62=(($61)&(255));
   var $63=(($62)|(0))==119;
   if ($63) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $65=$ReadSubBlock;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $68=HEAP32[((7648)>>2)];
   var $69=$2;
   var $70=(($68)|(0))==(($69)|(0));
   if ($70) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 23; break;
  case 22: 
   var $73=HEAP32[((4704)>>2)];
   var $74=HEAP32[((7976)>>2)];
   var $75=_fseek($73, $74, 0);
   label = 4; break;
  case 23: 
   var $77=HEAP16[((((7984)|0))>>1)];
   HEAP16[((((23704)|0))>>1)]=$77;
   var $78=HEAP8[((((7986)|0))|0)];
   HEAP8[((((23706)|0))|0)]=$78;
   var $79=HEAP16[((((7988)|0))>>1)];
   HEAP16[((((23708)|0))>>1)]=$79;
   var $80=HEAP16[((((7990)|0))>>1)];
   HEAP16[((((23710)|0))>>1)]=$80;
   var $81=HEAP32[((((7992)|0))>>2)];
   HEAP32[((((23712)|0))>>2)]=$81;
   var $82=$2;
   var $83=HEAP8[((((7986)|0))|0)];
   var $84=(($83)&(255));
   var $85=(($82)|(0))!=(($84)|(0));
   if ($85) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $2=0;
   label = 25; break;
  case 25: 
   var $88=$2;
   var $89=116==(($88)|(0));
   if ($89) { label = 26; break; } else { label = 52; break; }
  case 26: 
   var $91=$Size;
   var $92=(($91)|(0)) > 0;
   if ($92) { label = 27; break; } else { label = 52; break; }
  case 27: 
   var $94=HEAP32[((24320)>>2)];
   var $95=HEAP16[((((8014)|0))>>1)];
   var $96=(($95)&(65535));
   var $97=((($96)+(1))|0);
   var $98=_realloc($94, $97);
   HEAP32[((24320)>>2)]=$98;
   var $99=HEAP32[((24320)>>2)];
   var $100=HEAP16[((((8014)|0))>>1)];
   var $101=(($100)&(65535));
   var $102=HEAP32[((4704)>>2)];
   var $103=_fread($99, 1, $101, $102);
   var $104=HEAP16[((((8014)|0))>>1)];
   var $105=(($104)&(65535));
   var $106=HEAP32[((24320)>>2)];
   var $107=(($106+$105)|0);
   HEAP8[($107)]=0;
   var $108=HEAP16[((((8014)|0))>>1)];
   var $109=(($108)&(65535));
   var $110=$Size;
   var $111=((($110)+($109))|0);
   $Size=$111;
   var $112=HEAP16[((((7988)|0))>>1)];
   var $113=(($112)&(65535));
   var $114=$113 & 1024;
   var $115=(($114)|(0))!=0;
   if ($115) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $117=$tmpbuf1;
   _memset($117, 0, 8);
   var $118=$Size;
   var $119=HEAP16[((((7990)|0))>>1)];
   var $120=(($119)&(65535));
   var $121=(($118)|(0)) < (($120)|(0));
   if ($121) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $123=(($tmpbuf1)|0);
   var $124=HEAP32[((4704)>>2)];
   var $125=_fread($123, 1, 8, $124);
   var $126=$Size;
   var $127=((($126)+($125))|0);
   $Size=$127;
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $130=HEAP16[((((7988)|0))>>1)];
   var $131=(($130)&(65535));
   var $132=$131 & 4096;
   var $133=(($132)|(0))!=0;
   if ($133) { label = 32; break; } else { label = 51; break; }
  case 32: 
   $sflag=0;
   var $135=$Size;
   var $136=HEAP16[((((7990)|0))>>1)];
   var $137=(($136)&(65535));
   var $138=(($135)|(0)) < (($137)|(0));
   if ($138) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $140=HEAP32[((4704)>>2)];
   var $141=_fgetc($140);
   var $142=(($141) & 65535);
   $sflag=$142;
   var $143=HEAP32[((4704)>>2)];
   var $144=_fgetc($143);
   var $145=$144 << 8;
   var $146=$145 & 65280;
   var $147=$sflag;
   var $148=(($147)&(65535));
   var $149=$148 | $146;
   var $150=(($149) & 65535);
   $sflag=$150;
   var $151=$Size;
   var $152=((($151)+(2))|0);
   $Size=$152;
   label = 34; break;
  case 34: 
   $i=0;
   label = 35; break;
  case 35: 
   var $155=$i;
   var $156=(($155)|(0)) < 4;
   if ($156) { label = 36; break; } else { label = 50; break; }
  case 36: 
   var $158=$sflag;
   var $159=(($158)&(65535));
   var $160=$i;
   var $161=($160<<2);
   var $162=(((15)-($161))|0);
   var $163=$159 >> (($162)|(0));
   var $164=$163 & 1;
   var $165=(($164)|(0))==0;
   if ($165) { label = 37; break; } else { label = 38; break; }
  case 37: 
   label = 49; break;
  case 38: 
   var $168=$i;
   var $169=(($168)|(0))!=0;
   if ($169) { label = 39; break; } else { label = 42; break; }
  case 39: 
   var $171=$Size;
   var $172=HEAP16[((((7990)|0))>>1)];
   var $173=(($172)&(65535));
   var $174=(($171)|(0)) < (($173)|(0));
   if ($174) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $176=HEAP32[((4704)>>2)];
   var $177=_fseek($176, 4, 1);
   var $178=$Size;
   var $179=((($178)+(4))|0);
   $Size=$179;
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   $j=0;
   label = 43; break;
  case 43: 
   var $183=$j;
   var $184=$sflag;
   var $185=(($184)&(65535));
   var $186=$i;
   var $187=($186<<2);
   var $188=(((12)-($187))|0);
   var $189=$185 >> (($188)|(0));
   var $190=$189 & 3;
   var $191=(($183)|(0)) < (($190)|(0));
   if ($191) { label = 44; break; } else { label = 48; break; }
  case 44: 
   var $193=$Size;
   var $194=HEAP16[((((7990)|0))>>1)];
   var $195=(($194)&(65535));
   var $196=(($193)|(0)) < (($195)|(0));
   if ($196) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $198=HEAP32[((4704)>>2)];
   var $199=_fgetc($198);
   var $200=$Size;
   var $201=((($200)+(1))|0);
   $Size=$201;
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $204=$j;
   var $205=((($204)+(1))|0);
   $j=$205;
   label = 43; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $208=$i;
   var $209=((($208)+(1))|0);
   $i=$209;
   label = 35; break;
  case 50: 
   label = 51; break;
  case 51: 
   label = 53; break;
  case 52: 
   var $213=$SaveFileHead;
   assert(44 % 1 === 0);(_memcpy(7984, $213, 44)|0);
   var $214=HEAP32[((4704)>>2)];
   var $215=HEAP32[((22656)>>2)];
   var $216=_fseek($214, $215, 0);
   label = 53; break;
  case 53: 
   var $218=$Size;
   $1=$218;
   label = 54; break;
  case 54: 
   var $220=$1;
   STACKTOP = sp;
   return $220;
  default: assert(0, "bad label: " + label);
 }
}
function _urarlib_freelist($list) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tmp;
   $1=$list;
   var $2=$1;
   $tmp=$2;
   label = 2; break;
  case 2: 
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $7=$1;
   var $8=(($7+36)|0);
   var $9=HEAP32[(($8)>>2)];
   $tmp=$9;
   var $10=$1;
   var $11=(($10)|0);
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   _free($13);
   var $14=$1;
   var $15=$14;
   _free($15);
   var $16=$tmp;
   $1=$16;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ReadHeader($BlockType) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $Size;
   var $Header=sp;
   var $tmpbuf1=(sp)+(64);
   $1=$BlockType;
   $Size=0;
   var $2=$1;
   if ((($2)|(0))==115) {
    label = 2; break;
   }
   else if ((($2)|(0))==116) {
    label = 3; break;
   }
   else {
   label = 7; break;
   }
  case 2: 
   var $4=(($Header)|0);
   var $5=HEAP32[((4704)>>2)];
   var $6=_fread($4, 1, 13, $5);
   $Size=$6;
   var $7=(($Header)|0);
   var $8=HEAP8[($7)];
   var $9=(($8)&(255));
   var $10=(($Header+1)|0);
   var $11=HEAP8[($10)];
   var $12=(($11)&(255));
   var $13=(($12)&(65535));
   var $14=$13 << 8;
   var $15=((($9)+($14))|0);
   var $16=(($15) & 65535);
   tempBigInt=$16;HEAP8[((((5736)|0))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5736)|0))+(1))|0)]=tempBigInt&0xff;
   var $17=(($Header+2)|0);
   var $18=HEAP8[($17)];
   HEAP8[((((5738)|0))|0)]=$18;
   var $19=(($Header+3)|0);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   var $22=(($Header+4)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=(($24)&(65535));
   var $26=$25 << 8;
   var $27=((($21)+($26))|0);
   var $28=(($27) & 65535);
   tempBigInt=$28;HEAP8[((((5739)|0))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5739)|0))+(1))|0)]=tempBigInt&0xff;
   var $29=(($Header+5)|0);
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=(($Header+6)|0);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=(($34)&(65535));
   var $36=$35 << 8;
   var $37=((($31)+($36))|0);
   var $38=(($37) & 65535);
   tempBigInt=$38;HEAP8[((((5741)|0))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5741)|0))+(1))|0)]=tempBigInt&0xff;
   var $39=(($Header+7)|0);
   var $40=HEAP8[($39)];
   var $41=(($40)&(255));
   var $42=(($Header+8)|0);
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=(($44)&(65535));
   var $46=$45 << 8;
   var $47=((($41)+($46))|0);
   var $48=(($47) & 65535);
   tempBigInt=$48;HEAP8[((((5743)|0))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5743)|0))+(1))|0)]=tempBigInt&0xff;
   var $49=(($Header+9)|0);
   var $50=HEAP8[($49)];
   var $51=(($50)&(255));
   var $52=(($Header+10)|0);
   var $53=HEAP8[($52)];
   var $54=(($53)&(255));
   var $55=(($54)&(65535));
   var $56=$55 << 8;
   var $57=((($51)+($56))|0);
   var $58=(($Header+11)|0);
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=$60 << 16;
   var $62=((($57)+($61))|0);
   var $63=(($Header+12)|0);
   var $64=HEAP8[($63)];
   var $65=(($64)&(255));
   var $66=$65 << 24;
   var $67=((($62)+($66))|0);
   tempBigInt=$67;HEAP8[((((5745)|0))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5745)|0))+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5745)|0))+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(((((5745)|0))+(3))|0)]=tempBigInt&0xff;
   var $68=(($Header+2)|0);
   var $69=_CalcCRC32(-1, $68, 11);
   HEAP32[((22248)>>2)]=$69;
   label = 8; break;
  case 3: 
   var $71=(($Header)|0);
   var $72=HEAP32[((4704)>>2)];
   var $73=_fread($71, 1, 32, $72);
   $Size=$73;
   var $74=(($Header)|0);
   var $75=HEAP8[($74)];
   var $76=(($75)&(255));
   var $77=(($Header+1)|0);
   var $78=HEAP8[($77)];
   var $79=(($78)&(255));
   var $80=(($79)&(65535));
   var $81=$80 << 8;
   var $82=((($76)+($81))|0);
   var $83=(($82) & 65535);
   HEAP16[((((7984)|0))>>1)]=$83;
   var $84=(($Header+2)|0);
   var $85=HEAP8[($84)];
   HEAP8[((((7986)|0))|0)]=$85;
   var $86=(($Header+3)|0);
   var $87=HEAP8[($86)];
   var $88=(($87)&(255));
   var $89=(($Header+4)|0);
   var $90=HEAP8[($89)];
   var $91=(($90)&(255));
   var $92=(($91)&(65535));
   var $93=$92 << 8;
   var $94=((($88)+($93))|0);
   var $95=(($94) & 65535);
   HEAP16[((((7988)|0))>>1)]=$95;
   var $96=(($Header+5)|0);
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=(($Header+6)|0);
   var $100=HEAP8[($99)];
   var $101=(($100)&(255));
   var $102=(($101)&(65535));
   var $103=$102 << 8;
   var $104=((($98)+($103))|0);
   var $105=(($104) & 65535);
   HEAP16[((((7990)|0))>>1)]=$105;
   var $106=(($Header+7)|0);
   var $107=HEAP8[($106)];
   var $108=(($107)&(255));
   var $109=(($Header+8)|0);
   var $110=HEAP8[($109)];
   var $111=(($110)&(255));
   var $112=(($111)&(65535));
   var $113=$112 << 8;
   var $114=((($108)+($113))|0);
   var $115=(($Header+9)|0);
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=$117 << 16;
   var $119=((($114)+($118))|0);
   var $120=(($Header+10)|0);
   var $121=HEAP8[($120)];
   var $122=(($121)&(255));
   var $123=$122 << 24;
   var $124=((($119)+($123))|0);
   HEAP32[((((7992)|0))>>2)]=$124;
   var $125=(($Header+11)|0);
   var $126=HEAP8[($125)];
   var $127=(($126)&(255));
   var $128=(($Header+12)|0);
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=(($130)&(65535));
   var $132=$131 << 8;
   var $133=((($127)+($132))|0);
   var $134=(($Header+13)|0);
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 << 16;
   var $138=((($133)+($137))|0);
   var $139=(($Header+14)|0);
   var $140=HEAP8[($139)];
   var $141=(($140)&(255));
   var $142=$141 << 24;
   var $143=((($138)+($142))|0);
   HEAP32[((((7996)|0))>>2)]=$143;
   var $144=(($Header+15)|0);
   var $145=HEAP8[($144)];
   HEAP8[((((8000)|0))|0)]=$145;
   var $146=(($Header+16)|0);
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   var $149=(($Header+17)|0);
   var $150=HEAP8[($149)];
   var $151=(($150)&(255));
   var $152=(($151)&(65535));
   var $153=$152 << 8;
   var $154=((($148)+($153))|0);
   var $155=(($Header+18)|0);
   var $156=HEAP8[($155)];
   var $157=(($156)&(255));
   var $158=$157 << 16;
   var $159=((($154)+($158))|0);
   var $160=(($Header+19)|0);
   var $161=HEAP8[($160)];
   var $162=(($161)&(255));
   var $163=$162 << 24;
   var $164=((($159)+($163))|0);
   HEAP32[((((8004)|0))>>2)]=$164;
   var $165=(($Header+20)|0);
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   var $168=(($Header+21)|0);
   var $169=HEAP8[($168)];
   var $170=(($169)&(255));
   var $171=(($170)&(65535));
   var $172=$171 << 8;
   var $173=((($167)+($172))|0);
   var $174=(($Header+22)|0);
   var $175=HEAP8[($174)];
   var $176=(($175)&(255));
   var $177=$176 << 16;
   var $178=((($173)+($177))|0);
   var $179=(($Header+23)|0);
   var $180=HEAP8[($179)];
   var $181=(($180)&(255));
   var $182=$181 << 24;
   var $183=((($178)+($182))|0);
   HEAP32[((((8008)|0))>>2)]=$183;
   var $184=(($Header+24)|0);
   var $185=HEAP8[($184)];
   HEAP8[((((8012)|0))|0)]=$185;
   var $186=(($Header+25)|0);
   var $187=HEAP8[($186)];
   HEAP8[((((8013)|0))|0)]=$187;
   var $188=(($Header+26)|0);
   var $189=HEAP8[($188)];
   var $190=(($189)&(255));
   var $191=(($Header+27)|0);
   var $192=HEAP8[($191)];
   var $193=(($192)&(255));
   var $194=(($193)&(65535));
   var $195=$194 << 8;
   var $196=((($190)+($195))|0);
   var $197=(($196) & 65535);
   HEAP16[((((8014)|0))>>1)]=$197;
   var $198=(($Header+28)|0);
   var $199=HEAP8[($198)];
   var $200=(($199)&(255));
   var $201=(($Header+29)|0);
   var $202=HEAP8[($201)];
   var $203=(($202)&(255));
   var $204=(($203)&(65535));
   var $205=$204 << 8;
   var $206=((($200)+($205))|0);
   var $207=(($Header+30)|0);
   var $208=HEAP8[($207)];
   var $209=(($208)&(255));
   var $210=$209 << 16;
   var $211=((($206)+($210))|0);
   var $212=(($Header+31)|0);
   var $213=HEAP8[($212)];
   var $214=(($213)&(255));
   var $215=$214 << 24;
   var $216=((($211)+($215))|0);
   HEAP32[((((8016)|0))>>2)]=$216;
   var $217=HEAP16[((((7988)|0))>>1)];
   var $218=(($217)&(65535));
   var $219=$218 & 256;
   var $220=(($219)|(0))!=0;
   if ($220) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $222=(($Header+2)|0);
   var $223=_CalcCRC32(-1, $222, 30);
   HEAP32[((22248)>>2)]=$223;
   HEAP32[((((8020)|0))>>2)]=0;
   HEAP32[((((8024)|0))>>2)]=0;
   label = 6; break;
  case 5: 
   var $225=(($tmpbuf1)|0);
   var $226=HEAP32[((4704)>>2)];
   var $227=_fread($225, 1, 8, $226);
   var $228=$Size;
   var $229=((($228)+($227))|0);
   $Size=$229;
   var $230=(($tmpbuf1)|0);
   var $231=HEAP8[($230)];
   var $232=(($231 << 24) >> 24);
   var $233=(($tmpbuf1+1)|0);
   var $234=HEAP8[($233)];
   var $235=(($234 << 24) >> 24);
   var $236=(($235)&(65535));
   var $237=$236 << 8;
   var $238=((($232)+($237))|0);
   var $239=(($tmpbuf1+2)|0);
   var $240=HEAP8[($239)];
   var $241=(($240 << 24) >> 24);
   var $242=$241 << 16;
   var $243=((($238)+($242))|0);
   var $244=(($tmpbuf1+3)|0);
   var $245=HEAP8[($244)];
   var $246=(($245 << 24) >> 24);
   var $247=$246 << 24;
   var $248=((($243)+($247))|0);
   HEAP32[((((8020)|0))>>2)]=$248;
   var $249=(($tmpbuf1+4)|0);
   var $250=HEAP8[($249)];
   var $251=(($250 << 24) >> 24);
   var $252=(($tmpbuf1+5)|0);
   var $253=HEAP8[($252)];
   var $254=(($253 << 24) >> 24);
   var $255=(($254)&(65535));
   var $256=$255 << 8;
   var $257=((($251)+($256))|0);
   var $258=(($tmpbuf1+6)|0);
   var $259=HEAP8[($258)];
   var $260=(($259 << 24) >> 24);
   var $261=$260 << 16;
   var $262=((($257)+($261))|0);
   var $263=(($tmpbuf1+7)|0);
   var $264=HEAP8[($263)];
   var $265=(($264 << 24) >> 24);
   var $266=$265 << 24;
   var $267=((($262)+($266))|0);
   HEAP32[((((8024)|0))>>2)]=$267;
   var $268=(($Header+2)|0);
   var $269=_CalcCRC32(-1, $268, 30);
   HEAP32[((22248)>>2)]=$269;
   label = 6; break;
  case 6: 
   label = 8; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $273=$Size;
   STACKTOP = sp;
   return $273;
  default: assert(0, "bad label: " + label);
 }
}
function _stricomp($Str1, $Str2) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $S1=sp;
   var $S2=(sp)+(512);
   var $chptr;
   $1=$Str1;
   $2=$Str2;
   var $3=(($S1)|0);
   var $4=$1;
   var $5=_strncpy($3, $4, 512);
   var $6=(($S2)|0);
   var $7=$2;
   var $8=_strncpy($6, $7, 512);
   label = 2; break;
  case 2: 
   var $10=(($S1)|0);
   var $11=_strchr($10, 92);
   $chptr=$11;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$chptr;
   HEAP8[($14)]=95;
   label = 2; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $17=(($S2)|0);
   var $18=_strchr($17, 92);
   $chptr=$18;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $21=$chptr;
   HEAP8[($21)]=95;
   label = 5; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $24=(($S1)|0);
   var $25=_strchr($24, 47);
   $chptr=$25;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $28=$chptr;
   HEAP8[($28)]=95;
   label = 8; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $31=(($S2)|0);
   var $32=_strchr($31, 47);
   $chptr=$32;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $35=$chptr;
   HEAP8[($35)]=95;
   label = 11; break;
  case 13: 
   var $37=(($S1)|0);
   var $38=(($S2)|0);
   var $39=_strcasecmp($37, $38);
   STACKTOP = sp;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _SetCryptKeys($Password) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $I;
   var $J;
   var $K;
   var $PswLength;
   var $N1;
   var $N2;
   var $Psw=sp;
   var $Ch;
   $1=$Password;
   var $2=$1;
   _SetOldKeys($2);
   HEAP32[((((14024)|0))>>2)]=-744245127;
   HEAP32[((((14028)|0))>>2)]=1064112887;
   HEAP32[((((14032)|0))>>2)]=1964352053;
   HEAP32[((((14036)|0))>>2)]=-1528303325;
   var $3=$Psw;
   _memset($3, 0, 256);
   var $4=(($Psw)|0);
   var $5=$1;
   var $6=_strcpy($4, $5);
   var $7=$1;
   var $8=_strlen($7);
   $PswLength=$8;
   assert(256 % 1 === 0);(_memcpy(((7384)|0), ((4328)|0), 256)|0);
   $J=0;
   label = 2; break;
  case 2: 
   var $10=$J;
   var $11=(($10)>>>(0)) < 256;
   if ($11) { label = 3; break; } else { label = 15; break; }
  case 3: 
   $I=0;
   label = 4; break;
  case 4: 
   var $14=$I;
   var $15=$PswLength;
   var $16=(($14)>>>(0)) < (($15)>>>(0));
   if ($16) { label = 5; break; } else { label = 13; break; }
  case 5: 
   var $18=$I;
   var $19=((($18)+(1))|0);
   var $20=(($Psw+$19)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=$J;
   var $24=((($22)+($23))|0);
   var $25=$24 & 255;
   var $26=((22680+($25<<2))|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27) & 255);
   $N2=$28;
   $K=1;
   var $29=$I;
   var $30=(($Psw+$29)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=$J;
   var $34=((($32)-($33))|0);
   var $35=$34 & 255;
   var $36=((22680+($35<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37) & 255);
   $N1=$38;
   label = 6; break;
  case 6: 
   var $40=$N1;
   var $41=(($40)&(255));
   var $42=$N2;
   var $43=(($42)&(255));
   var $44=(($41)|(0))!=(($43)|(0));
   if ($44) { label = 7; break; } else { var $50 = 0;label = 8; break; }
  case 7: 
   var $46=$N1;
   var $47=(($46)&(255));
   var $48=(($47)|(0)) < 256;
   var $50 = $48;label = 8; break;
  case 8: 
   var $50;
   if ($50) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $52=$N1;
   var $53=(($52)&(255));
   var $54=((7384+$53)|0);
   var $55=HEAP8[($54)];
   $Ch=$55;
   var $56=$N1;
   var $57=(($56)&(255));
   var $58=$I;
   var $59=((($57)+($58))|0);
   var $60=$K;
   var $61=((($59)+($60))|0);
   var $62=$61 & 255;
   var $63=((7384+$62)|0);
   var $64=HEAP8[($63)];
   var $65=$N1;
   var $66=(($65)&(255));
   var $67=((7384+$66)|0);
   HEAP8[($67)]=$64;
   var $68=$Ch;
   var $69=$N1;
   var $70=(($69)&(255));
   var $71=$I;
   var $72=((($70)+($71))|0);
   var $73=$K;
   var $74=((($72)+($73))|0);
   var $75=$74 & 255;
   var $76=((7384+$75)|0);
   HEAP8[($76)]=$68;
   label = 10; break;
  case 10: 
   var $78=$N1;
   var $79=((($78)+(1))&255);
   $N1=$79;
   var $80=$K;
   var $81=((($80)+(1))|0);
   $K=$81;
   label = 6; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $84=$I;
   var $85=((($84)+(2))|0);
   $I=$85;
   label = 4; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $88=$J;
   var $89=((($88)+(1))|0);
   $J=$89;
   label = 2; break;
  case 15: 
   $I=0;
   label = 16; break;
  case 16: 
   var $92=$I;
   var $93=$PswLength;
   var $94=(($92)>>>(0)) < (($93)>>>(0));
   if ($94) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $96=$I;
   var $97=(($Psw+$96)|0);
   _EncryptBlock($97);
   label = 18; break;
  case 18: 
   var $99=$I;
   var $100=((($99)+(16))|0);
   $I=$100;
   label = 16; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _UnstoreFile() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=HEAP32[((4648)>>2)];
   var $3=HEAP32[((((7996)|0))>>2)];
   var $4=_UnpRead($2, $3);
   var $5=HEAP32[((4640)>>2)];
   HEAP32[(($5)>>2)]=$4;
   var $6=(($4)|(0))==-1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   $1=1;
   label = 4; break;
  case 4: 
   var $10=$1;
   return $10;
  default: assert(0, "bad label: " + label);
 }
}
function _Unpack($UnpAddr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $Bits;
   $1=$UnpAddr;
   var $2=$1;
   HEAP32[((7360)>>2)]=$2;
   _UnpInitData();
   _UnpReadBuf(1);
   var $3=HEAP16[((((7988)|0))>>1)];
   var $4=(($3)&(65535));
   var $5=$4 & 16;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _ReadTables();
   label = 3; break;
  case 3: 
   var $9=HEAP32[((22280)>>2)];
   var $10=((($9)-(1))|0);
   HEAP32[((22280)>>2)]=$10;
   label = 4; break;
  case 4: 
   var $12=HEAP32[((22280)>>2)];
   var $13=(($12)|(0)) >= 0;
   if ($13) { label = 5; break; } else { label = 70; break; }
  case 5: 
   var $15=HEAP32[((6296)>>2)];
   var $16=$15 & 1048575;
   HEAP32[((6296)>>2)]=$16;
   var $17=HEAP32[((22240)>>2)];
   var $18=(($17)>>>(0)) > 8162;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _UnpReadBuf(0);
   label = 7; break;
  case 7: 
   var $21=HEAP32[((6256)>>2)];
   var $22=HEAP32[((6296)>>2)];
   var $23=((($21)-($22))|0);
   var $24=$23 & 1048575;
   var $25=(($24)>>>(0)) < 270;
   if ($25) { label = 8; break; } else { label = 21; break; }
  case 8: 
   var $27=HEAP32[((6256)>>2)];
   var $28=HEAP32[((6296)>>2)];
   var $29=(($27)|(0))!=(($28)|(0));
   if ($29) { label = 9; break; } else { label = 21; break; }
  case 9: 
   var $31=HEAP8[(22256)];
   var $32=(($31) & 1);
   if ($32) { label = 10; break; } else { label = 20; break; }
  case 10: 
   var $34=HEAP32[((6296)>>2)];
   var $35=HEAP32[((6256)>>2)];
   var $36=(($34)>>>(0)) < (($35)>>>(0));
   if ($36) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $38=HEAP32[((4640)>>2)];
   var $39=HEAP32[(($38)>>2)];
   var $40=HEAP32[((6296)>>2)];
   var $41=((($39)+($40))|0);
   var $42=HEAP32[((((7996)|0))>>2)];
   var $43=(($41)>>>(0)) > (($42)>>>(0));
   if ($43) { label = 12; break; } else { label = 13; break; }
  case 12: 
   HEAP32[((22280)>>2)]=-1;
   label = 14; break;
  case 13: 
   var $46=HEAP32[((4648)>>2)];
   var $47=HEAP32[((4640)>>2)];
   var $48=HEAP32[(($47)>>2)];
   var $49=(($46+$48)|0);
   var $50=HEAP32[((6256)>>2)];
   var $51=HEAP32[((7360)>>2)];
   var $52=(($51+$50)|0);
   var $53=HEAP32[((6256)>>2)];
   var $54=(((-$53))|0);
   var $55=$54 & 1048575;
   assert($55 % 1 === 0);(_memcpy($49, $52, $55)|0);
   var $56=HEAP32[((6256)>>2)];
   var $57=(((-$56))|0);
   var $58=$57 & 1048575;
   var $59=HEAP32[((4640)>>2)];
   var $60=HEAP32[(($59)>>2)];
   var $61=((($60)+($58))|0);
   HEAP32[(($59)>>2)]=$61;
   var $62=HEAP32[((4648)>>2)];
   var $63=HEAP32[((4640)>>2)];
   var $64=HEAP32[(($63)>>2)];
   var $65=(($62+$64)|0);
   var $66=HEAP32[((7360)>>2)];
   var $67=HEAP32[((6296)>>2)];
   assert($67 % 1 === 0);(_memcpy($65, $66, $67)|0);
   var $68=HEAP32[((6296)>>2)];
   var $69=HEAP32[((4640)>>2)];
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)+($68))|0);
   HEAP32[(($69)>>2)]=$71;
   label = 14; break;
  case 14: 
   label = 19; break;
  case 15: 
   var $74=HEAP32[((4640)>>2)];
   var $75=HEAP32[(($74)>>2)];
   var $76=HEAP32[((6296)>>2)];
   var $77=HEAP32[((6256)>>2)];
   var $78=((($76)-($77))|0);
   var $79=((($75)+($78))|0);
   var $80=HEAP32[((((7996)|0))>>2)];
   var $81=(($79)>>>(0)) > (($80)>>>(0));
   if ($81) { label = 16; break; } else { label = 17; break; }
  case 16: 
   HEAP32[((22280)>>2)]=-1;
   label = 18; break;
  case 17: 
   var $84=HEAP32[((4648)>>2)];
   var $85=HEAP32[((4640)>>2)];
   var $86=HEAP32[(($85)>>2)];
   var $87=(($84+$86)|0);
   var $88=HEAP32[((6256)>>2)];
   var $89=HEAP32[((7360)>>2)];
   var $90=(($89+$88)|0);
   var $91=HEAP32[((6296)>>2)];
   var $92=HEAP32[((6256)>>2)];
   var $93=((($91)-($92))|0);
   assert($93 % 1 === 0);(_memcpy($87, $90, $93)|0);
   var $94=HEAP32[((6296)>>2)];
   var $95=HEAP32[((6256)>>2)];
   var $96=((($94)-($95))|0);
   var $97=HEAP32[((4640)>>2)];
   var $98=HEAP32[(($97)>>2)];
   var $99=((($98)+($96))|0);
   HEAP32[(($97)>>2)]=$99;
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $103=HEAP32[((6296)>>2)];
   HEAP32[((6256)>>2)]=$103;
   label = 21; break;
  case 21: 
   var $105=HEAP32[((7368)>>2)];
   var $106=(($105)|(0))!=0;
   if ($106) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $108=HEAP32[((22648)>>2)];
   var $109=((4304+($108<<2))|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=$110;
   _DecodeNumber($111);
   var $112=HEAP32[((7968)>>2)];
   var $113=(($112)|(0))==256;
   if ($113) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _ReadTables();
   label = 4; break;
  case 24: 
   var $116=HEAP32[((7968)>>2)];
   var $117=_DecodeAudio($116);
   var $118=HEAP32[((6296)>>2)];
   var $119=((($118)+(1))|0);
   HEAP32[((6296)>>2)]=$119;
   var $120=HEAP32[((7360)>>2)];
   var $121=(($120+$118)|0);
   HEAP8[($121)]=$117;
   var $122=HEAP32[((22648)>>2)];
   var $123=((($122)+(1))|0);
   HEAP32[((22648)>>2)]=$123;
   var $124=HEAP32[((7352)>>2)];
   var $125=(($123)|(0))==(($124)|(0));
   if ($125) { label = 25; break; } else { label = 26; break; }
  case 25: 
   HEAP32[((22648)>>2)]=0;
   label = 26; break;
  case 26: 
   var $128=HEAP32[((22280)>>2)];
   var $129=((($128)-(1))|0);
   HEAP32[((22280)>>2)]=$129;
   label = 4; break;
  case 27: 
   var $131=_LitDecode2Decode(12696);
   _DecodeNumber($131);
   var $132=HEAP32[((7968)>>2)];
   var $133=(($132)>>>(0)) < 256;
   if ($133) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $135=HEAP32[((7968)>>2)];
   var $136=(($135) & 255);
   var $137=HEAP32[((6296)>>2)];
   var $138=((($137)+(1))|0);
   HEAP32[((6296)>>2)]=$138;
   var $139=HEAP32[((7360)>>2)];
   var $140=(($139+$137)|0);
   HEAP8[($140)]=$136;
   var $141=HEAP32[((22280)>>2)];
   var $142=((($141)-(1))|0);
   HEAP32[((22280)>>2)]=$142;
   label = 4; break;
  case 29: 
   var $144=HEAP32[((7968)>>2)];
   var $145=(($144)>>>(0)) > 269;
   if ($145) { label = 30; break; } else { label = 42; break; }
  case 30: 
   var $147=HEAP32[((7968)>>2)];
   var $148=((($147)-(270))|0);
   HEAP32[((7968)>>2)]=$148;
   var $149=((3968+$148)|0);
   var $150=HEAP8[($149)];
   var $151=(($150)&(255));
   var $152=((($151)+(3))|0);
   HEAP32[((12672)>>2)]=$152;
   var $153=HEAP32[((7968)>>2)];
   var $154=((4000+$153)|0);
   var $155=HEAP8[($154)];
   var $156=(($155)&(255));
   $Bits=$156;
   var $157=(($156)>>>(0)) > 0;
   if ($157) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $159=HEAP32[((22240)>>2)];
   var $160=((14040+$159)|0);
   var $161=HEAP8[($160)];
   var $162=(($161)&(255));
   var $163=$162 << 16;
   var $164=HEAP32[((22240)>>2)];
   var $165=((($164)+(1))|0);
   var $166=((14040+$165)|0);
   var $167=HEAP8[($166)];
   var $168=(($167)&(255));
   var $169=(($168)&(65535));
   var $170=$169 << 8;
   var $171=$163 | $170;
   var $172=HEAP32[((22240)>>2)];
   var $173=((($172)+(2))|0);
   var $174=((14040+$173)|0);
   var $175=HEAP8[($174)];
   var $176=(($175)&(255));
   var $177=$171 | $176;
   var $178=HEAP32[((22232)>>2)];
   var $179=(((8)-($178))|0);
   var $180=$177 >>> (($179)>>>(0));
   var $181=$180 & 65535;
   HEAP32[((23720)>>2)]=$181;
   var $182=HEAP32[((23720)>>2)];
   var $183=$Bits;
   var $184=(((16)-($183))|0);
   var $185=$182 >>> (($184)>>>(0));
   var $186=HEAP32[((12672)>>2)];
   var $187=((($186)+($185))|0);
   HEAP32[((12672)>>2)]=$187;
   var $188=HEAP32[((22232)>>2)];
   var $189=$Bits;
   var $190=((($188)+($189))|0);
   var $191=$190 >>> 3;
   var $192=HEAP32[((22240)>>2)];
   var $193=((($192)+($191))|0);
   HEAP32[((22240)>>2)]=$193;
   var $194=HEAP32[((22232)>>2)];
   var $195=$Bits;
   var $196=((($194)+($195))|0);
   var $197=$196 & 7;
   HEAP32[((22232)>>2)]=$197;
   label = 32; break;
  case 32: 
   var $199=_DistDecode2Decode(22304);
   _DecodeNumber($199);
   var $200=HEAP32[((7968)>>2)];
   var $201=((4032+($200<<2))|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=((($202)+(1))|0);
   HEAP32[((22272)>>2)]=$203;
   var $204=HEAP32[((7968)>>2)];
   var $205=((4224+$204)|0);
   var $206=HEAP8[($205)];
   var $207=(($206)&(255));
   $Bits=$207;
   var $208=(($207)>>>(0)) > 0;
   if ($208) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $210=HEAP32[((22240)>>2)];
   var $211=((14040+$210)|0);
   var $212=HEAP8[($211)];
   var $213=(($212)&(255));
   var $214=$213 << 16;
   var $215=HEAP32[((22240)>>2)];
   var $216=((($215)+(1))|0);
   var $217=((14040+$216)|0);
   var $218=HEAP8[($217)];
   var $219=(($218)&(255));
   var $220=(($219)&(65535));
   var $221=$220 << 8;
   var $222=$214 | $221;
   var $223=HEAP32[((22240)>>2)];
   var $224=((($223)+(2))|0);
   var $225=((14040+$224)|0);
   var $226=HEAP8[($225)];
   var $227=(($226)&(255));
   var $228=$222 | $227;
   var $229=HEAP32[((22232)>>2)];
   var $230=(((8)-($229))|0);
   var $231=$228 >>> (($230)>>>(0));
   var $232=$231 & 65535;
   HEAP32[((23720)>>2)]=$232;
   var $233=HEAP32[((23720)>>2)];
   var $234=$Bits;
   var $235=(((16)-($234))|0);
   var $236=$233 >>> (($235)>>>(0));
   var $237=HEAP32[((22272)>>2)];
   var $238=((($237)+($236))|0);
   HEAP32[((22272)>>2)]=$238;
   var $239=HEAP32[((22232)>>2)];
   var $240=$Bits;
   var $241=((($239)+($240))|0);
   var $242=$241 >>> 3;
   var $243=HEAP32[((22240)>>2)];
   var $244=((($243)+($242))|0);
   HEAP32[((22240)>>2)]=$244;
   var $245=HEAP32[((22232)>>2)];
   var $246=$Bits;
   var $247=((($245)+($246))|0);
   var $248=$247 & 7;
   HEAP32[((22232)>>2)]=$248;
   label = 34; break;
  case 34: 
   var $250=HEAP32[((22272)>>2)];
   var $251=(($250)>>>(0)) >= 262144;
   if ($251) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $253=HEAP32[((12672)>>2)];
   var $254=((($253)+(1))|0);
   HEAP32[((12672)>>2)]=$254;
   label = 36; break;
  case 36: 
   var $256=HEAP32[((22272)>>2)];
   var $257=(($256)>>>(0)) >= 8192;
   if ($257) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $259=HEAP32[((12672)>>2)];
   var $260=((($259)+(1))|0);
   HEAP32[((12672)>>2)]=$260;
   label = 38; break;
  case 38: 
   var $262=HEAP32[((22272)>>2)];
   var $263=HEAP32[((7944)>>2)];
   var $264=((($263)+(1))|0);
   HEAP32[((7944)>>2)]=$264;
   var $265=$263 & 3;
   var $266=((7952+($265<<2))|0);
   HEAP32[(($266)>>2)]=$262;
   HEAP32[((12688)>>2)]=$262;
   var $267=HEAP32[((12672)>>2)];
   HEAP32[((12680)>>2)]=$267;
   var $268=HEAP32[((22280)>>2)];
   var $269=((($268)-($267))|0);
   HEAP32[((22280)>>2)]=$269;
   label = 39; break;
  case 39: 
   var $271=HEAP32[((12672)>>2)];
   var $272=((($271)-(1))|0);
   HEAP32[((12672)>>2)]=$272;
   var $273=(($271)|(0))!=0;
   if ($273) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $275=HEAP32[((6296)>>2)];
   var $276=HEAP32[((22272)>>2)];
   var $277=((($275)-($276))|0);
   var $278=$277 & 1048575;
   var $279=HEAP32[((7360)>>2)];
   var $280=(($279+$278)|0);
   var $281=HEAP8[($280)];
   var $282=HEAP32[((6296)>>2)];
   var $283=HEAP32[((7360)>>2)];
   var $284=(($283+$282)|0);
   HEAP8[($284)]=$281;
   var $285=HEAP32[((6296)>>2)];
   var $286=((($285)+(1))|0);
   var $287=$286 & 1048575;
   HEAP32[((6296)>>2)]=$287;
   label = 39; break;
  case 41: 
   label = 4; break;
  case 42: 
   var $290=HEAP32[((7968)>>2)];
   var $291=(($290)|(0))==269;
   if ($291) { label = 43; break; } else { label = 44; break; }
  case 43: 
   _ReadTables();
   label = 4; break;
  case 44: 
   var $294=HEAP32[((7968)>>2)];
   var $295=(($294)|(0))==256;
   if ($295) { label = 45; break; } else { label = 49; break; }
  case 45: 
   var $297=HEAP32[((12680)>>2)];
   HEAP32[((12672)>>2)]=$297;
   var $298=HEAP32[((12688)>>2)];
   HEAP32[((22272)>>2)]=$298;
   var $299=HEAP32[((22272)>>2)];
   var $300=HEAP32[((7944)>>2)];
   var $301=((($300)+(1))|0);
   HEAP32[((7944)>>2)]=$301;
   var $302=$300 & 3;
   var $303=((7952+($302<<2))|0);
   HEAP32[(($303)>>2)]=$299;
   HEAP32[((12688)>>2)]=$299;
   var $304=HEAP32[((12672)>>2)];
   HEAP32[((12680)>>2)]=$304;
   var $305=HEAP32[((22280)>>2)];
   var $306=((($305)-($304))|0);
   HEAP32[((22280)>>2)]=$306;
   label = 46; break;
  case 46: 
   var $308=HEAP32[((12672)>>2)];
   var $309=((($308)-(1))|0);
   HEAP32[((12672)>>2)]=$309;
   var $310=(($308)|(0))!=0;
   if ($310) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $312=HEAP32[((6296)>>2)];
   var $313=HEAP32[((22272)>>2)];
   var $314=((($312)-($313))|0);
   var $315=$314 & 1048575;
   var $316=HEAP32[((7360)>>2)];
   var $317=(($316+$315)|0);
   var $318=HEAP8[($317)];
   var $319=HEAP32[((6296)>>2)];
   var $320=HEAP32[((7360)>>2)];
   var $321=(($320+$319)|0);
   HEAP8[($321)]=$318;
   var $322=HEAP32[((6296)>>2)];
   var $323=((($322)+(1))|0);
   var $324=$323 & 1048575;
   HEAP32[((6296)>>2)]=$324;
   label = 46; break;
  case 48: 
   label = 4; break;
  case 49: 
   var $327=HEAP32[((7968)>>2)];
   var $328=(($327)>>>(0)) < 261;
   if ($328) { label = 50; break; } else { label = 62; break; }
  case 50: 
   var $330=HEAP32[((7944)>>2)];
   var $331=HEAP32[((7968)>>2)];
   var $332=((($331)-(256))|0);
   var $333=((($330)-($332))|0);
   var $334=$333 & 3;
   var $335=((7952+($334<<2))|0);
   var $336=HEAP32[(($335)>>2)];
   HEAP32[((22272)>>2)]=$336;
   var $337=_RepDecode2Decode(7656);
   _DecodeNumber($337);
   var $338=HEAP32[((7968)>>2)];
   var $339=((3968+$338)|0);
   var $340=HEAP8[($339)];
   var $341=(($340)&(255));
   var $342=((($341)+(2))|0);
   HEAP32[((12672)>>2)]=$342;
   var $343=HEAP32[((7968)>>2)];
   var $344=((4000+$343)|0);
   var $345=HEAP8[($344)];
   var $346=(($345)&(255));
   $Bits=$346;
   var $347=(($346)>>>(0)) > 0;
   if ($347) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $349=HEAP32[((22240)>>2)];
   var $350=((14040+$349)|0);
   var $351=HEAP8[($350)];
   var $352=(($351)&(255));
   var $353=$352 << 16;
   var $354=HEAP32[((22240)>>2)];
   var $355=((($354)+(1))|0);
   var $356=((14040+$355)|0);
   var $357=HEAP8[($356)];
   var $358=(($357)&(255));
   var $359=(($358)&(65535));
   var $360=$359 << 8;
   var $361=$353 | $360;
   var $362=HEAP32[((22240)>>2)];
   var $363=((($362)+(2))|0);
   var $364=((14040+$363)|0);
   var $365=HEAP8[($364)];
   var $366=(($365)&(255));
   var $367=$361 | $366;
   var $368=HEAP32[((22232)>>2)];
   var $369=(((8)-($368))|0);
   var $370=$367 >>> (($369)>>>(0));
   var $371=$370 & 65535;
   HEAP32[((23720)>>2)]=$371;
   var $372=HEAP32[((23720)>>2)];
   var $373=$Bits;
   var $374=(((16)-($373))|0);
   var $375=$372 >>> (($374)>>>(0));
   var $376=HEAP32[((12672)>>2)];
   var $377=((($376)+($375))|0);
   HEAP32[((12672)>>2)]=$377;
   var $378=HEAP32[((22232)>>2)];
   var $379=$Bits;
   var $380=((($378)+($379))|0);
   var $381=$380 >>> 3;
   var $382=HEAP32[((22240)>>2)];
   var $383=((($382)+($381))|0);
   HEAP32[((22240)>>2)]=$383;
   var $384=HEAP32[((22232)>>2)];
   var $385=$Bits;
   var $386=((($384)+($385))|0);
   var $387=$386 & 7;
   HEAP32[((22232)>>2)]=$387;
   label = 52; break;
  case 52: 
   var $389=HEAP32[((22272)>>2)];
   var $390=(($389)>>>(0)) >= 262144;
   if ($390) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $392=HEAP32[((12672)>>2)];
   var $393=((($392)+(1))|0);
   HEAP32[((12672)>>2)]=$393;
   label = 54; break;
  case 54: 
   var $395=HEAP32[((22272)>>2)];
   var $396=(($395)>>>(0)) >= 8192;
   if ($396) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $398=HEAP32[((12672)>>2)];
   var $399=((($398)+(1))|0);
   HEAP32[((12672)>>2)]=$399;
   label = 56; break;
  case 56: 
   var $401=HEAP32[((22272)>>2)];
   var $402=(($401)>>>(0)) >= 257;
   if ($402) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $404=HEAP32[((12672)>>2)];
   var $405=((($404)+(1))|0);
   HEAP32[((12672)>>2)]=$405;
   label = 58; break;
  case 58: 
   var $407=HEAP32[((22272)>>2)];
   var $408=HEAP32[((7944)>>2)];
   var $409=((($408)+(1))|0);
   HEAP32[((7944)>>2)]=$409;
   var $410=$408 & 3;
   var $411=((7952+($410<<2))|0);
   HEAP32[(($411)>>2)]=$407;
   HEAP32[((12688)>>2)]=$407;
   var $412=HEAP32[((12672)>>2)];
   HEAP32[((12680)>>2)]=$412;
   var $413=HEAP32[((22280)>>2)];
   var $414=((($413)-($412))|0);
   HEAP32[((22280)>>2)]=$414;
   label = 59; break;
  case 59: 
   var $416=HEAP32[((12672)>>2)];
   var $417=((($416)-(1))|0);
   HEAP32[((12672)>>2)]=$417;
   var $418=(($416)|(0))!=0;
   if ($418) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $420=HEAP32[((6296)>>2)];
   var $421=HEAP32[((22272)>>2)];
   var $422=((($420)-($421))|0);
   var $423=$422 & 1048575;
   var $424=HEAP32[((7360)>>2)];
   var $425=(($424+$423)|0);
   var $426=HEAP8[($425)];
   var $427=HEAP32[((6296)>>2)];
   var $428=HEAP32[((7360)>>2)];
   var $429=(($428+$427)|0);
   HEAP8[($429)]=$426;
   var $430=HEAP32[((6296)>>2)];
   var $431=((($430)+(1))|0);
   var $432=$431 & 1048575;
   HEAP32[((6296)>>2)]=$432;
   label = 59; break;
  case 61: 
   label = 4; break;
  case 62: 
   var $435=HEAP32[((7968)>>2)];
   var $436=(($435)>>>(0)) < 270;
   if ($436) { label = 63; break; } else { label = 69; break; }
  case 63: 
   var $438=HEAP32[((7968)>>2)];
   var $439=((($438)-(261))|0);
   HEAP32[((7968)>>2)]=$439;
   var $440=((3952+$439)|0);
   var $441=HEAP8[($440)];
   var $442=(($441)&(255));
   var $443=((($442)+(1))|0);
   HEAP32[((22272)>>2)]=$443;
   var $444=HEAP32[((7968)>>2)];
   var $445=((3960+$444)|0);
   var $446=HEAP8[($445)];
   var $447=(($446)&(255));
   $Bits=$447;
   var $448=(($447)>>>(0)) > 0;
   if ($448) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $450=HEAP32[((22240)>>2)];
   var $451=((14040+$450)|0);
   var $452=HEAP8[($451)];
   var $453=(($452)&(255));
   var $454=$453 << 16;
   var $455=HEAP32[((22240)>>2)];
   var $456=((($455)+(1))|0);
   var $457=((14040+$456)|0);
   var $458=HEAP8[($457)];
   var $459=(($458)&(255));
   var $460=(($459)&(65535));
   var $461=$460 << 8;
   var $462=$454 | $461;
   var $463=HEAP32[((22240)>>2)];
   var $464=((($463)+(2))|0);
   var $465=((14040+$464)|0);
   var $466=HEAP8[($465)];
   var $467=(($466)&(255));
   var $468=$462 | $467;
   var $469=HEAP32[((22232)>>2)];
   var $470=(((8)-($469))|0);
   var $471=$468 >>> (($470)>>>(0));
   var $472=$471 & 65535;
   HEAP32[((23720)>>2)]=$472;
   var $473=HEAP32[((23720)>>2)];
   var $474=$Bits;
   var $475=(((16)-($474))|0);
   var $476=$473 >>> (($475)>>>(0));
   var $477=HEAP32[((22272)>>2)];
   var $478=((($477)+($476))|0);
   HEAP32[((22272)>>2)]=$478;
   var $479=HEAP32[((22232)>>2)];
   var $480=$Bits;
   var $481=((($479)+($480))|0);
   var $482=$481 >>> 3;
   var $483=HEAP32[((22240)>>2)];
   var $484=((($483)+($482))|0);
   HEAP32[((22240)>>2)]=$484;
   var $485=HEAP32[((22232)>>2)];
   var $486=$Bits;
   var $487=((($485)+($486))|0);
   var $488=$487 & 7;
   HEAP32[((22232)>>2)]=$488;
   label = 65; break;
  case 65: 
   HEAP32[((12672)>>2)]=2;
   var $490=HEAP32[((22272)>>2)];
   var $491=HEAP32[((7944)>>2)];
   var $492=((($491)+(1))|0);
   HEAP32[((7944)>>2)]=$492;
   var $493=$491 & 3;
   var $494=((7952+($493<<2))|0);
   HEAP32[(($494)>>2)]=$490;
   HEAP32[((12688)>>2)]=$490;
   var $495=HEAP32[((12672)>>2)];
   HEAP32[((12680)>>2)]=$495;
   var $496=HEAP32[((22280)>>2)];
   var $497=((($496)-($495))|0);
   HEAP32[((22280)>>2)]=$497;
   label = 66; break;
  case 66: 
   var $499=HEAP32[((12672)>>2)];
   var $500=((($499)-(1))|0);
   HEAP32[((12672)>>2)]=$500;
   var $501=(($499)|(0))!=0;
   if ($501) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $503=HEAP32[((6296)>>2)];
   var $504=HEAP32[((22272)>>2)];
   var $505=((($503)-($504))|0);
   var $506=$505 & 1048575;
   var $507=HEAP32[((7360)>>2)];
   var $508=(($507+$506)|0);
   var $509=HEAP8[($508)];
   var $510=HEAP32[((6296)>>2)];
   var $511=HEAP32[((7360)>>2)];
   var $512=(($511+$510)|0);
   HEAP8[($512)]=$509;
   var $513=HEAP32[((6296)>>2)];
   var $514=((($513)+(1))|0);
   var $515=$514 & 1048575;
   HEAP32[((6296)>>2)]=$515;
   label = 66; break;
  case 68: 
   label = 4; break;
  case 69: 
   label = 4; break;
  case 70: 
   _ReadLastTables();
   var $519=HEAP8[(22256)];
   var $520=(($519) & 1);
   if ($520) { label = 71; break; } else { label = 81; break; }
  case 71: 
   var $522=HEAP32[((6296)>>2)];
   var $523=HEAP32[((6256)>>2)];
   var $524=(($522)>>>(0)) < (($523)>>>(0));
   if ($524) { label = 72; break; } else { label = 76; break; }
  case 72: 
   var $526=HEAP32[((4640)>>2)];
   var $527=HEAP32[(($526)>>2)];
   var $528=HEAP32[((6296)>>2)];
   var $529=((($527)+($528))|0);
   var $530=HEAP32[((((7996)|0))>>2)];
   var $531=(($529)>>>(0)) > (($530)>>>(0));
   if ($531) { label = 73; break; } else { label = 74; break; }
  case 73: 
   HEAP32[((22280)>>2)]=-1;
   label = 75; break;
  case 74: 
   var $534=HEAP32[((4648)>>2)];
   var $535=HEAP32[((4640)>>2)];
   var $536=HEAP32[(($535)>>2)];
   var $537=(($534+$536)|0);
   var $538=HEAP32[((6256)>>2)];
   var $539=HEAP32[((7360)>>2)];
   var $540=(($539+$538)|0);
   var $541=HEAP32[((6256)>>2)];
   var $542=(((-$541))|0);
   var $543=$542 & 1048575;
   assert($543 % 1 === 0);(_memcpy($537, $540, $543)|0);
   var $544=HEAP32[((6256)>>2)];
   var $545=(((-$544))|0);
   var $546=$545 & 1048575;
   var $547=HEAP32[((4640)>>2)];
   var $548=HEAP32[(($547)>>2)];
   var $549=((($548)+($546))|0);
   HEAP32[(($547)>>2)]=$549;
   var $550=HEAP32[((4648)>>2)];
   var $551=HEAP32[((4640)>>2)];
   var $552=HEAP32[(($551)>>2)];
   var $553=(($550+$552)|0);
   var $554=HEAP32[((7360)>>2)];
   var $555=HEAP32[((6296)>>2)];
   assert($555 % 1 === 0);(_memcpy($553, $554, $555)|0);
   var $556=HEAP32[((6296)>>2)];
   var $557=HEAP32[((4640)>>2)];
   var $558=HEAP32[(($557)>>2)];
   var $559=((($558)+($556))|0);
   HEAP32[(($557)>>2)]=$559;
   label = 75; break;
  case 75: 
   label = 80; break;
  case 76: 
   var $562=HEAP32[((4640)>>2)];
   var $563=HEAP32[(($562)>>2)];
   var $564=HEAP32[((6296)>>2)];
   var $565=HEAP32[((6256)>>2)];
   var $566=((($564)-($565))|0);
   var $567=((($563)+($566))|0);
   var $568=HEAP32[((((7996)|0))>>2)];
   var $569=(($567)>>>(0)) > (($568)>>>(0));
   if ($569) { label = 77; break; } else { label = 78; break; }
  case 77: 
   HEAP32[((22280)>>2)]=-1;
   label = 79; break;
  case 78: 
   var $572=HEAP32[((4648)>>2)];
   var $573=HEAP32[((4640)>>2)];
   var $574=HEAP32[(($573)>>2)];
   var $575=(($572+$574)|0);
   var $576=HEAP32[((6256)>>2)];
   var $577=HEAP32[((7360)>>2)];
   var $578=(($577+$576)|0);
   var $579=HEAP32[((6296)>>2)];
   var $580=HEAP32[((6256)>>2)];
   var $581=((($579)-($580))|0);
   assert($581 % 1 === 0);(_memcpy($575, $578, $581)|0);
   var $582=HEAP32[((6296)>>2)];
   var $583=HEAP32[((6256)>>2)];
   var $584=((($582)-($583))|0);
   var $585=HEAP32[((4640)>>2)];
   var $586=HEAP32[(($585)>>2)];
   var $587=((($586)+($584))|0);
   HEAP32[(($585)>>2)]=$587;
   label = 79; break;
  case 79: 
   label = 80; break;
  case 80: 
   label = 81; break;
  case 81: 
   var $591=HEAP32[((6296)>>2)];
   HEAP32[((6256)>>2)]=$591;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _UnpRead($Addr, $Count) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $RetCode;
   var $I;
   var $ReadSize;
   var $TotalRead;
   var $ReadAddr;
   $2=$Addr;
   $3=$Count;
   $RetCode=0;
   $TotalRead=0;
   var $4=$2;
   $ReadAddr=$4;
   var $5=$3;
   var $6=(($5)>>>(0)) > 0;
   if ($6) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $8=$3;
   var $9=HEAP32[((6304)>>2)];
   var $10=(($8)>>>(0)) > (($9)>>>(0));
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=HEAP32[((6304)>>2)];
   var $16 = $12;label = 5; break;
  case 4: 
   var $14=$3;
   var $16 = $14;label = 5; break;
  case 5: 
   var $16;
   $ReadSize=$16;
   var $17=HEAP32[((4704)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 20; break;
  case 7: 
   var $21=$ReadAddr;
   var $22=$ReadSize;
   var $23=HEAP32[((4704)>>2)];
   var $24=_fread($21, 1, $22, $23);
   $RetCode=$24;
   var $25=$RetCode;
   var $26=HEAP32[((22640)>>2)];
   var $27=((($26)+($25))|0);
   HEAP32[((22640)>>2)]=$27;
   var $28=$RetCode;
   var $29=$ReadAddr;
   var $30=(($29+$28)|0);
   $ReadAddr=$30;
   var $31=$RetCode;
   var $32=$TotalRead;
   var $33=((($32)+($31))|0);
   $TotalRead=$33;
   var $34=$RetCode;
   var $35=$3;
   var $36=((($35)-($34))|0);
   $3=$36;
   var $37=$RetCode;
   var $38=HEAP32[((6304)>>2)];
   var $39=((($38)-($37))|0);
   HEAP32[((6304)>>2)]=$39;
   label = 8; break;
  case 8: 
   var $41=$RetCode;
   var $42=(($41)|(0))!=-1;
   if ($42) { label = 9; break; } else { label = 19; break; }
  case 9: 
   var $44=$TotalRead;
   $RetCode=$44;
   var $45=HEAP32[((22264)>>2)];
   var $46=(($45)|(0))!=0;
   if ($46) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $48=HEAP32[((22264)>>2)];
   var $49=(($48)|(0)) < 20;
   if ($49) { label = 11; break; } else { label = 12; break; }
  case 11: 
   label = 17; break;
  case 12: 
   $I=0;
   label = 13; break;
  case 13: 
   var $53=$I;
   var $54=$RetCode;
   var $55=(($53)>>>(0)) < (($54)>>>(0));
   if ($55) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $57=$I;
   var $58=$2;
   var $59=(($58+$57)|0);
   _DecryptBlock($59);
   label = 15; break;
  case 15: 
   var $61=$I;
   var $62=((($61)+(16))|0);
   $I=$62;
   label = 13; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $67=$RetCode;
   $1=$67;
   label = 20; break;
  case 20: 
   var $69=$1;
   return $69;
  default: assert(0, "bad label: " + label);
 }
}
function _LitDecode2Decode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[((((22288)|0))>>2)]=$4;
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=(($6)|0);
 HEAP32[((((22292)|0))>>2)]=$7;
 var $8=$1;
 var $9=(($8+68)|0);
 var $10=(($9)|0);
 HEAP32[((((22296)|0))>>2)]=$10;
 var $11=$1;
 var $12=(($11+132)|0);
 var $13=(($12)|0);
 HEAP32[((((22300)|0))>>2)]=$13;
 return 22288;
}
function _DistDecode2Decode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[((((22288)|0))>>2)]=$4;
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=(($6)|0);
 HEAP32[((((22292)|0))>>2)]=$7;
 var $8=$1;
 var $9=(($8+68)|0);
 var $10=(($9)|0);
 HEAP32[((((22296)|0))>>2)]=$10;
 var $11=$1;
 var $12=(($11+132)|0);
 var $13=(($12)|0);
 HEAP32[((((22300)|0))>>2)]=$13;
 return 22288;
}
function _RepDecode2Decode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[((((22288)|0))>>2)]=$4;
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=(($6)|0);
 HEAP32[((((22292)|0))>>2)]=$7;
 var $8=$1;
 var $9=(($8+68)|0);
 var $10=(($9)|0);
 HEAP32[((((22296)|0))>>2)]=$10;
 var $11=$1;
 var $12=(($11+132)|0);
 var $13=(($12)|0);
 HEAP32[((((22300)|0))>>2)]=$13;
 return 22288;
}
function _MultDecode2Decode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[((((22288)|0))>>2)]=$4;
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=(($6)|0);
 HEAP32[((((22292)|0))>>2)]=$7;
 var $8=$1;
 var $9=(($8+68)|0);
 var $10=(($9)|0);
 HEAP32[((((22296)|0))>>2)]=$10;
 var $11=$1;
 var $12=(($11+132)|0);
 var $13=(($12)|0);
 HEAP32[((((22300)|0))>>2)]=$13;
 return 22288;
}
function _BitDecode2Decode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[((((22288)|0))>>2)]=$4;
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=(($6)|0);
 HEAP32[((((22292)|0))>>2)]=$7;
 var $8=$1;
 var $9=(($8+68)|0);
 var $10=(($9)|0);
 HEAP32[((((22296)|0))>>2)]=$10;
 var $11=$1;
 var $12=(($11+132)|0);
 var $13=(($12)|0);
 HEAP32[((((22300)|0))>>2)]=$13;
 return 22288;
}
function _Decode2LitDecode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=HEAP32[((((22288)|0))>>2)];
 var $3=$1;
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=$2;
 return;
}
function _Decode2DistDecode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=HEAP32[((((22288)|0))>>2)];
 var $3=$1;
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=$2;
 return;
}
function _Decode2RepDecode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=HEAP32[((((22288)|0))>>2)];
 var $3=$1;
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=$2;
 return;
}
function _Decode2MultDecode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=HEAP32[((((22288)|0))>>2)];
 var $3=$1;
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=$2;
 return;
}
function _Decode2BitDecode($ld) {
 var label = 0;
 var $1;
 $1=$ld;
 var $2=HEAP32[((((22288)|0))>>2)];
 var $3=$1;
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=$2;
 return;
}
function _UnpInitData() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   HEAP32[((22232)>>2)]=0;
   HEAP32[((22240)>>2)]=0;
   var $1=HEAP16[((((7988)|0))>>1)];
   var $2=(($1)&(65535));
   var $3=$2 & 16;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   HEAP32[((22648)>>2)]=0;
   HEAP32[((22672)>>2)]=0;
   _memset(23936, 0, 368);
   HEAP32[((7952)>>2)]=0; HEAP32[((7956)>>2)]=0; HEAP32[((7960)>>2)]=0; HEAP32[((7964)>>2)]=0;
   HEAP32[((7944)>>2)]=0;
   HEAP32[((12680)>>2)]=0;
   HEAP32[((12688)>>2)]=0;
   var $6=HEAP32[((7360)>>2)];
   _memset($6, 0, 1048576);
   _memset(((6312)|0), 0, 1028);
   HEAP32[((6256)>>2)]=0;
   HEAP32[((6296)>>2)]=0;
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _UnpReadBuf($FirstBuf) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $RetCode;
   $1=$FirstBuf;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=_UnpRead(((14040)|0), 8192);
   HEAP32[((7640)>>2)]=$5;
   HEAP32[((22240)>>2)]=0;
   label = 7; break;
  case 3: 
   assert(32 % 1 === 0);(_memcpy(((14040)|0), ((22200)|0), 32)|0);
   var $7=HEAP32[((22240)>>2)];
   var $8=$7 & 31;
   HEAP32[((22240)>>2)]=$8;
   var $9=_UnpRead(((14072)|0), 8160);
   $RetCode=$9;
   var $10=$RetCode;
   var $11=(($10)|(0)) > 0;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $13=$RetCode;
   var $14=((($13)+(32))|0);
   HEAP32[((7640)>>2)]=$14;
   label = 6; break;
  case 5: 
   var $16=HEAP32[((22240)>>2)];
   HEAP32[((7640)>>2)]=$16;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ReadTables() {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $BitLength=sp;
   var $Table=(sp)+(24);
   var $TableSize;
   var $N;
   var $I;
   var $1=HEAP32[((22240)>>2)];
   var $2=(($1)>>>(0)) > 8167;
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _UnpReadBuf(0);
   label = 3; break;
  case 3: 
   var $5=HEAP32[((22240)>>2)];
   var $6=((14040+$5)|0);
   var $7=HEAP8[($6)];
   var $8=(($7)&(255));
   var $9=$8 << 16;
   var $10=HEAP32[((22240)>>2)];
   var $11=((($10)+(1))|0);
   var $12=((14040+$11)|0);
   var $13=HEAP8[($12)];
   var $14=(($13)&(255));
   var $15=(($14)&(65535));
   var $16=$15 << 8;
   var $17=$9 | $16;
   var $18=HEAP32[((22240)>>2)];
   var $19=((($18)+(2))|0);
   var $20=((14040+$19)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=$17 | $22;
   var $24=HEAP32[((22232)>>2)];
   var $25=(((8)-($24))|0);
   var $26=$23 >>> (($25)>>>(0));
   var $27=$26 & 65535;
   HEAP32[((23720)>>2)]=$27;
   var $28=HEAP32[((23720)>>2)];
   var $29=$28 & 32768;
   HEAP32[((7368)>>2)]=$29;
   var $30=HEAP32[((23720)>>2)];
   var $31=$30 & 16384;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _memset(((6312)|0), 0, 1028);
   label = 5; break;
  case 5: 
   var $35=HEAP32[((22232)>>2)];
   var $36=((($35)+(2))|0);
   var $37=$36 >>> 3;
   var $38=HEAP32[((22240)>>2)];
   var $39=((($38)+($37))|0);
   HEAP32[((22240)>>2)]=$39;
   var $40=HEAP32[((22232)>>2)];
   var $41=((($40)+(2))|0);
   var $42=$41 & 7;
   HEAP32[((22232)>>2)]=$42;
   var $43=HEAP32[((7368)>>2)];
   var $44=(($43)|(0))!=0;
   if ($44) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $46=HEAP32[((23720)>>2)];
   var $47=$46 >>> 12;
   var $48=$47 & 3;
   var $49=((($48)+(1))|0);
   HEAP32[((7352)>>2)]=$49;
   var $50=HEAP32[((22648)>>2)];
   var $51=HEAP32[((7352)>>2)];
   var $52=(($50)|(0)) >= (($51)|(0));
   if ($52) { label = 7; break; } else { label = 8; break; }
  case 7: 
   HEAP32[((22648)>>2)]=0;
   label = 8; break;
  case 8: 
   var $55=HEAP32[((22232)>>2)];
   var $56=((($55)+(2))|0);
   var $57=$56 >>> 3;
   var $58=HEAP32[((22240)>>2)];
   var $59=((($58)+($57))|0);
   HEAP32[((22240)>>2)]=$59;
   var $60=HEAP32[((22232)>>2)];
   var $61=((($60)+(2))|0);
   var $62=$61 & 7;
   HEAP32[((22232)>>2)]=$62;
   var $63=HEAP32[((7352)>>2)];
   var $64=((($63)*(257))&-1);
   $TableSize=$64;
   label = 10; break;
  case 9: 
   $TableSize=374;
   label = 10; break;
  case 10: 
   $I=0;
   label = 11; break;
  case 11: 
   var $68=$I;
   var $69=(($68)|(0)) < 19;
   if ($69) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $71=HEAP32[((22240)>>2)];
   var $72=((14040+$71)|0);
   var $73=HEAP8[($72)];
   var $74=(($73)&(255));
   var $75=$74 << 16;
   var $76=HEAP32[((22240)>>2)];
   var $77=((($76)+(1))|0);
   var $78=((14040+$77)|0);
   var $79=HEAP8[($78)];
   var $80=(($79)&(255));
   var $81=(($80)&(65535));
   var $82=$81 << 8;
   var $83=$75 | $82;
   var $84=HEAP32[((22240)>>2)];
   var $85=((($84)+(2))|0);
   var $86=((14040+$85)|0);
   var $87=HEAP8[($86)];
   var $88=(($87)&(255));
   var $89=$83 | $88;
   var $90=HEAP32[((22232)>>2)];
   var $91=(((8)-($90))|0);
   var $92=$89 >>> (($91)>>>(0));
   var $93=$92 & 65535;
   HEAP32[((23720)>>2)]=$93;
   var $94=HEAP32[((23720)>>2)];
   var $95=$94 >>> 12;
   var $96=(($95) & 255);
   var $97=$I;
   var $98=(($BitLength+$97)|0);
   HEAP8[($98)]=$96;
   var $99=HEAP32[((22232)>>2)];
   var $100=((($99)+(4))|0);
   var $101=$100 >>> 3;
   var $102=HEAP32[((22240)>>2)];
   var $103=((($102)+($101))|0);
   HEAP32[((22240)>>2)]=$103;
   var $104=HEAP32[((22232)>>2)];
   var $105=((($104)+(4))|0);
   var $106=$105 & 7;
   HEAP32[((22232)>>2)]=$106;
   label = 13; break;
  case 13: 
   var $108=$I;
   var $109=((($108)+(1))|0);
   $I=$109;
   label = 11; break;
  case 14: 
   var $111=(($BitLength)|0);
   var $112=_BitDecode2Decode(23728);
   _MakeDecodeTables($111, $112, 19);
   _Decode2BitDecode(23728);
   $I=0;
   label = 15; break;
  case 15: 
   var $114=$I;
   var $115=$TableSize;
   var $116=(($114)|(0)) < (($115)|(0));
   if ($116) { label = 16; break; } else { label = 38; break; }
  case 16: 
   var $118=HEAP32[((22240)>>2)];
   var $119=(($118)>>>(0)) > 8187;
   if ($119) { label = 17; break; } else { label = 18; break; }
  case 17: 
   _UnpReadBuf(0);
   label = 18; break;
  case 18: 
   var $122=_BitDecode2Decode(23728);
   _DecodeNumber($122);
   var $123=HEAP32[((7968)>>2)];
   var $124=(($123)>>>(0)) < 16;
   if ($124) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $126=HEAP32[((7968)>>2)];
   var $127=$I;
   var $128=((6312+$127)|0);
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=((($126)+($130))|0);
   var $132=$131 & 15;
   var $133=(($132) & 255);
   var $134=$I;
   var $135=(($Table+$134)|0);
   HEAP8[($135)]=$133;
   var $136=$I;
   var $137=((($136)+(1))|0);
   $I=$137;
   label = 37; break;
  case 20: 
   var $139=HEAP32[((7968)>>2)];
   var $140=(($139)|(0))==16;
   if ($140) { label = 21; break; } else { label = 27; break; }
  case 21: 
   var $142=HEAP32[((22240)>>2)];
   var $143=((14040+$142)|0);
   var $144=HEAP8[($143)];
   var $145=(($144)&(255));
   var $146=$145 << 16;
   var $147=HEAP32[((22240)>>2)];
   var $148=((($147)+(1))|0);
   var $149=((14040+$148)|0);
   var $150=HEAP8[($149)];
   var $151=(($150)&(255));
   var $152=(($151)&(65535));
   var $153=$152 << 8;
   var $154=$146 | $153;
   var $155=HEAP32[((22240)>>2)];
   var $156=((($155)+(2))|0);
   var $157=((14040+$156)|0);
   var $158=HEAP8[($157)];
   var $159=(($158)&(255));
   var $160=$154 | $159;
   var $161=HEAP32[((22232)>>2)];
   var $162=(((8)-($161))|0);
   var $163=$160 >>> (($162)>>>(0));
   var $164=$163 & 65535;
   HEAP32[((23720)>>2)]=$164;
   var $165=HEAP32[((23720)>>2)];
   var $166=$165 >>> 14;
   var $167=((($166)+(3))|0);
   $N=$167;
   var $168=HEAP32[((22232)>>2)];
   var $169=((($168)+(2))|0);
   var $170=$169 >>> 3;
   var $171=HEAP32[((22240)>>2)];
   var $172=((($171)+($170))|0);
   HEAP32[((22240)>>2)]=$172;
   var $173=HEAP32[((22232)>>2)];
   var $174=((($173)+(2))|0);
   var $175=$174 & 7;
   HEAP32[((22232)>>2)]=$175;
   label = 22; break;
  case 22: 
   var $177=$N;
   var $178=((($177)-(1))|0);
   $N=$178;
   var $179=(($177)|(0)) > 0;
   if ($179) { label = 23; break; } else { var $185 = 0;label = 24; break; }
  case 23: 
   var $181=$I;
   var $182=$TableSize;
   var $183=(($181)|(0)) < (($182)|(0));
   var $185 = $183;label = 24; break;
  case 24: 
   var $185;
   if ($185) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $187=$I;
   var $188=((($187)-(1))|0);
   var $189=(($Table+$188)|0);
   var $190=HEAP8[($189)];
   var $191=$I;
   var $192=(($Table+$191)|0);
   HEAP8[($192)]=$190;
   var $193=$I;
   var $194=((($193)+(1))|0);
   $I=$194;
   label = 22; break;
  case 26: 
   label = 36; break;
  case 27: 
   var $197=HEAP32[((7968)>>2)];
   var $198=(($197)|(0))==17;
   if ($198) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $200=HEAP32[((22240)>>2)];
   var $201=((14040+$200)|0);
   var $202=HEAP8[($201)];
   var $203=(($202)&(255));
   var $204=$203 << 16;
   var $205=HEAP32[((22240)>>2)];
   var $206=((($205)+(1))|0);
   var $207=((14040+$206)|0);
   var $208=HEAP8[($207)];
   var $209=(($208)&(255));
   var $210=(($209)&(65535));
   var $211=$210 << 8;
   var $212=$204 | $211;
   var $213=HEAP32[((22240)>>2)];
   var $214=((($213)+(2))|0);
   var $215=((14040+$214)|0);
   var $216=HEAP8[($215)];
   var $217=(($216)&(255));
   var $218=$212 | $217;
   var $219=HEAP32[((22232)>>2)];
   var $220=(((8)-($219))|0);
   var $221=$218 >>> (($220)>>>(0));
   var $222=$221 & 65535;
   HEAP32[((23720)>>2)]=$222;
   var $223=HEAP32[((23720)>>2)];
   var $224=$223 >>> 13;
   var $225=((($224)+(3))|0);
   $N=$225;
   var $226=HEAP32[((22232)>>2)];
   var $227=((($226)+(3))|0);
   var $228=$227 >>> 3;
   var $229=HEAP32[((22240)>>2)];
   var $230=((($229)+($228))|0);
   HEAP32[((22240)>>2)]=$230;
   var $231=HEAP32[((22232)>>2)];
   var $232=((($231)+(3))|0);
   var $233=$232 & 7;
   HEAP32[((22232)>>2)]=$233;
   label = 30; break;
  case 29: 
   var $235=HEAP32[((22240)>>2)];
   var $236=((14040+$235)|0);
   var $237=HEAP8[($236)];
   var $238=(($237)&(255));
   var $239=$238 << 16;
   var $240=HEAP32[((22240)>>2)];
   var $241=((($240)+(1))|0);
   var $242=((14040+$241)|0);
   var $243=HEAP8[($242)];
   var $244=(($243)&(255));
   var $245=(($244)&(65535));
   var $246=$245 << 8;
   var $247=$239 | $246;
   var $248=HEAP32[((22240)>>2)];
   var $249=((($248)+(2))|0);
   var $250=((14040+$249)|0);
   var $251=HEAP8[($250)];
   var $252=(($251)&(255));
   var $253=$247 | $252;
   var $254=HEAP32[((22232)>>2)];
   var $255=(((8)-($254))|0);
   var $256=$253 >>> (($255)>>>(0));
   var $257=$256 & 65535;
   HEAP32[((23720)>>2)]=$257;
   var $258=HEAP32[((23720)>>2)];
   var $259=$258 >>> 9;
   var $260=((($259)+(11))|0);
   $N=$260;
   var $261=HEAP32[((22232)>>2)];
   var $262=((($261)+(7))|0);
   var $263=$262 >>> 3;
   var $264=HEAP32[((22240)>>2)];
   var $265=((($264)+($263))|0);
   HEAP32[((22240)>>2)]=$265;
   var $266=HEAP32[((22232)>>2)];
   var $267=((($266)+(7))|0);
   var $268=$267 & 7;
   HEAP32[((22232)>>2)]=$268;
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $271=$N;
   var $272=((($271)-(1))|0);
   $N=$272;
   var $273=(($271)|(0)) > 0;
   if ($273) { label = 32; break; } else { var $279 = 0;label = 33; break; }
  case 32: 
   var $275=$I;
   var $276=$TableSize;
   var $277=(($275)|(0)) < (($276)|(0));
   var $279 = $277;label = 33; break;
  case 33: 
   var $279;
   if ($279) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $281=$I;
   var $282=((($281)+(1))|0);
   $I=$282;
   var $283=(($Table+$281)|0);
   HEAP8[($283)]=0;
   label = 31; break;
  case 35: 
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 15; break;
  case 38: 
   var $288=HEAP32[((7368)>>2)];
   var $289=(($288)|(0))!=0;
   if ($289) { label = 39; break; } else { label = 44; break; }
  case 39: 
   $I=0;
   label = 40; break;
  case 40: 
   var $292=$I;
   var $293=HEAP32[((7352)>>2)];
   var $294=(($292)|(0)) < (($293)|(0));
   if ($294) { label = 41; break; } else { label = 43; break; }
  case 41: 
   var $296=$I;
   var $297=((($296)*(257))&-1);
   var $298=(($Table+$297)|0);
   var $299=$I;
   var $300=((4304+($299<<2))|0);
   var $301=HEAP32[(($300)>>2)];
   var $302=_MultDecode2Decode($301);
   _MakeDecodeTables($298, $302, 257);
   var $303=$I;
   var $304=((4304+($303<<2))|0);
   var $305=HEAP32[(($304)>>2)];
   _Decode2MultDecode($305);
   label = 42; break;
  case 42: 
   var $307=$I;
   var $308=((($307)+(1))|0);
   $I=$308;
   label = 40; break;
  case 43: 
   label = 45; break;
  case 44: 
   var $311=(($Table)|0);
   var $312=_LitDecode2Decode(12696);
   _MakeDecodeTables($311, $312, 298);
   _Decode2LitDecode(12696);
   var $313=(($Table+298)|0);
   var $314=_DistDecode2Decode(22304);
   _MakeDecodeTables($313, $314, 48);
   _Decode2DistDecode(22304);
   var $315=(($Table+346)|0);
   var $316=_RepDecode2Decode(7656);
   _MakeDecodeTables($315, $316, 28);
   _Decode2RepDecode(7656);
   label = 45; break;
  case 45: 
   var $318=$Table;
   assert(1028 % 1 === 0);(_memcpy(((6312)|0), $318, 1028)|0);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _DecodeNumber($Deco) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $I;
   var $N;
   $1=$Deco;
   var $2=HEAP32[((22240)>>2)];
   var $3=((14040+$2)|0);
   var $4=HEAP8[($3)];
   var $5=(($4)&(255));
   var $6=$5 << 16;
   var $7=HEAP32[((22240)>>2)];
   var $8=((($7)+(1))|0);
   var $9=((14040+$8)|0);
   var $10=HEAP8[($9)];
   var $11=(($10)&(255));
   var $12=(($11)&(65535));
   var $13=$12 << 8;
   var $14=$6 | $13;
   var $15=HEAP32[((22240)>>2)];
   var $16=((($15)+(2))|0);
   var $17=((14040+$16)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=$14 | $19;
   var $21=HEAP32[((22232)>>2)];
   var $22=(((8)-($21))|0);
   var $23=$20 >>> (($22)>>>(0));
   var $24=$23 & 65535;
   HEAP32[((23720)>>2)]=$24;
   var $25=HEAP32[((23720)>>2)];
   var $26=$25 & 65534;
   $N=$26;
   var $27=$N;
   var $28=$1;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+32)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($27)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 2; break; } else { label = 24; break; }
  case 2: 
   var $35=$N;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($35)>>>(0)) < (($40)>>>(0));
   if ($41) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $43=$N;
   var $44=$1;
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($43)>>>(0)) < (($48)>>>(0));
   if ($49) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $51=$N;
   var $52=$1;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+4)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($51)>>>(0)) < (($56)>>>(0));
   if ($57) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $I=1;
   label = 7; break;
  case 6: 
   $I=2;
   label = 7; break;
  case 7: 
   label = 12; break;
  case 8: 
   var $62=$N;
   var $63=$1;
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+12)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($62)>>>(0)) < (($67)>>>(0));
   if ($68) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $I=3;
   label = 11; break;
  case 10: 
   $I=4;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 23; break;
  case 13: 
   var $74=$N;
   var $75=$1;
   var $76=(($75+4)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+24)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($74)>>>(0)) < (($79)>>>(0));
   if ($80) { label = 14; break; } else { label = 18; break; }
  case 14: 
   var $82=$N;
   var $83=$1;
   var $84=(($83+4)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+20)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($82)>>>(0)) < (($87)>>>(0));
   if ($88) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $I=5;
   label = 17; break;
  case 16: 
   $I=6;
   label = 17; break;
  case 17: 
   label = 22; break;
  case 18: 
   var $93=$N;
   var $94=$1;
   var $95=(($94+4)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+28)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($93)>>>(0)) < (($98)>>>(0));
   if ($99) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $I=7;
   label = 21; break;
  case 20: 
   $I=8;
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   label = 43; break;
  case 24: 
   var $106=$N;
   var $107=$1;
   var $108=(($107+4)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+48)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($106)>>>(0)) < (($111)>>>(0));
   if ($112) { label = 25; break; } else { label = 35; break; }
  case 25: 
   var $114=$N;
   var $115=$1;
   var $116=(($115+4)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117+40)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($114)>>>(0)) < (($119)>>>(0));
   if ($120) { label = 26; break; } else { label = 30; break; }
  case 26: 
   var $122=$N;
   var $123=$1;
   var $124=(($123+4)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+36)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($122)>>>(0)) < (($127)>>>(0));
   if ($128) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $I=9;
   label = 29; break;
  case 28: 
   $I=10;
   label = 29; break;
  case 29: 
   label = 34; break;
  case 30: 
   var $133=$N;
   var $134=$1;
   var $135=(($134+4)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+44)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($133)>>>(0)) < (($138)>>>(0));
   if ($139) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $I=11;
   label = 33; break;
  case 32: 
   $I=12;
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   label = 42; break;
  case 35: 
   var $145=$N;
   var $146=$1;
   var $147=(($146+4)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($148+56)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($145)>>>(0)) < (($150)>>>(0));
   if ($151) { label = 36; break; } else { label = 40; break; }
  case 36: 
   var $153=$N;
   var $154=$1;
   var $155=(($154+4)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+52)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($153)>>>(0)) < (($158)>>>(0));
   if ($159) { label = 37; break; } else { label = 38; break; }
  case 37: 
   $I=13;
   label = 39; break;
  case 38: 
   $I=14;
   label = 39; break;
  case 39: 
   label = 41; break;
  case 40: 
   $I=15;
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $167=HEAP32[((22232)>>2)];
   var $168=$I;
   var $169=((($167)+($168))|0);
   var $170=$169 >>> 3;
   var $171=HEAP32[((22240)>>2)];
   var $172=((($171)+($170))|0);
   HEAP32[((22240)>>2)]=$172;
   var $173=HEAP32[((22232)>>2)];
   var $174=$I;
   var $175=((($173)+($174))|0);
   var $176=$175 & 7;
   HEAP32[((22232)>>2)]=$176;
   var $177=$I;
   var $178=$1;
   var $179=(($178+8)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=(($180+($177<<2))|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=$N;
   var $184=$I;
   var $185=((($184)-(1))|0);
   var $186=$1;
   var $187=(($186+4)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+($185<<2))|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=((($183)-($190))|0);
   var $192=$I;
   var $193=(((16)-($192))|0);
   var $194=$191 >>> (($193)>>>(0));
   var $195=((($182)+($194))|0);
   $N=$195;
   var $196=$1;
   var $197=(($196)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=(($195)>>>(0)) >= (($198)>>>(0));
   if ($199) { label = 44; break; } else { label = 45; break; }
  case 44: 
   $N=0;
   label = 45; break;
  case 45: 
   var $202=$N;
   var $203=$1;
   var $204=(($203+12)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=(($205+($202<<2))|0);
   var $207=HEAP32[(($206)>>2)];
   HEAP32[((7968)>>2)]=$207;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _DecodeAudio($Delta) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $V;
   var $Ch;
   var $NumMinDif;
   var $MinDif;
   var $PCh;
   var $I;
   $1=$Delta;
   var $2=HEAP32[((22648)>>2)];
   var $3=((23936+((($2)*(92))&-1))|0);
   $V=$3;
   var $4=$V;
   var $5=(($4+84)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=((($6)+(1))|0);
   HEAP32[(($5)>>2)]=$7;
   var $8=$V;
   var $9=(($8+28)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$V;
   var $12=(($11+32)|0);
   HEAP32[(($12)>>2)]=$10;
   var $13=$V;
   var $14=(($13+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$V;
   var $17=(($16+28)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$V;
   var $19=(($18+36)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$V;
   var $22=(($21+20)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($20)-($23))|0);
   var $25=$V;
   var $26=(($25+24)|0);
   HEAP32[(($26)>>2)]=$24;
   var $27=$V;
   var $28=(($27+36)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$V;
   var $31=(($30+20)|0);
   HEAP32[(($31)>>2)]=$29;
   var $32=$V;
   var $33=(($32+88)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=($34<<3);
   var $36=$V;
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$V;
   var $40=(($39+20)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(Math.imul($38,$41)|0);
   var $43=((($35)+($42))|0);
   var $44=$V;
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$V;
   var $48=(($47+24)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(Math.imul($46,$49)|0);
   var $51=((($43)+($50))|0);
   var $52=$V;
   var $53=(($52+8)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$V;
   var $56=(($55+28)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(Math.imul($54,$57)|0);
   var $59=((($51)+($58))|0);
   var $60=$V;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$V;
   var $64=(($63+32)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(Math.imul($62,$65)|0);
   var $67=((($59)+($66))|0);
   var $68=$V;
   var $69=(($68+16)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=HEAP32[((22672)>>2)];
   var $72=(Math.imul($70,$71)|0);
   var $73=((($67)+($72))|0);
   $PCh=$73;
   var $74=$PCh;
   var $75=$74 >> 3;
   var $76=$75 & 255;
   $PCh=$76;
   var $77=$PCh;
   var $78=$1;
   var $79=((($77)-($78))|0);
   $Ch=$79;
   var $80=$1;
   var $81=(($80) & 255);
   var $82=(($81 << 24) >> 24);
   var $83=$82 << 3;
   $I=$83;
   var $84=$I;
   var $85=Math.abs($84);
   var $86=$V;
   var $87=(($86+40)|0);
   var $88=(($87)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=((($89)+($85))|0);
   HEAP32[(($88)>>2)]=$90;
   var $91=$I;
   var $92=$V;
   var $93=(($92+20)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=((($91)-($94))|0);
   var $96=Math.abs($95);
   var $97=$V;
   var $98=(($97+40)|0);
   var $99=(($98+4)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)+($96))|0);
   HEAP32[(($99)>>2)]=$101;
   var $102=$I;
   var $103=$V;
   var $104=(($103+20)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=((($102)+($105))|0);
   var $107=Math.abs($106);
   var $108=$V;
   var $109=(($108+40)|0);
   var $110=(($109+8)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=((($111)+($107))|0);
   HEAP32[(($110)>>2)]=$112;
   var $113=$I;
   var $114=$V;
   var $115=(($114+24)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=((($113)-($116))|0);
   var $118=Math.abs($117);
   var $119=$V;
   var $120=(($119+40)|0);
   var $121=(($120+12)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=((($122)+($118))|0);
   HEAP32[(($121)>>2)]=$123;
   var $124=$I;
   var $125=$V;
   var $126=(($125+24)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=((($124)+($127))|0);
   var $129=Math.abs($128);
   var $130=$V;
   var $131=(($130+40)|0);
   var $132=(($131+16)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=((($133)+($129))|0);
   HEAP32[(($132)>>2)]=$134;
   var $135=$I;
   var $136=$V;
   var $137=(($136+28)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=((($135)-($138))|0);
   var $140=Math.abs($139);
   var $141=$V;
   var $142=(($141+40)|0);
   var $143=(($142+20)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=((($144)+($140))|0);
   HEAP32[(($143)>>2)]=$145;
   var $146=$I;
   var $147=$V;
   var $148=(($147+28)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=((($146)+($149))|0);
   var $151=Math.abs($150);
   var $152=$V;
   var $153=(($152+40)|0);
   var $154=(($153+24)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=((($155)+($151))|0);
   HEAP32[(($154)>>2)]=$156;
   var $157=$I;
   var $158=$V;
   var $159=(($158+32)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=((($157)-($160))|0);
   var $162=Math.abs($161);
   var $163=$V;
   var $164=(($163+40)|0);
   var $165=(($164+28)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=((($166)+($162))|0);
   HEAP32[(($165)>>2)]=$167;
   var $168=$I;
   var $169=$V;
   var $170=(($169+32)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=((($168)+($171))|0);
   var $173=Math.abs($172);
   var $174=$V;
   var $175=(($174+40)|0);
   var $176=(($175+32)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=((($177)+($173))|0);
   HEAP32[(($176)>>2)]=$178;
   var $179=$I;
   var $180=HEAP32[((22672)>>2)];
   var $181=((($179)-($180))|0);
   var $182=Math.abs($181);
   var $183=$V;
   var $184=(($183+40)|0);
   var $185=(($184+36)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=((($186)+($182))|0);
   HEAP32[(($185)>>2)]=$187;
   var $188=$I;
   var $189=HEAP32[((22672)>>2)];
   var $190=((($188)+($189))|0);
   var $191=Math.abs($190);
   var $192=$V;
   var $193=(($192+40)|0);
   var $194=(($193+40)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=((($195)+($191))|0);
   HEAP32[(($194)>>2)]=$196;
   var $197=$Ch;
   var $198=$V;
   var $199=(($198+88)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=((($197)-($200))|0);
   var $202=(($201) & 255);
   var $203=(($202 << 24) >> 24);
   var $204=$V;
   var $205=(($204+36)|0);
   HEAP32[(($205)>>2)]=$203;
   HEAP32[((22672)>>2)]=$203;
   var $206=$Ch;
   var $207=$V;
   var $208=(($207+88)|0);
   HEAP32[(($208)>>2)]=$206;
   var $209=$V;
   var $210=(($209+84)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=$211 & 31;
   var $213=(($212)|(0))==0;
   if ($213) { label = 2; break; } else { label = 40; break; }
  case 2: 
   var $215=$V;
   var $216=(($215+40)|0);
   var $217=(($216)|0);
   var $218=HEAP32[(($217)>>2)];
   $MinDif=$218;
   $NumMinDif=0;
   var $219=$V;
   var $220=(($219+40)|0);
   var $221=(($220)|0);
   HEAP32[(($221)>>2)]=0;
   $I=1;
   label = 3; break;
  case 3: 
   var $223=$I;
   var $224=(($223)>>>(0)) < 11;
   if ($224) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $226=$I;
   var $227=$V;
   var $228=(($227+40)|0);
   var $229=(($228+($226<<2))|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=$MinDif;
   var $232=(($230)>>>(0)) < (($231)>>>(0));
   if ($232) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $234=$I;
   var $235=$V;
   var $236=(($235+40)|0);
   var $237=(($236+($234<<2))|0);
   var $238=HEAP32[(($237)>>2)];
   $MinDif=$238;
   var $239=$I;
   $NumMinDif=$239;
   label = 6; break;
  case 6: 
   var $241=$I;
   var $242=$V;
   var $243=(($242+40)|0);
   var $244=(($243+($241<<2))|0);
   HEAP32[(($244)>>2)]=0;
   label = 7; break;
  case 7: 
   var $246=$I;
   var $247=((($246)+(1))|0);
   $I=$247;
   label = 3; break;
  case 8: 
   var $249=$NumMinDif;
   if ((($249)|(0))==1) {
    label = 9; break;
   }
   else if ((($249)|(0))==2) {
    label = 12; break;
   }
   else if ((($249)|(0))==3) {
    label = 15; break;
   }
   else if ((($249)|(0))==4) {
    label = 18; break;
   }
   else if ((($249)|(0))==5) {
    label = 21; break;
   }
   else if ((($249)|(0))==6) {
    label = 24; break;
   }
   else if ((($249)|(0))==7) {
    label = 27; break;
   }
   else if ((($249)|(0))==8) {
    label = 30; break;
   }
   else if ((($249)|(0))==9) {
    label = 33; break;
   }
   else if ((($249)|(0))==10) {
    label = 36; break;
   }
   else {
   label = 39; break;
   }
  case 9: 
   var $251=$V;
   var $252=(($251)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=(($253)|(0)) >= -16;
   if ($254) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $256=$V;
   var $257=(($256)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=((($258)-(1))|0);
   HEAP32[(($257)>>2)]=$259;
   label = 11; break;
  case 11: 
   label = 39; break;
  case 12: 
   var $262=$V;
   var $263=(($262)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=(($264)|(0)) < 16;
   if ($265) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $267=$V;
   var $268=(($267)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=((($269)+(1))|0);
   HEAP32[(($268)>>2)]=$270;
   label = 14; break;
  case 14: 
   label = 39; break;
  case 15: 
   var $273=$V;
   var $274=(($273+4)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0)) >= -16;
   if ($276) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $278=$V;
   var $279=(($278+4)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=((($280)-(1))|0);
   HEAP32[(($279)>>2)]=$281;
   label = 17; break;
  case 17: 
   label = 39; break;
  case 18: 
   var $284=$V;
   var $285=(($284+4)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0)) < 16;
   if ($287) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $289=$V;
   var $290=(($289+4)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292=((($291)+(1))|0);
   HEAP32[(($290)>>2)]=$292;
   label = 20; break;
  case 20: 
   label = 39; break;
  case 21: 
   var $295=$V;
   var $296=(($295+8)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=(($297)|(0)) >= -16;
   if ($298) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $300=$V;
   var $301=(($300+8)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=((($302)-(1))|0);
   HEAP32[(($301)>>2)]=$303;
   label = 23; break;
  case 23: 
   label = 39; break;
  case 24: 
   var $306=$V;
   var $307=(($306+8)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=(($308)|(0)) < 16;
   if ($309) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $311=$V;
   var $312=(($311+8)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=((($313)+(1))|0);
   HEAP32[(($312)>>2)]=$314;
   label = 26; break;
  case 26: 
   label = 39; break;
  case 27: 
   var $317=$V;
   var $318=(($317+12)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($319)|(0)) >= -16;
   if ($320) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $322=$V;
   var $323=(($322+12)|0);
   var $324=HEAP32[(($323)>>2)];
   var $325=((($324)-(1))|0);
   HEAP32[(($323)>>2)]=$325;
   label = 29; break;
  case 29: 
   label = 39; break;
  case 30: 
   var $328=$V;
   var $329=(($328+12)|0);
   var $330=HEAP32[(($329)>>2)];
   var $331=(($330)|(0)) < 16;
   if ($331) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $333=$V;
   var $334=(($333+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=((($335)+(1))|0);
   HEAP32[(($334)>>2)]=$336;
   label = 32; break;
  case 32: 
   label = 39; break;
  case 33: 
   var $339=$V;
   var $340=(($339+16)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=(($341)|(0)) >= -16;
   if ($342) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $344=$V;
   var $345=(($344+16)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=((($346)-(1))|0);
   HEAP32[(($345)>>2)]=$347;
   label = 35; break;
  case 35: 
   label = 39; break;
  case 36: 
   var $350=$V;
   var $351=(($350+16)|0);
   var $352=HEAP32[(($351)>>2)];
   var $353=(($352)|(0)) < 16;
   if ($353) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $355=$V;
   var $356=(($355+16)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=((($357)+(1))|0);
   HEAP32[(($356)>>2)]=$358;
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $362=$Ch;
   var $363=(($362) & 255);
   return $363;
  default: assert(0, "bad label: " + label);
 }
}
function _ReadLastTables() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((7640)>>2)];
   var $2=HEAP32[((22240)>>2)];
   var $3=((($2)+(5))|0);
   var $4=(($1)>>>(0)) >= (($3)>>>(0));
   if ($4) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $6=HEAP32[((7368)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $9=HEAP32[((22648)>>2)];
   var $10=((4304+($9<<2))|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=_MultDecode2Decode($11);
   _DecodeNumber($12);
   var $13=HEAP32[((7968)>>2)];
   var $14=(($13)|(0))==256;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _ReadTables();
   label = 5; break;
  case 5: 
   label = 9; break;
  case 6: 
   var $18=_LitDecode2Decode(12696);
   _DecodeNumber($18);
   var $19=HEAP32[((7968)>>2)];
   var $20=(($19)|(0))==269;
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _ReadTables();
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _UpdKeys($Buf) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $I;
   $1=$Buf;
   $I=0;
   label = 2; break;
  case 2: 
   var $3=$I;
   var $4=(($3)|(0)) < 16;
   if ($4) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $6=$I;
   var $7=$1;
   var $8=(($7+$6)|0);
   var $9=HEAP8[($8)];
   var $10=(($9)&(255));
   var $11=((22680+($10<<2))|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=HEAP32[((((14024)|0))>>2)];
   var $14=$13 ^ $12;
   HEAP32[((((14024)|0))>>2)]=$14;
   var $15=$I;
   var $16=((($15)+(1))|0);
   var $17=$1;
   var $18=(($17+$16)|0);
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   var $21=((22680+($20<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=HEAP32[((((14028)|0))>>2)];
   var $24=$23 ^ $22;
   HEAP32[((((14028)|0))>>2)]=$24;
   var $25=$I;
   var $26=((($25)+(2))|0);
   var $27=$1;
   var $28=(($27+$26)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=((22680+($30<<2))|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=HEAP32[((((14032)|0))>>2)];
   var $34=$33 ^ $32;
   HEAP32[((((14032)|0))>>2)]=$34;
   var $35=$I;
   var $36=((($35)+(3))|0);
   var $37=$1;
   var $38=(($37+$36)|0);
   var $39=HEAP8[($38)];
   var $40=(($39)&(255));
   var $41=((22680+($40<<2))|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=HEAP32[((((14036)|0))>>2)];
   var $44=$43 ^ $42;
   HEAP32[((((14036)|0))>>2)]=$44;
   label = 4; break;
  case 4: 
   var $46=$I;
   var $47=((($46)+(4))|0);
   $I=$47;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _DecryptBlock($Buf) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $I;
   var $InBuf=sp;
   var $A;
   var $B;
   var $C;
   var $D;
   var $T;
   var $TA;
   var $TB;
   var $BufPtr;
   $1=$Buf;
   var $2=$1;
   var $3=$2;
   $BufPtr=$3;
   var $4=$BufPtr;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=HEAP32[((((14024)|0))>>2)];
   var $8=$6 ^ $7;
   $A=$8;
   var $9=$BufPtr;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=HEAP32[((((14028)|0))>>2)];
   var $13=$11 ^ $12;
   $B=$13;
   var $14=$BufPtr;
   var $15=(($14+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=HEAP32[((((14032)|0))>>2)];
   var $18=$16 ^ $17;
   $C=$18;
   var $19=$BufPtr;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=HEAP32[((((14036)|0))>>2)];
   var $23=$21 ^ $22;
   $D=$23;
   var $24=$InBuf;
   var $25=$1;
   assert(16 % 1 === 0);(_memcpy($24, $25, 16)|0);
   $I=31;
   label = 2; break;
  case 2: 
   var $27=$I;
   var $28=(($27)|(0)) >= 0;
   if ($28) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $30=$C;
   var $31=$D;
   var $32=$31 << 11;
   var $33=$D;
   var $34=$33 >>> 21;
   var $35=$32 | $34;
   var $36=((($30)+($35))|0);
   var $37=$I;
   var $38=$37 & 3;
   var $39=((14024+($38<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$36 ^ $40;
   $T=$41;
   var $42=$A;
   var $43=$T;
   var $44=$43 & 255;
   var $45=((7384+$44)|0);
   var $46=HEAP8[($45)];
   var $47=(($46)&(255));
   var $48=$T;
   var $49=$48 >>> 8;
   var $50=$49 & 255;
   var $51=((7384+$50)|0);
   var $52=HEAP8[($51)];
   var $53=(($52)&(255));
   var $54=$53 << 8;
   var $55=$47 | $54;
   var $56=$T;
   var $57=$56 >>> 16;
   var $58=$57 & 255;
   var $59=((7384+$58)|0);
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   var $62=$61 << 16;
   var $63=$55 | $62;
   var $64=$T;
   var $65=$64 >>> 24;
   var $66=$65 & 255;
   var $67=((7384+$66)|0);
   var $68=HEAP8[($67)];
   var $69=(($68)&(255));
   var $70=$69 << 24;
   var $71=$63 | $70;
   var $72=$42 ^ $71;
   $TA=$72;
   var $73=$D;
   var $74=$C;
   var $75=$74 << 17;
   var $76=$C;
   var $77=$76 >>> 15;
   var $78=$75 | $77;
   var $79=$73 ^ $78;
   var $80=$I;
   var $81=$80 & 3;
   var $82=((14024+($81<<2))|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=((($79)+($83))|0);
   $T=$84;
   var $85=$B;
   var $86=$T;
   var $87=$86 & 255;
   var $88=((7384+$87)|0);
   var $89=HEAP8[($88)];
   var $90=(($89)&(255));
   var $91=$T;
   var $92=$91 >>> 8;
   var $93=$92 & 255;
   var $94=((7384+$93)|0);
   var $95=HEAP8[($94)];
   var $96=(($95)&(255));
   var $97=$96 << 8;
   var $98=$90 | $97;
   var $99=$T;
   var $100=$99 >>> 16;
   var $101=$100 & 255;
   var $102=((7384+$101)|0);
   var $103=HEAP8[($102)];
   var $104=(($103)&(255));
   var $105=$104 << 16;
   var $106=$98 | $105;
   var $107=$T;
   var $108=$107 >>> 24;
   var $109=$108 & 255;
   var $110=((7384+$109)|0);
   var $111=HEAP8[($110)];
   var $112=(($111)&(255));
   var $113=$112 << 24;
   var $114=$106 | $113;
   var $115=$85 ^ $114;
   $TB=$115;
   var $116=$C;
   $A=$116;
   var $117=$D;
   $B=$117;
   var $118=$TA;
   $C=$118;
   var $119=$TB;
   $D=$119;
   label = 4; break;
  case 4: 
   var $121=$I;
   var $122=((($121)-(1))|0);
   $I=$122;
   label = 2; break;
  case 5: 
   var $124=$C;
   var $125=HEAP32[((((14024)|0))>>2)];
   var $126=$124 ^ $125;
   var $127=$BufPtr;
   var $128=(($127)|0);
   HEAP32[(($128)>>2)]=$126;
   var $129=$D;
   var $130=HEAP32[((((14028)|0))>>2)];
   var $131=$129 ^ $130;
   var $132=$BufPtr;
   var $133=(($132+4)|0);
   HEAP32[(($133)>>2)]=$131;
   var $134=$A;
   var $135=HEAP32[((((14032)|0))>>2)];
   var $136=$134 ^ $135;
   var $137=$BufPtr;
   var $138=(($137+8)|0);
   HEAP32[(($138)>>2)]=$136;
   var $139=$B;
   var $140=HEAP32[((((14036)|0))>>2)];
   var $141=$139 ^ $140;
   var $142=$BufPtr;
   var $143=(($142+12)|0);
   HEAP32[(($143)>>2)]=$141;
   var $144=(($InBuf)|0);
   _UpdKeys($144);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _MakeDecodeTables($LenTab, $Dec, $Size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $LenCount=sp;
   var $TmpPos=(sp)+(64);
   var $I;
   var $M;
   var $N;
   $1=$LenTab;
   $2=$Dec;
   $3=$Size;
   var $4=$LenCount;
   _memset($4, 0, 64);
   $I=0;
   label = 2; break;
  case 2: 
   var $6=$I;
   var $7=$3;
   var $8=(($6)|(0)) < (($7)|(0));
   if ($8) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $10=$I;
   var $11=$1;
   var $12=(($11+$10)|0);
   var $13=HEAP8[($12)];
   var $14=(($13)&(255));
   var $15=$14 & 15;
   var $16=(($LenCount+($15<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)+(1))|0);
   HEAP32[(($16)>>2)]=$18;
   label = 4; break;
  case 4: 
   var $20=$I;
   var $21=((($20)+(1))|0);
   $I=$21;
   label = 2; break;
  case 5: 
   var $23=(($LenCount)|0);
   HEAP32[(($23)>>2)]=0;
   var $24=$2;
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=$2;
   var $29=(($28+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=(($TmpPos)|0);
   HEAP32[(($32)>>2)]=0;
   $N=0;
   $I=1;
   label = 6; break;
  case 6: 
   var $34=$I;
   var $35=(($34)|(0)) < 16;
   if ($35) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $37=$N;
   var $38=$I;
   var $39=(($LenCount+($38<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=((($37)+($40))|0);
   var $42=($41<<1);
   $N=$42;
   var $43=$N;
   var $44=$I;
   var $45=(((15)-($44))|0);
   var $46=$43 << $45;
   $M=$46;
   var $47=$M;
   var $48=(($47)|(0)) > 65535;
   if ($48) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $M=65535;
   label = 9; break;
  case 9: 
   var $51=$M;
   var $52=$I;
   var $53=$2;
   var $54=(($53+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+($52<<2))|0);
   HEAP32[(($56)>>2)]=$51;
   var $57=$I;
   var $58=((($57)-(1))|0);
   var $59=$2;
   var $60=(($59+8)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61+($58<<2))|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$I;
   var $65=((($64)-(1))|0);
   var $66=(($LenCount+($65<<2))|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($63)+($67))|0);
   var $69=$I;
   var $70=$2;
   var $71=(($70+8)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+($69<<2))|0);
   HEAP32[(($73)>>2)]=$68;
   var $74=$I;
   var $75=(($TmpPos+($74<<2))|0);
   HEAP32[(($75)>>2)]=$68;
   label = 10; break;
  case 10: 
   var $77=$I;
   var $78=((($77)+(1))|0);
   $I=$78;
   label = 6; break;
  case 11: 
   $I=0;
   label = 12; break;
  case 12: 
   var $81=$I;
   var $82=$3;
   var $83=(($81)|(0)) < (($82)|(0));
   if ($83) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $85=$I;
   var $86=$1;
   var $87=(($86+$85)|0);
   var $88=HEAP8[($87)];
   var $89=(($88)&(255));
   var $90=(($89)|(0))!=0;
   if ($90) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $92=$I;
   var $93=$I;
   var $94=$1;
   var $95=(($94+$93)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=$97 & 15;
   var $99=(($TmpPos+($98<<2))|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   var $102=$2;
   var $103=(($102+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+($100<<2))|0);
   HEAP32[(($105)>>2)]=$92;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $108=$I;
   var $109=((($108)+(1))|0);
   $I=$109;
   label = 12; break;
  case 17: 
   var $111=$3;
   var $112=$2;
   var $113=(($112)|0);
   HEAP32[(($113)>>2)]=$111;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _EncryptBlock($Buf) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $I;
   var $A;
   var $B;
   var $C;
   var $D;
   var $T;
   var $TA;
   var $TB;
   var $BufPtr;
   $1=$Buf;
   var $2=$1;
   var $3=$2;
   $BufPtr=$3;
   var $4=$BufPtr;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=HEAP32[((((14024)|0))>>2)];
   var $8=$6 ^ $7;
   $A=$8;
   var $9=$BufPtr;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=HEAP32[((((14028)|0))>>2)];
   var $13=$11 ^ $12;
   $B=$13;
   var $14=$BufPtr;
   var $15=(($14+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=HEAP32[((((14032)|0))>>2)];
   var $18=$16 ^ $17;
   $C=$18;
   var $19=$BufPtr;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=HEAP32[((((14036)|0))>>2)];
   var $23=$21 ^ $22;
   $D=$23;
   $I=0;
   label = 2; break;
  case 2: 
   var $25=$I;
   var $26=(($25)|(0)) < 32;
   if ($26) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $28=$C;
   var $29=$D;
   var $30=$29 << 11;
   var $31=$D;
   var $32=$31 >>> 21;
   var $33=$30 | $32;
   var $34=((($28)+($33))|0);
   var $35=$I;
   var $36=$35 & 3;
   var $37=((14024+($36<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$34 ^ $38;
   $T=$39;
   var $40=$A;
   var $41=$T;
   var $42=$41 & 255;
   var $43=((7384+$42)|0);
   var $44=HEAP8[($43)];
   var $45=(($44)&(255));
   var $46=$T;
   var $47=$46 >>> 8;
   var $48=$47 & 255;
   var $49=((7384+$48)|0);
   var $50=HEAP8[($49)];
   var $51=(($50)&(255));
   var $52=$51 << 8;
   var $53=$45 | $52;
   var $54=$T;
   var $55=$54 >>> 16;
   var $56=$55 & 255;
   var $57=((7384+$56)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$59 << 16;
   var $61=$53 | $60;
   var $62=$T;
   var $63=$62 >>> 24;
   var $64=$63 & 255;
   var $65=((7384+$64)|0);
   var $66=HEAP8[($65)];
   var $67=(($66)&(255));
   var $68=$67 << 24;
   var $69=$61 | $68;
   var $70=$40 ^ $69;
   $TA=$70;
   var $71=$D;
   var $72=$C;
   var $73=$72 << 17;
   var $74=$C;
   var $75=$74 >>> 15;
   var $76=$73 | $75;
   var $77=$71 ^ $76;
   var $78=$I;
   var $79=$78 & 3;
   var $80=((14024+($79<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=((($77)+($81))|0);
   $T=$82;
   var $83=$B;
   var $84=$T;
   var $85=$84 & 255;
   var $86=((7384+$85)|0);
   var $87=HEAP8[($86)];
   var $88=(($87)&(255));
   var $89=$T;
   var $90=$89 >>> 8;
   var $91=$90 & 255;
   var $92=((7384+$91)|0);
   var $93=HEAP8[($92)];
   var $94=(($93)&(255));
   var $95=$94 << 8;
   var $96=$88 | $95;
   var $97=$T;
   var $98=$97 >>> 16;
   var $99=$98 & 255;
   var $100=((7384+$99)|0);
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   var $103=$102 << 16;
   var $104=$96 | $103;
   var $105=$T;
   var $106=$105 >>> 24;
   var $107=$106 & 255;
   var $108=((7384+$107)|0);
   var $109=HEAP8[($108)];
   var $110=(($109)&(255));
   var $111=$110 << 24;
   var $112=$104 | $111;
   var $113=$83 ^ $112;
   $TB=$113;
   var $114=$C;
   $A=$114;
   var $115=$D;
   $B=$115;
   var $116=$TA;
   $C=$116;
   var $117=$TB;
   $D=$117;
   label = 4; break;
  case 4: 
   var $119=$I;
   var $120=((($119)+(1))|0);
   $I=$120;
   label = 2; break;
  case 5: 
   var $122=$C;
   var $123=HEAP32[((((14024)|0))>>2)];
   var $124=$122 ^ $123;
   var $125=$BufPtr;
   var $126=(($125)|0);
   HEAP32[(($126)>>2)]=$124;
   var $127=$D;
   var $128=HEAP32[((((14028)|0))>>2)];
   var $129=$127 ^ $128;
   var $130=$BufPtr;
   var $131=(($130+4)|0);
   HEAP32[(($131)>>2)]=$129;
   var $132=$A;
   var $133=HEAP32[((((14032)|0))>>2)];
   var $134=$132 ^ $133;
   var $135=$BufPtr;
   var $136=(($135+8)|0);
   HEAP32[(($136)>>2)]=$134;
   var $137=$B;
   var $138=HEAP32[((((14036)|0))>>2)];
   var $139=$137 ^ $138;
   var $140=$BufPtr;
   var $141=(($140+12)|0);
   HEAP32[(($141)>>2)]=$139;
   var $142=$1;
   _UpdKeys($142);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _SetOldKeys($Password) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $PswCRC;
   var $Ch;
   $1=$Password;
   var $2=$1;
   var $3=$1;
   var $4=_strlen($3);
   var $5=_CalcCRC32(-1, $2, $4);
   $PswCRC=$5;
   var $6=$PswCRC;
   var $7=(($6) & 65535);
   HEAP16[((((7936)|0))>>1)]=$7;
   var $8=$PswCRC;
   var $9=$8 >>> 16;
   var $10=(($9) & 65535);
   HEAP16[((((7938)|0))>>1)]=$10;
   HEAP16[((((7942)|0))>>1)]=0;
   HEAP16[((((7940)|0))>>1)]=0;
   HEAP8[(7912)]=0;
   HEAP8[(7920)]=0;
   HEAP8[(7928)]=0;
   label = 2; break;
  case 2: 
   var $12=$1;
   var $13=HEAP8[($12)];
   $Ch=$13;
   var $14=(($13)&(255));
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=$Ch;
   var $18=(($17)&(255));
   var $19=HEAP8[(7928)];
   var $20=(($19)&(255));
   var $21=((($20)+($18))|0);
   var $22=(($21) & 255);
   HEAP8[(7928)]=$22;
   var $23=$Ch;
   var $24=(($23)&(255));
   var $25=HEAP8[(7920)];
   var $26=(($25)&(255));
   var $27=$26 ^ $24;
   var $28=(($27) & 255);
   HEAP8[(7920)]=$28;
   var $29=$Ch;
   var $30=(($29)&(255));
   var $31=HEAP8[(7912)];
   var $32=(($31)&(255));
   var $33=((($32)+($30))|0);
   var $34=(($33) & 255);
   HEAP8[(7912)]=$34;
   var $35=HEAP8[(7912)];
   var $36=(($35)&(255));
   var $37=$36 << 1;
   var $38=HEAP8[(7912)];
   var $39=(($38)&(255));
   var $40=$39 >> 7;
   var $41=$37 | $40;
   var $42=(($41) & 255);
   HEAP8[(7912)]=$42;
   var $43=$Ch;
   var $44=(($43)&(255));
   var $45=$Ch;
   var $46=(($45)&(255));
   var $47=((22680+($46<<2))|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$44 ^ $48;
   var $50=(($49) & 65535);
   var $51=(($50)&(65535));
   var $52=HEAP16[((((7940)|0))>>1)];
   var $53=(($52)&(65535));
   var $54=$53 ^ $51;
   var $55=(($54) & 65535);
   HEAP16[((((7940)|0))>>1)]=$55;
   var $56=$Ch;
   var $57=(($56)&(255));
   var $58=$Ch;
   var $59=(($58)&(255));
   var $60=((22680+($59<<2))|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$61 >>> 16;
   var $63=((($57)+($62))|0);
   var $64=(($63) & 65535);
   var $65=(($64)&(65535));
   var $66=HEAP16[((((7942)|0))>>1)];
   var $67=(($66)&(65535));
   var $68=((($67)+($65))|0);
   var $69=(($68) & 65535);
   HEAP16[((((7942)|0))>>1)]=$69;
   var $70=$1;
   var $71=(($70+1)|0);
   $1=$71;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($bytes)>>>(0)) < 245;
   if ($1) { label = 2; break; } else { label = 78; break; }
  case 2: 
   var $3=(($bytes)>>>(0)) < 11;
   if ($3) { var $8 = 16;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $5=((($bytes)+(11))|0);
   var $6=$5 & -8;
   var $8 = $6;label = 4; break;
  case 4: 
   var $8;
   var $9=$8 >>> 3;
   var $10=HEAP32[((((5768)|0))>>2)];
   var $11=$10 >>> (($9)>>>(0));
   var $12=$11 & 3;
   var $13=(($12)|(0))==0;
   if ($13) { label = 12; break; } else { label = 5; break; }
  case 5: 
   var $15=$11 & 1;
   var $16=$15 ^ 1;
   var $17=((($16)+($9))|0);
   var $18=$17 << 1;
   var $19=((5808+($18<<2))|0);
   var $20=$19;
   var $_sum11=((($18)+(2))|0);
   var $21=((5808+($_sum11<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($20)|(0))==(($24)|(0));
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=1 << $17;
   var $28=$27 ^ -1;
   var $29=$10 & $28;
   HEAP32[((((5768)|0))>>2)]=$29;
   label = 11; break;
  case 7: 
   var $31=$24;
   var $32=HEAP32[((((5784)|0))>>2)];
   var $33=(($31)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $35=(($24+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))==(($22)|(0));
   if ($37) { label = 9; break; } else { label = 10; break; }
  case 9: 
   HEAP32[(($35)>>2)]=$20;
   HEAP32[(($21)>>2)]=$24;
   label = 11; break;
  case 10: 
   _abort();
   throw "Reached an unreachable!";
  case 11: 
   var $40=$17 << 3;
   var $41=$40 | 3;
   var $42=(($22+4)|0);
   HEAP32[(($42)>>2)]=$41;
   var $43=$22;
   var $_sum1314=$40 | 4;
   var $44=(($43+$_sum1314)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 | 1;
   HEAP32[(($45)>>2)]=$47;
   var $48=$23;
   var $mem_0 = $48;label = 344; break;
  case 12: 
   var $50=HEAP32[((((5776)|0))>>2)];
   var $51=(($8)>>>(0)) > (($50)>>>(0));
   if ($51) { label = 13; break; } else { var $nb_0 = $8;label = 161; break; }
  case 13: 
   var $53=(($11)|(0))==0;
   if ($53) { label = 27; break; } else { label = 14; break; }
  case 14: 
   var $55=$11 << $9;
   var $56=2 << $9;
   var $57=(((-$56))|0);
   var $58=$56 | $57;
   var $59=$55 & $58;
   var $60=(((-$59))|0);
   var $61=$59 & $60;
   var $62=((($61)-(1))|0);
   var $63=$62 >>> 12;
   var $64=$63 & 16;
   var $65=$62 >>> (($64)>>>(0));
   var $66=$65 >>> 5;
   var $67=$66 & 8;
   var $68=$67 | $64;
   var $69=$65 >>> (($67)>>>(0));
   var $70=$69 >>> 2;
   var $71=$70 & 4;
   var $72=$68 | $71;
   var $73=$69 >>> (($71)>>>(0));
   var $74=$73 >>> 1;
   var $75=$74 & 2;
   var $76=$72 | $75;
   var $77=$73 >>> (($75)>>>(0));
   var $78=$77 >>> 1;
   var $79=$78 & 1;
   var $80=$76 | $79;
   var $81=$77 >>> (($79)>>>(0));
   var $82=((($80)+($81))|0);
   var $83=$82 << 1;
   var $84=((5808+($83<<2))|0);
   var $85=$84;
   var $_sum4=((($83)+(2))|0);
   var $86=((5808+($_sum4<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($85)|(0))==(($89)|(0));
   if ($90) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $92=1 << $82;
   var $93=$92 ^ -1;
   var $94=$10 & $93;
   HEAP32[((((5768)|0))>>2)]=$94;
   label = 20; break;
  case 16: 
   var $96=$89;
   var $97=HEAP32[((((5784)|0))>>2)];
   var $98=(($96)>>>(0)) < (($97)>>>(0));
   if ($98) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $100=(($89+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==(($87)|(0));
   if ($102) { label = 18; break; } else { label = 19; break; }
  case 18: 
   HEAP32[(($100)>>2)]=$85;
   HEAP32[(($86)>>2)]=$89;
   label = 20; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   var $105=$82 << 3;
   var $106=((($105)-($8))|0);
   var $107=$8 | 3;
   var $108=(($87+4)|0);
   HEAP32[(($108)>>2)]=$107;
   var $109=$87;
   var $110=(($109+$8)|0);
   var $111=$110;
   var $112=$106 | 1;
   var $_sum67=$8 | 4;
   var $113=(($109+$_sum67)|0);
   var $114=$113;
   HEAP32[(($114)>>2)]=$112;
   var $115=(($109+$105)|0);
   var $116=$115;
   HEAP32[(($116)>>2)]=$106;
   var $117=HEAP32[((((5776)|0))>>2)];
   var $118=(($117)|(0))==0;
   if ($118) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $120=HEAP32[((((5788)|0))>>2)];
   var $121=$117 >>> 3;
   var $122=$121 << 1;
   var $123=((5808+($122<<2))|0);
   var $124=$123;
   var $125=HEAP32[((((5768)|0))>>2)];
   var $126=1 << $121;
   var $127=$125 & $126;
   var $128=(($127)|(0))==0;
   if ($128) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $130=$125 | $126;
   HEAP32[((((5768)|0))>>2)]=$130;
   var $_sum9_pre=((($122)+(2))|0);
   var $_pre=((5808+($_sum9_pre<<2))|0);
   var $F4_0 = $124;var $_pre_phi = $_pre;label = 25; break;
  case 23: 
   var $_sum10=((($122)+(2))|0);
   var $132=((5808+($_sum10<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133;
   var $135=HEAP32[((((5784)|0))>>2)];
   var $136=(($134)>>>(0)) < (($135)>>>(0));
   if ($136) { label = 24; break; } else { var $F4_0 = $133;var $_pre_phi = $132;label = 25; break; }
  case 24: 
   _abort();
   throw "Reached an unreachable!";
  case 25: 
   var $_pre_phi;
   var $F4_0;
   HEAP32[(($_pre_phi)>>2)]=$120;
   var $139=(($F4_0+12)|0);
   HEAP32[(($139)>>2)]=$120;
   var $140=(($120+8)|0);
   HEAP32[(($140)>>2)]=$F4_0;
   var $141=(($120+12)|0);
   HEAP32[(($141)>>2)]=$124;
   label = 26; break;
  case 26: 
   HEAP32[((((5776)|0))>>2)]=$106;
   HEAP32[((((5788)|0))>>2)]=$111;
   var $143=$88;
   var $mem_0 = $143;label = 344; break;
  case 27: 
   var $145=HEAP32[((((5772)|0))>>2)];
   var $146=(($145)|(0))==0;
   if ($146) { var $nb_0 = $8;label = 161; break; } else { label = 28; break; }
  case 28: 
   var $148=(((-$145))|0);
   var $149=$145 & $148;
   var $150=((($149)-(1))|0);
   var $151=$150 >>> 12;
   var $152=$151 & 16;
   var $153=$150 >>> (($152)>>>(0));
   var $154=$153 >>> 5;
   var $155=$154 & 8;
   var $156=$155 | $152;
   var $157=$153 >>> (($155)>>>(0));
   var $158=$157 >>> 2;
   var $159=$158 & 4;
   var $160=$156 | $159;
   var $161=$157 >>> (($159)>>>(0));
   var $162=$161 >>> 1;
   var $163=$162 & 2;
   var $164=$160 | $163;
   var $165=$161 >>> (($163)>>>(0));
   var $166=$165 >>> 1;
   var $167=$166 & 1;
   var $168=$164 | $167;
   var $169=$165 >>> (($167)>>>(0));
   var $170=((($168)+($169))|0);
   var $171=((6072+($170<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+4)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$174 & -8;
   var $176=((($175)-($8))|0);
   var $t_0_i = $172;var $v_0_i = $172;var $rsize_0_i = $176;label = 29; break;
  case 29: 
   var $rsize_0_i;
   var $v_0_i;
   var $t_0_i;
   var $178=(($t_0_i+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179)|(0))==0;
   if ($180) { label = 30; break; } else { var $185 = $179;label = 31; break; }
  case 30: 
   var $182=(($t_0_i+20)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183)|(0))==0;
   if ($184) { label = 32; break; } else { var $185 = $183;label = 31; break; }
  case 31: 
   var $185;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$187 & -8;
   var $189=((($188)-($8))|0);
   var $190=(($189)>>>(0)) < (($rsize_0_i)>>>(0));
   var $_rsize_0_i=$190 ? $189 : $rsize_0_i;
   var $_v_0_i=$190 ? $185 : $v_0_i;
   var $t_0_i = $185;var $v_0_i = $_v_0_i;var $rsize_0_i = $_rsize_0_i;label = 29; break;
  case 32: 
   var $192=$v_0_i;
   var $193=HEAP32[((((5784)|0))>>2)];
   var $194=(($192)>>>(0)) < (($193)>>>(0));
   if ($194) { label = 76; break; } else { label = 33; break; }
  case 33: 
   var $196=(($192+$8)|0);
   var $197=$196;
   var $198=(($192)>>>(0)) < (($196)>>>(0));
   if ($198) { label = 34; break; } else { label = 76; break; }
  case 34: 
   var $200=(($v_0_i+24)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($v_0_i+12)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203)|(0))==(($v_0_i)|(0));
   if ($204) { label = 40; break; } else { label = 35; break; }
  case 35: 
   var $206=(($v_0_i+8)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=$207;
   var $209=(($208)>>>(0)) < (($193)>>>(0));
   if ($209) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $211=(($207+12)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212)|(0))==(($v_0_i)|(0));
   if ($213) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $215=(($203+8)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216)|(0))==(($v_0_i)|(0));
   if ($217) { label = 38; break; } else { label = 39; break; }
  case 38: 
   HEAP32[(($211)>>2)]=$203;
   HEAP32[(($215)>>2)]=$207;
   var $R_1_i = $203;label = 47; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $220=(($v_0_i+20)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221)|(0))==0;
   if ($222) { label = 41; break; } else { var $R_0_i = $221;var $RP_0_i = $220;label = 42; break; }
  case 41: 
   var $224=(($v_0_i+16)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225)|(0))==0;
   if ($226) { var $R_1_i = 0;label = 47; break; } else { var $R_0_i = $225;var $RP_0_i = $224;label = 42; break; }
  case 42: 
   var $RP_0_i;
   var $R_0_i;
   var $227=(($R_0_i+20)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228)|(0))==0;
   if ($229) { label = 43; break; } else { var $R_0_i = $228;var $RP_0_i = $227;label = 42; break; }
  case 43: 
   var $231=(($R_0_i+16)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==0;
   if ($233) { label = 44; break; } else { var $R_0_i = $232;var $RP_0_i = $231;label = 42; break; }
  case 44: 
   var $235=$RP_0_i;
   var $236=(($235)>>>(0)) < (($193)>>>(0));
   if ($236) { label = 46; break; } else { label = 45; break; }
  case 45: 
   HEAP32[(($RP_0_i)>>2)]=0;
   var $R_1_i = $R_0_i;label = 47; break;
  case 46: 
   _abort();
   throw "Reached an unreachable!";
  case 47: 
   var $R_1_i;
   var $240=(($201)|(0))==0;
   if ($240) { label = 67; break; } else { label = 48; break; }
  case 48: 
   var $242=(($v_0_i+28)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=((6072+($243<<2))|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($v_0_i)|(0))==(($245)|(0));
   if ($246) { label = 49; break; } else { label = 51; break; }
  case 49: 
   HEAP32[(($244)>>2)]=$R_1_i;
   var $cond_i=(($R_1_i)|(0))==0;
   if ($cond_i) { label = 50; break; } else { label = 57; break; }
  case 50: 
   var $248=HEAP32[(($242)>>2)];
   var $249=1 << $248;
   var $250=$249 ^ -1;
   var $251=HEAP32[((((5772)|0))>>2)];
   var $252=$251 & $250;
   HEAP32[((((5772)|0))>>2)]=$252;
   label = 67; break;
  case 51: 
   var $254=$201;
   var $255=HEAP32[((((5784)|0))>>2)];
   var $256=(($254)>>>(0)) < (($255)>>>(0));
   if ($256) { label = 55; break; } else { label = 52; break; }
  case 52: 
   var $258=(($201+16)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259)|(0))==(($v_0_i)|(0));
   if ($260) { label = 53; break; } else { label = 54; break; }
  case 53: 
   HEAP32[(($258)>>2)]=$R_1_i;
   label = 56; break;
  case 54: 
   var $263=(($201+20)|0);
   HEAP32[(($263)>>2)]=$R_1_i;
   label = 56; break;
  case 55: 
   _abort();
   throw "Reached an unreachable!";
  case 56: 
   var $266=(($R_1_i)|(0))==0;
   if ($266) { label = 67; break; } else { label = 57; break; }
  case 57: 
   var $268=$R_1_i;
   var $269=HEAP32[((((5784)|0))>>2)];
   var $270=(($268)>>>(0)) < (($269)>>>(0));
   if ($270) { label = 66; break; } else { label = 58; break; }
  case 58: 
   var $272=(($R_1_i+24)|0);
   HEAP32[(($272)>>2)]=$201;
   var $273=(($v_0_i+16)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($274)|(0))==0;
   if ($275) { label = 62; break; } else { label = 59; break; }
  case 59: 
   var $277=$274;
   var $278=HEAP32[((((5784)|0))>>2)];
   var $279=(($277)>>>(0)) < (($278)>>>(0));
   if ($279) { label = 61; break; } else { label = 60; break; }
  case 60: 
   var $281=(($R_1_i+16)|0);
   HEAP32[(($281)>>2)]=$274;
   var $282=(($274+24)|0);
   HEAP32[(($282)>>2)]=$R_1_i;
   label = 62; break;
  case 61: 
   _abort();
   throw "Reached an unreachable!";
  case 62: 
   var $285=(($v_0_i+20)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0))==0;
   if ($287) { label = 67; break; } else { label = 63; break; }
  case 63: 
   var $289=$286;
   var $290=HEAP32[((((5784)|0))>>2)];
   var $291=(($289)>>>(0)) < (($290)>>>(0));
   if ($291) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $293=(($R_1_i+20)|0);
   HEAP32[(($293)>>2)]=$286;
   var $294=(($286+24)|0);
   HEAP32[(($294)>>2)]=$R_1_i;
   label = 67; break;
  case 65: 
   _abort();
   throw "Reached an unreachable!";
  case 66: 
   _abort();
   throw "Reached an unreachable!";
  case 67: 
   var $298=(($rsize_0_i)>>>(0)) < 16;
   if ($298) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $300=((($rsize_0_i)+($8))|0);
   var $301=$300 | 3;
   var $302=(($v_0_i+4)|0);
   HEAP32[(($302)>>2)]=$301;
   var $_sum4_i=((($300)+(4))|0);
   var $303=(($192+$_sum4_i)|0);
   var $304=$303;
   var $305=HEAP32[(($304)>>2)];
   var $306=$305 | 1;
   HEAP32[(($304)>>2)]=$306;
   label = 77; break;
  case 69: 
   var $308=$8 | 3;
   var $309=(($v_0_i+4)|0);
   HEAP32[(($309)>>2)]=$308;
   var $310=$rsize_0_i | 1;
   var $_sum_i37=$8 | 4;
   var $311=(($192+$_sum_i37)|0);
   var $312=$311;
   HEAP32[(($312)>>2)]=$310;
   var $_sum1_i=((($rsize_0_i)+($8))|0);
   var $313=(($192+$_sum1_i)|0);
   var $314=$313;
   HEAP32[(($314)>>2)]=$rsize_0_i;
   var $315=HEAP32[((((5776)|0))>>2)];
   var $316=(($315)|(0))==0;
   if ($316) { label = 75; break; } else { label = 70; break; }
  case 70: 
   var $318=HEAP32[((((5788)|0))>>2)];
   var $319=$315 >>> 3;
   var $320=$319 << 1;
   var $321=((5808+($320<<2))|0);
   var $322=$321;
   var $323=HEAP32[((((5768)|0))>>2)];
   var $324=1 << $319;
   var $325=$323 & $324;
   var $326=(($325)|(0))==0;
   if ($326) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $328=$323 | $324;
   HEAP32[((((5768)|0))>>2)]=$328;
   var $_sum2_pre_i=((($320)+(2))|0);
   var $_pre_i=((5808+($_sum2_pre_i<<2))|0);
   var $F1_0_i = $322;var $_pre_phi_i = $_pre_i;label = 74; break;
  case 72: 
   var $_sum3_i=((($320)+(2))|0);
   var $330=((5808+($_sum3_i<<2))|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=$331;
   var $333=HEAP32[((((5784)|0))>>2)];
   var $334=(($332)>>>(0)) < (($333)>>>(0));
   if ($334) { label = 73; break; } else { var $F1_0_i = $331;var $_pre_phi_i = $330;label = 74; break; }
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $_pre_phi_i;
   var $F1_0_i;
   HEAP32[(($_pre_phi_i)>>2)]=$318;
   var $337=(($F1_0_i+12)|0);
   HEAP32[(($337)>>2)]=$318;
   var $338=(($318+8)|0);
   HEAP32[(($338)>>2)]=$F1_0_i;
   var $339=(($318+12)|0);
   HEAP32[(($339)>>2)]=$322;
   label = 75; break;
  case 75: 
   HEAP32[((((5776)|0))>>2)]=$rsize_0_i;
   HEAP32[((((5788)|0))>>2)]=$197;
   label = 77; break;
  case 76: 
   _abort();
   throw "Reached an unreachable!";
  case 77: 
   var $342=(($v_0_i+8)|0);
   var $343=$342;
   var $mem_0 = $343;label = 344; break;
  case 78: 
   var $345=(($bytes)>>>(0)) > 4294967231;
   if ($345) { var $nb_0 = -1;label = 161; break; } else { label = 79; break; }
  case 79: 
   var $347=((($bytes)+(11))|0);
   var $348=$347 & -8;
   var $349=HEAP32[((((5772)|0))>>2)];
   var $350=(($349)|(0))==0;
   if ($350) { var $nb_0 = $348;label = 161; break; } else { label = 80; break; }
  case 80: 
   var $352=(((-$348))|0);
   var $353=$347 >>> 8;
   var $354=(($353)|(0))==0;
   if ($354) { var $idx_0_i = 0;label = 83; break; } else { label = 81; break; }
  case 81: 
   var $356=(($348)>>>(0)) > 16777215;
   if ($356) { var $idx_0_i = 31;label = 83; break; } else { label = 82; break; }
  case 82: 
   var $358=((($353)+(1048320))|0);
   var $359=$358 >>> 16;
   var $360=$359 & 8;
   var $361=$353 << $360;
   var $362=((($361)+(520192))|0);
   var $363=$362 >>> 16;
   var $364=$363 & 4;
   var $365=$364 | $360;
   var $366=$361 << $364;
   var $367=((($366)+(245760))|0);
   var $368=$367 >>> 16;
   var $369=$368 & 2;
   var $370=$365 | $369;
   var $371=(((14)-($370))|0);
   var $372=$366 << $369;
   var $373=$372 >>> 15;
   var $374=((($371)+($373))|0);
   var $375=$374 << 1;
   var $376=((($374)+(7))|0);
   var $377=$348 >>> (($376)>>>(0));
   var $378=$377 & 1;
   var $379=$378 | $375;
   var $idx_0_i = $379;label = 83; break;
  case 83: 
   var $idx_0_i;
   var $381=((6072+($idx_0_i<<2))|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=(($382)|(0))==0;
   if ($383) { var $v_2_i = 0;var $rsize_2_i = $352;var $t_1_i = 0;label = 90; break; } else { label = 84; break; }
  case 84: 
   var $385=(($idx_0_i)|(0))==31;
   if ($385) { var $390 = 0;label = 86; break; } else { label = 85; break; }
  case 85: 
   var $387=$idx_0_i >>> 1;
   var $388=(((25)-($387))|0);
   var $390 = $388;label = 86; break;
  case 86: 
   var $390;
   var $391=$348 << $390;
   var $v_0_i18 = 0;var $rsize_0_i17 = $352;var $t_0_i16 = $382;var $sizebits_0_i = $391;var $rst_0_i = 0;label = 87; break;
  case 87: 
   var $rst_0_i;
   var $sizebits_0_i;
   var $t_0_i16;
   var $rsize_0_i17;
   var $v_0_i18;
   var $393=(($t_0_i16+4)|0);
   var $394=HEAP32[(($393)>>2)];
   var $395=$394 & -8;
   var $396=((($395)-($348))|0);
   var $397=(($396)>>>(0)) < (($rsize_0_i17)>>>(0));
   if ($397) { label = 88; break; } else { var $v_1_i = $v_0_i18;var $rsize_1_i = $rsize_0_i17;label = 89; break; }
  case 88: 
   var $399=(($395)|(0))==(($348)|(0));
   if ($399) { var $v_2_i = $t_0_i16;var $rsize_2_i = $396;var $t_1_i = $t_0_i16;label = 90; break; } else { var $v_1_i = $t_0_i16;var $rsize_1_i = $396;label = 89; break; }
  case 89: 
   var $rsize_1_i;
   var $v_1_i;
   var $401=(($t_0_i16+20)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=$sizebits_0_i >>> 31;
   var $404=(($t_0_i16+16+($403<<2))|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=(($402)|(0))==0;
   var $407=(($402)|(0))==(($405)|(0));
   var $or_cond_i=$406 | $407;
   var $rst_1_i=$or_cond_i ? $rst_0_i : $402;
   var $408=(($405)|(0))==0;
   var $409=$sizebits_0_i << 1;
   if ($408) { var $v_2_i = $v_1_i;var $rsize_2_i = $rsize_1_i;var $t_1_i = $rst_1_i;label = 90; break; } else { var $v_0_i18 = $v_1_i;var $rsize_0_i17 = $rsize_1_i;var $t_0_i16 = $405;var $sizebits_0_i = $409;var $rst_0_i = $rst_1_i;label = 87; break; }
  case 90: 
   var $t_1_i;
   var $rsize_2_i;
   var $v_2_i;
   var $410=(($t_1_i)|(0))==0;
   var $411=(($v_2_i)|(0))==0;
   var $or_cond21_i=$410 & $411;
   if ($or_cond21_i) { label = 91; break; } else { var $t_2_ph_i = $t_1_i;label = 93; break; }
  case 91: 
   var $413=2 << $idx_0_i;
   var $414=(((-$413))|0);
   var $415=$413 | $414;
   var $416=$349 & $415;
   var $417=(($416)|(0))==0;
   if ($417) { var $nb_0 = $348;label = 161; break; } else { label = 92; break; }
  case 92: 
   var $419=(((-$416))|0);
   var $420=$416 & $419;
   var $421=((($420)-(1))|0);
   var $422=$421 >>> 12;
   var $423=$422 & 16;
   var $424=$421 >>> (($423)>>>(0));
   var $425=$424 >>> 5;
   var $426=$425 & 8;
   var $427=$426 | $423;
   var $428=$424 >>> (($426)>>>(0));
   var $429=$428 >>> 2;
   var $430=$429 & 4;
   var $431=$427 | $430;
   var $432=$428 >>> (($430)>>>(0));
   var $433=$432 >>> 1;
   var $434=$433 & 2;
   var $435=$431 | $434;
   var $436=$432 >>> (($434)>>>(0));
   var $437=$436 >>> 1;
   var $438=$437 & 1;
   var $439=$435 | $438;
   var $440=$436 >>> (($438)>>>(0));
   var $441=((($439)+($440))|0);
   var $442=((6072+($441<<2))|0);
   var $443=HEAP32[(($442)>>2)];
   var $t_2_ph_i = $443;label = 93; break;
  case 93: 
   var $t_2_ph_i;
   var $444=(($t_2_ph_i)|(0))==0;
   if ($444) { var $rsize_3_lcssa_i = $rsize_2_i;var $v_3_lcssa_i = $v_2_i;label = 96; break; } else { var $t_230_i = $t_2_ph_i;var $rsize_331_i = $rsize_2_i;var $v_332_i = $v_2_i;label = 94; break; }
  case 94: 
   var $v_332_i;
   var $rsize_331_i;
   var $t_230_i;
   var $445=(($t_230_i+4)|0);
   var $446=HEAP32[(($445)>>2)];
   var $447=$446 & -8;
   var $448=((($447)-($348))|0);
   var $449=(($448)>>>(0)) < (($rsize_331_i)>>>(0));
   var $_rsize_3_i=$449 ? $448 : $rsize_331_i;
   var $t_2_v_3_i=$449 ? $t_230_i : $v_332_i;
   var $450=(($t_230_i+16)|0);
   var $451=HEAP32[(($450)>>2)];
   var $452=(($451)|(0))==0;
   if ($452) { label = 95; break; } else { var $t_230_i = $451;var $rsize_331_i = $_rsize_3_i;var $v_332_i = $t_2_v_3_i;label = 94; break; }
  case 95: 
   var $453=(($t_230_i+20)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=(($454)|(0))==0;
   if ($455) { var $rsize_3_lcssa_i = $_rsize_3_i;var $v_3_lcssa_i = $t_2_v_3_i;label = 96; break; } else { var $t_230_i = $454;var $rsize_331_i = $_rsize_3_i;var $v_332_i = $t_2_v_3_i;label = 94; break; }
  case 96: 
   var $v_3_lcssa_i;
   var $rsize_3_lcssa_i;
   var $456=(($v_3_lcssa_i)|(0))==0;
   if ($456) { var $nb_0 = $348;label = 161; break; } else { label = 97; break; }
  case 97: 
   var $458=HEAP32[((((5776)|0))>>2)];
   var $459=((($458)-($348))|0);
   var $460=(($rsize_3_lcssa_i)>>>(0)) < (($459)>>>(0));
   if ($460) { label = 98; break; } else { var $nb_0 = $348;label = 161; break; }
  case 98: 
   var $462=$v_3_lcssa_i;
   var $463=HEAP32[((((5784)|0))>>2)];
   var $464=(($462)>>>(0)) < (($463)>>>(0));
   if ($464) { label = 159; break; } else { label = 99; break; }
  case 99: 
   var $466=(($462+$348)|0);
   var $467=$466;
   var $468=(($462)>>>(0)) < (($466)>>>(0));
   if ($468) { label = 100; break; } else { label = 159; break; }
  case 100: 
   var $470=(($v_3_lcssa_i+24)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=(($v_3_lcssa_i+12)|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=(($473)|(0))==(($v_3_lcssa_i)|(0));
   if ($474) { label = 106; break; } else { label = 101; break; }
  case 101: 
   var $476=(($v_3_lcssa_i+8)|0);
   var $477=HEAP32[(($476)>>2)];
   var $478=$477;
   var $479=(($478)>>>(0)) < (($463)>>>(0));
   if ($479) { label = 105; break; } else { label = 102; break; }
  case 102: 
   var $481=(($477+12)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=(($482)|(0))==(($v_3_lcssa_i)|(0));
   if ($483) { label = 103; break; } else { label = 105; break; }
  case 103: 
   var $485=(($473+8)|0);
   var $486=HEAP32[(($485)>>2)];
   var $487=(($486)|(0))==(($v_3_lcssa_i)|(0));
   if ($487) { label = 104; break; } else { label = 105; break; }
  case 104: 
   HEAP32[(($481)>>2)]=$473;
   HEAP32[(($485)>>2)]=$477;
   var $R_1_i22 = $473;label = 113; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   var $490=(($v_3_lcssa_i+20)|0);
   var $491=HEAP32[(($490)>>2)];
   var $492=(($491)|(0))==0;
   if ($492) { label = 107; break; } else { var $R_0_i20 = $491;var $RP_0_i19 = $490;label = 108; break; }
  case 107: 
   var $494=(($v_3_lcssa_i+16)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=(($495)|(0))==0;
   if ($496) { var $R_1_i22 = 0;label = 113; break; } else { var $R_0_i20 = $495;var $RP_0_i19 = $494;label = 108; break; }
  case 108: 
   var $RP_0_i19;
   var $R_0_i20;
   var $497=(($R_0_i20+20)|0);
   var $498=HEAP32[(($497)>>2)];
   var $499=(($498)|(0))==0;
   if ($499) { label = 109; break; } else { var $R_0_i20 = $498;var $RP_0_i19 = $497;label = 108; break; }
  case 109: 
   var $501=(($R_0_i20+16)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=(($502)|(0))==0;
   if ($503) { label = 110; break; } else { var $R_0_i20 = $502;var $RP_0_i19 = $501;label = 108; break; }
  case 110: 
   var $505=$RP_0_i19;
   var $506=(($505)>>>(0)) < (($463)>>>(0));
   if ($506) { label = 112; break; } else { label = 111; break; }
  case 111: 
   HEAP32[(($RP_0_i19)>>2)]=0;
   var $R_1_i22 = $R_0_i20;label = 113; break;
  case 112: 
   _abort();
   throw "Reached an unreachable!";
  case 113: 
   var $R_1_i22;
   var $510=(($471)|(0))==0;
   if ($510) { label = 133; break; } else { label = 114; break; }
  case 114: 
   var $512=(($v_3_lcssa_i+28)|0);
   var $513=HEAP32[(($512)>>2)];
   var $514=((6072+($513<<2))|0);
   var $515=HEAP32[(($514)>>2)];
   var $516=(($v_3_lcssa_i)|(0))==(($515)|(0));
   if ($516) { label = 115; break; } else { label = 117; break; }
  case 115: 
   HEAP32[(($514)>>2)]=$R_1_i22;
   var $cond_i23=(($R_1_i22)|(0))==0;
   if ($cond_i23) { label = 116; break; } else { label = 123; break; }
  case 116: 
   var $518=HEAP32[(($512)>>2)];
   var $519=1 << $518;
   var $520=$519 ^ -1;
   var $521=HEAP32[((((5772)|0))>>2)];
   var $522=$521 & $520;
   HEAP32[((((5772)|0))>>2)]=$522;
   label = 133; break;
  case 117: 
   var $524=$471;
   var $525=HEAP32[((((5784)|0))>>2)];
   var $526=(($524)>>>(0)) < (($525)>>>(0));
   if ($526) { label = 121; break; } else { label = 118; break; }
  case 118: 
   var $528=(($471+16)|0);
   var $529=HEAP32[(($528)>>2)];
   var $530=(($529)|(0))==(($v_3_lcssa_i)|(0));
   if ($530) { label = 119; break; } else { label = 120; break; }
  case 119: 
   HEAP32[(($528)>>2)]=$R_1_i22;
   label = 122; break;
  case 120: 
   var $533=(($471+20)|0);
   HEAP32[(($533)>>2)]=$R_1_i22;
   label = 122; break;
  case 121: 
   _abort();
   throw "Reached an unreachable!";
  case 122: 
   var $536=(($R_1_i22)|(0))==0;
   if ($536) { label = 133; break; } else { label = 123; break; }
  case 123: 
   var $538=$R_1_i22;
   var $539=HEAP32[((((5784)|0))>>2)];
   var $540=(($538)>>>(0)) < (($539)>>>(0));
   if ($540) { label = 132; break; } else { label = 124; break; }
  case 124: 
   var $542=(($R_1_i22+24)|0);
   HEAP32[(($542)>>2)]=$471;
   var $543=(($v_3_lcssa_i+16)|0);
   var $544=HEAP32[(($543)>>2)];
   var $545=(($544)|(0))==0;
   if ($545) { label = 128; break; } else { label = 125; break; }
  case 125: 
   var $547=$544;
   var $548=HEAP32[((((5784)|0))>>2)];
   var $549=(($547)>>>(0)) < (($548)>>>(0));
   if ($549) { label = 127; break; } else { label = 126; break; }
  case 126: 
   var $551=(($R_1_i22+16)|0);
   HEAP32[(($551)>>2)]=$544;
   var $552=(($544+24)|0);
   HEAP32[(($552)>>2)]=$R_1_i22;
   label = 128; break;
  case 127: 
   _abort();
   throw "Reached an unreachable!";
  case 128: 
   var $555=(($v_3_lcssa_i+20)|0);
   var $556=HEAP32[(($555)>>2)];
   var $557=(($556)|(0))==0;
   if ($557) { label = 133; break; } else { label = 129; break; }
  case 129: 
   var $559=$556;
   var $560=HEAP32[((((5784)|0))>>2)];
   var $561=(($559)>>>(0)) < (($560)>>>(0));
   if ($561) { label = 131; break; } else { label = 130; break; }
  case 130: 
   var $563=(($R_1_i22+20)|0);
   HEAP32[(($563)>>2)]=$556;
   var $564=(($556+24)|0);
   HEAP32[(($564)>>2)]=$R_1_i22;
   label = 133; break;
  case 131: 
   _abort();
   throw "Reached an unreachable!";
  case 132: 
   _abort();
   throw "Reached an unreachable!";
  case 133: 
   var $568=(($rsize_3_lcssa_i)>>>(0)) < 16;
   if ($568) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $570=((($rsize_3_lcssa_i)+($348))|0);
   var $571=$570 | 3;
   var $572=(($v_3_lcssa_i+4)|0);
   HEAP32[(($572)>>2)]=$571;
   var $_sum19_i=((($570)+(4))|0);
   var $573=(($462+$_sum19_i)|0);
   var $574=$573;
   var $575=HEAP32[(($574)>>2)];
   var $576=$575 | 1;
   HEAP32[(($574)>>2)]=$576;
   label = 160; break;
  case 135: 
   var $578=$348 | 3;
   var $579=(($v_3_lcssa_i+4)|0);
   HEAP32[(($579)>>2)]=$578;
   var $580=$rsize_3_lcssa_i | 1;
   var $_sum_i2536=$348 | 4;
   var $581=(($462+$_sum_i2536)|0);
   var $582=$581;
   HEAP32[(($582)>>2)]=$580;
   var $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
   var $583=(($462+$_sum1_i26)|0);
   var $584=$583;
   HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
   var $585=$rsize_3_lcssa_i >>> 3;
   var $586=(($rsize_3_lcssa_i)>>>(0)) < 256;
   if ($586) { label = 136; break; } else { label = 141; break; }
  case 136: 
   var $588=$585 << 1;
   var $589=((5808+($588<<2))|0);
   var $590=$589;
   var $591=HEAP32[((((5768)|0))>>2)];
   var $592=1 << $585;
   var $593=$591 & $592;
   var $594=(($593)|(0))==0;
   if ($594) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $596=$591 | $592;
   HEAP32[((((5768)|0))>>2)]=$596;
   var $_sum15_pre_i=((($588)+(2))|0);
   var $_pre_i27=((5808+($_sum15_pre_i<<2))|0);
   var $F5_0_i = $590;var $_pre_phi_i28 = $_pre_i27;label = 140; break;
  case 138: 
   var $_sum18_i=((($588)+(2))|0);
   var $598=((5808+($_sum18_i<<2))|0);
   var $599=HEAP32[(($598)>>2)];
   var $600=$599;
   var $601=HEAP32[((((5784)|0))>>2)];
   var $602=(($600)>>>(0)) < (($601)>>>(0));
   if ($602) { label = 139; break; } else { var $F5_0_i = $599;var $_pre_phi_i28 = $598;label = 140; break; }
  case 139: 
   _abort();
   throw "Reached an unreachable!";
  case 140: 
   var $_pre_phi_i28;
   var $F5_0_i;
   HEAP32[(($_pre_phi_i28)>>2)]=$467;
   var $605=(($F5_0_i+12)|0);
   HEAP32[(($605)>>2)]=$467;
   var $_sum16_i=((($348)+(8))|0);
   var $606=(($462+$_sum16_i)|0);
   var $607=$606;
   HEAP32[(($607)>>2)]=$F5_0_i;
   var $_sum17_i=((($348)+(12))|0);
   var $608=(($462+$_sum17_i)|0);
   var $609=$608;
   HEAP32[(($609)>>2)]=$590;
   label = 160; break;
  case 141: 
   var $611=$466;
   var $612=$rsize_3_lcssa_i >>> 8;
   var $613=(($612)|(0))==0;
   if ($613) { var $I7_0_i = 0;label = 144; break; } else { label = 142; break; }
  case 142: 
   var $615=(($rsize_3_lcssa_i)>>>(0)) > 16777215;
   if ($615) { var $I7_0_i = 31;label = 144; break; } else { label = 143; break; }
  case 143: 
   var $617=((($612)+(1048320))|0);
   var $618=$617 >>> 16;
   var $619=$618 & 8;
   var $620=$612 << $619;
   var $621=((($620)+(520192))|0);
   var $622=$621 >>> 16;
   var $623=$622 & 4;
   var $624=$623 | $619;
   var $625=$620 << $623;
   var $626=((($625)+(245760))|0);
   var $627=$626 >>> 16;
   var $628=$627 & 2;
   var $629=$624 | $628;
   var $630=(((14)-($629))|0);
   var $631=$625 << $628;
   var $632=$631 >>> 15;
   var $633=((($630)+($632))|0);
   var $634=$633 << 1;
   var $635=((($633)+(7))|0);
   var $636=$rsize_3_lcssa_i >>> (($635)>>>(0));
   var $637=$636 & 1;
   var $638=$637 | $634;
   var $I7_0_i = $638;label = 144; break;
  case 144: 
   var $I7_0_i;
   var $640=((6072+($I7_0_i<<2))|0);
   var $_sum2_i=((($348)+(28))|0);
   var $641=(($462+$_sum2_i)|0);
   var $642=$641;
   HEAP32[(($642)>>2)]=$I7_0_i;
   var $_sum3_i29=((($348)+(16))|0);
   var $643=(($462+$_sum3_i29)|0);
   var $_sum4_i30=((($348)+(20))|0);
   var $644=(($462+$_sum4_i30)|0);
   var $645=$644;
   HEAP32[(($645)>>2)]=0;
   var $646=$643;
   HEAP32[(($646)>>2)]=0;
   var $647=HEAP32[((((5772)|0))>>2)];
   var $648=1 << $I7_0_i;
   var $649=$647 & $648;
   var $650=(($649)|(0))==0;
   if ($650) { label = 145; break; } else { label = 146; break; }
  case 145: 
   var $652=$647 | $648;
   HEAP32[((((5772)|0))>>2)]=$652;
   HEAP32[(($640)>>2)]=$611;
   var $653=$640;
   var $_sum5_i=((($348)+(24))|0);
   var $654=(($462+$_sum5_i)|0);
   var $655=$654;
   HEAP32[(($655)>>2)]=$653;
   var $_sum6_i=((($348)+(12))|0);
   var $656=(($462+$_sum6_i)|0);
   var $657=$656;
   HEAP32[(($657)>>2)]=$611;
   var $_sum7_i=((($348)+(8))|0);
   var $658=(($462+$_sum7_i)|0);
   var $659=$658;
   HEAP32[(($659)>>2)]=$611;
   label = 160; break;
  case 146: 
   var $661=HEAP32[(($640)>>2)];
   var $662=(($I7_0_i)|(0))==31;
   if ($662) { var $667 = 0;label = 148; break; } else { label = 147; break; }
  case 147: 
   var $664=$I7_0_i >>> 1;
   var $665=(((25)-($664))|0);
   var $667 = $665;label = 148; break;
  case 148: 
   var $667;
   var $668=(($661+4)|0);
   var $669=HEAP32[(($668)>>2)];
   var $670=$669 & -8;
   var $671=(($670)|(0))==(($rsize_3_lcssa_i)|(0));
   if ($671) { var $T_0_lcssa_i = $661;label = 155; break; } else { label = 149; break; }
  case 149: 
   var $672=$rsize_3_lcssa_i << $667;
   var $T_026_i = $661;var $K12_027_i = $672;label = 151; break;
  case 150: 
   var $674=$K12_027_i << 1;
   var $675=(($682+4)|0);
   var $676=HEAP32[(($675)>>2)];
   var $677=$676 & -8;
   var $678=(($677)|(0))==(($rsize_3_lcssa_i)|(0));
   if ($678) { var $T_0_lcssa_i = $682;label = 155; break; } else { var $T_026_i = $682;var $K12_027_i = $674;label = 151; break; }
  case 151: 
   var $K12_027_i;
   var $T_026_i;
   var $680=$K12_027_i >>> 31;
   var $681=(($T_026_i+16+($680<<2))|0);
   var $682=HEAP32[(($681)>>2)];
   var $683=(($682)|(0))==0;
   if ($683) { label = 152; break; } else { label = 150; break; }
  case 152: 
   var $685=$681;
   var $686=HEAP32[((((5784)|0))>>2)];
   var $687=(($685)>>>(0)) < (($686)>>>(0));
   if ($687) { label = 154; break; } else { label = 153; break; }
  case 153: 
   HEAP32[(($681)>>2)]=$611;
   var $_sum12_i=((($348)+(24))|0);
   var $689=(($462+$_sum12_i)|0);
   var $690=$689;
   HEAP32[(($690)>>2)]=$T_026_i;
   var $_sum13_i=((($348)+(12))|0);
   var $691=(($462+$_sum13_i)|0);
   var $692=$691;
   HEAP32[(($692)>>2)]=$611;
   var $_sum14_i=((($348)+(8))|0);
   var $693=(($462+$_sum14_i)|0);
   var $694=$693;
   HEAP32[(($694)>>2)]=$611;
   label = 160; break;
  case 154: 
   _abort();
   throw "Reached an unreachable!";
  case 155: 
   var $T_0_lcssa_i;
   var $696=(($T_0_lcssa_i+8)|0);
   var $697=HEAP32[(($696)>>2)];
   var $698=$T_0_lcssa_i;
   var $699=HEAP32[((((5784)|0))>>2)];
   var $700=(($698)>>>(0)) < (($699)>>>(0));
   if ($700) { label = 158; break; } else { label = 156; break; }
  case 156: 
   var $702=$697;
   var $703=(($702)>>>(0)) < (($699)>>>(0));
   if ($703) { label = 158; break; } else { label = 157; break; }
  case 157: 
   var $705=(($697+12)|0);
   HEAP32[(($705)>>2)]=$611;
   HEAP32[(($696)>>2)]=$611;
   var $_sum9_i=((($348)+(8))|0);
   var $706=(($462+$_sum9_i)|0);
   var $707=$706;
   HEAP32[(($707)>>2)]=$697;
   var $_sum10_i=((($348)+(12))|0);
   var $708=(($462+$_sum10_i)|0);
   var $709=$708;
   HEAP32[(($709)>>2)]=$T_0_lcssa_i;
   var $_sum11_i=((($348)+(24))|0);
   var $710=(($462+$_sum11_i)|0);
   var $711=$710;
   HEAP32[(($711)>>2)]=0;
   label = 160; break;
  case 158: 
   _abort();
   throw "Reached an unreachable!";
  case 159: 
   _abort();
   throw "Reached an unreachable!";
  case 160: 
   var $713=(($v_3_lcssa_i+8)|0);
   var $714=$713;
   var $mem_0 = $714;label = 344; break;
  case 161: 
   var $nb_0;
   var $715=HEAP32[((((5776)|0))>>2)];
   var $716=(($nb_0)>>>(0)) > (($715)>>>(0));
   if ($716) { label = 166; break; } else { label = 162; break; }
  case 162: 
   var $718=((($715)-($nb_0))|0);
   var $719=HEAP32[((((5788)|0))>>2)];
   var $720=(($718)>>>(0)) > 15;
   if ($720) { label = 163; break; } else { label = 164; break; }
  case 163: 
   var $722=$719;
   var $723=(($722+$nb_0)|0);
   var $724=$723;
   HEAP32[((((5788)|0))>>2)]=$724;
   HEAP32[((((5776)|0))>>2)]=$718;
   var $725=$718 | 1;
   var $_sum2=((($nb_0)+(4))|0);
   var $726=(($722+$_sum2)|0);
   var $727=$726;
   HEAP32[(($727)>>2)]=$725;
   var $728=(($722+$715)|0);
   var $729=$728;
   HEAP32[(($729)>>2)]=$718;
   var $730=$nb_0 | 3;
   var $731=(($719+4)|0);
   HEAP32[(($731)>>2)]=$730;
   label = 165; break;
  case 164: 
   HEAP32[((((5776)|0))>>2)]=0;
   HEAP32[((((5788)|0))>>2)]=0;
   var $733=$715 | 3;
   var $734=(($719+4)|0);
   HEAP32[(($734)>>2)]=$733;
   var $735=$719;
   var $_sum1=((($715)+(4))|0);
   var $736=(($735+$_sum1)|0);
   var $737=$736;
   var $738=HEAP32[(($737)>>2)];
   var $739=$738 | 1;
   HEAP32[(($737)>>2)]=$739;
   label = 165; break;
  case 165: 
   var $741=(($719+8)|0);
   var $742=$741;
   var $mem_0 = $742;label = 344; break;
  case 166: 
   var $744=HEAP32[((((5780)|0))>>2)];
   var $745=(($nb_0)>>>(0)) < (($744)>>>(0));
   if ($745) { label = 167; break; } else { label = 168; break; }
  case 167: 
   var $747=((($744)-($nb_0))|0);
   HEAP32[((((5780)|0))>>2)]=$747;
   var $748=HEAP32[((((5792)|0))>>2)];
   var $749=$748;
   var $750=(($749+$nb_0)|0);
   var $751=$750;
   HEAP32[((((5792)|0))>>2)]=$751;
   var $752=$747 | 1;
   var $_sum=((($nb_0)+(4))|0);
   var $753=(($749+$_sum)|0);
   var $754=$753;
   HEAP32[(($754)>>2)]=$752;
   var $755=$nb_0 | 3;
   var $756=(($748+4)|0);
   HEAP32[(($756)>>2)]=$755;
   var $757=(($748+8)|0);
   var $758=$757;
   var $mem_0 = $758;label = 344; break;
  case 168: 
   var $760=HEAP32[((((4672)|0))>>2)];
   var $761=(($760)|(0))==0;
   if ($761) { label = 169; break; } else { label = 172; break; }
  case 169: 
   var $763=_sysconf(8);
   var $764=((($763)-(1))|0);
   var $765=$764 & $763;
   var $766=(($765)|(0))==0;
   if ($766) { label = 171; break; } else { label = 170; break; }
  case 170: 
   _abort();
   throw "Reached an unreachable!";
  case 171: 
   HEAP32[((((4680)|0))>>2)]=$763;
   HEAP32[((((4676)|0))>>2)]=$763;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $768=_time(0);
   var $769=$768 & -16;
   var $770=$769 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$770;
   label = 172; break;
  case 172: 
   var $772=((($nb_0)+(48))|0);
   var $773=HEAP32[((((4680)|0))>>2)];
   var $774=((($nb_0)+(47))|0);
   var $775=((($773)+($774))|0);
   var $776=(((-$773))|0);
   var $777=$775 & $776;
   var $778=(($777)>>>(0)) > (($nb_0)>>>(0));
   if ($778) { label = 173; break; } else { var $mem_0 = 0;label = 344; break; }
  case 173: 
   var $780=HEAP32[((((6208)|0))>>2)];
   var $781=(($780)|(0))==0;
   if ($781) { label = 175; break; } else { label = 174; break; }
  case 174: 
   var $783=HEAP32[((((6200)|0))>>2)];
   var $784=((($783)+($777))|0);
   var $785=(($784)>>>(0)) <= (($783)>>>(0));
   var $786=(($784)>>>(0)) > (($780)>>>(0));
   var $or_cond1_i=$785 | $786;
   if ($or_cond1_i) { var $mem_0 = 0;label = 344; break; } else { label = 175; break; }
  case 175: 
   var $788=HEAP32[((((6212)|0))>>2)];
   var $789=$788 & 4;
   var $790=(($789)|(0))==0;
   if ($790) { label = 176; break; } else { var $tsize_1_i = 0;label = 199; break; }
  case 176: 
   var $792=HEAP32[((((5792)|0))>>2)];
   var $793=(($792)|(0))==0;
   if ($793) { label = 182; break; } else { label = 177; break; }
  case 177: 
   var $795=$792;
   var $sp_0_i_i = ((6216)|0);label = 178; break;
  case 178: 
   var $sp_0_i_i;
   var $797=(($sp_0_i_i)|0);
   var $798=HEAP32[(($797)>>2)];
   var $799=(($798)>>>(0)) > (($795)>>>(0));
   if ($799) { label = 180; break; } else { label = 179; break; }
  case 179: 
   var $801=(($sp_0_i_i+4)|0);
   var $802=HEAP32[(($801)>>2)];
   var $803=(($798+$802)|0);
   var $804=(($803)>>>(0)) > (($795)>>>(0));
   if ($804) { label = 181; break; } else { label = 180; break; }
  case 180: 
   var $806=(($sp_0_i_i+8)|0);
   var $807=HEAP32[(($806)>>2)];
   var $808=(($807)|(0))==0;
   if ($808) { label = 182; break; } else { var $sp_0_i_i = $807;label = 178; break; }
  case 181: 
   var $809=(($sp_0_i_i)|(0))==0;
   if ($809) { label = 182; break; } else { label = 189; break; }
  case 182: 
   var $810=_sbrk(0);
   var $811=(($810)|(0))==-1;
   if ($811) { var $tsize_0323841_i = 0;label = 198; break; } else { label = 183; break; }
  case 183: 
   var $813=$810;
   var $814=HEAP32[((((4676)|0))>>2)];
   var $815=((($814)-(1))|0);
   var $816=$815 & $813;
   var $817=(($816)|(0))==0;
   if ($817) { var $ssize_0_i = $777;label = 185; break; } else { label = 184; break; }
  case 184: 
   var $819=((($815)+($813))|0);
   var $820=(((-$814))|0);
   var $821=$819 & $820;
   var $822=((($777)-($813))|0);
   var $823=((($822)+($821))|0);
   var $ssize_0_i = $823;label = 185; break;
  case 185: 
   var $ssize_0_i;
   var $825=HEAP32[((((6200)|0))>>2)];
   var $826=((($825)+($ssize_0_i))|0);
   var $827=(($ssize_0_i)>>>(0)) > (($nb_0)>>>(0));
   var $828=(($ssize_0_i)>>>(0)) < 2147483647;
   var $or_cond_i31=$827 & $828;
   if ($or_cond_i31) { label = 186; break; } else { var $tsize_0323841_i = 0;label = 198; break; }
  case 186: 
   var $830=HEAP32[((((6208)|0))>>2)];
   var $831=(($830)|(0))==0;
   if ($831) { label = 188; break; } else { label = 187; break; }
  case 187: 
   var $833=(($826)>>>(0)) <= (($825)>>>(0));
   var $834=(($826)>>>(0)) > (($830)>>>(0));
   var $or_cond2_i=$833 | $834;
   if ($or_cond2_i) { var $tsize_0323841_i = 0;label = 198; break; } else { label = 188; break; }
  case 188: 
   var $836=_sbrk($ssize_0_i);
   var $837=(($836)|(0))==(($810)|(0));
   var $ssize_0__i=$837 ? $ssize_0_i : 0;
   var $__i=$837 ? $810 : -1;
   var $tbase_0_i = $__i;var $tsize_0_i = $ssize_0__i;var $br_0_i = $836;var $ssize_1_i = $ssize_0_i;label = 191; break;
  case 189: 
   var $839=HEAP32[((((5780)|0))>>2)];
   var $840=((($775)-($839))|0);
   var $841=$840 & $776;
   var $842=(($841)>>>(0)) < 2147483647;
   if ($842) { label = 190; break; } else { var $tsize_0323841_i = 0;label = 198; break; }
  case 190: 
   var $844=_sbrk($841);
   var $845=HEAP32[(($797)>>2)];
   var $846=HEAP32[(($801)>>2)];
   var $847=(($845+$846)|0);
   var $848=(($844)|(0))==(($847)|(0));
   var $_3_i=$848 ? $841 : 0;
   var $_4_i=$848 ? $844 : -1;
   var $tbase_0_i = $_4_i;var $tsize_0_i = $_3_i;var $br_0_i = $844;var $ssize_1_i = $841;label = 191; break;
  case 191: 
   var $ssize_1_i;
   var $br_0_i;
   var $tsize_0_i;
   var $tbase_0_i;
   var $850=(((-$ssize_1_i))|0);
   var $851=(($tbase_0_i)|(0))==-1;
   if ($851) { label = 192; break; } else { var $tsize_246_i = $tsize_0_i;var $tbase_247_i = $tbase_0_i;label = 202; break; }
  case 192: 
   var $853=(($br_0_i)|(0))!=-1;
   var $854=(($ssize_1_i)>>>(0)) < 2147483647;
   var $or_cond5_i=$853 & $854;
   var $855=(($ssize_1_i)>>>(0)) < (($772)>>>(0));
   var $or_cond6_i=$or_cond5_i & $855;
   if ($or_cond6_i) { label = 193; break; } else { var $ssize_2_i = $ssize_1_i;label = 197; break; }
  case 193: 
   var $857=HEAP32[((((4680)|0))>>2)];
   var $858=((($774)-($ssize_1_i))|0);
   var $859=((($858)+($857))|0);
   var $860=(((-$857))|0);
   var $861=$859 & $860;
   var $862=(($861)>>>(0)) < 2147483647;
   if ($862) { label = 194; break; } else { var $ssize_2_i = $ssize_1_i;label = 197; break; }
  case 194: 
   var $864=_sbrk($861);
   var $865=(($864)|(0))==-1;
   if ($865) { label = 196; break; } else { label = 195; break; }
  case 195: 
   var $867=((($861)+($ssize_1_i))|0);
   var $ssize_2_i = $867;label = 197; break;
  case 196: 
   var $869=_sbrk($850);
   var $tsize_0323841_i = $tsize_0_i;label = 198; break;
  case 197: 
   var $ssize_2_i;
   var $871=(($br_0_i)|(0))==-1;
   if ($871) { var $tsize_0323841_i = $tsize_0_i;label = 198; break; } else { var $tsize_246_i = $ssize_2_i;var $tbase_247_i = $br_0_i;label = 202; break; }
  case 198: 
   var $tsize_0323841_i;
   var $872=HEAP32[((((6212)|0))>>2)];
   var $873=$872 | 4;
   HEAP32[((((6212)|0))>>2)]=$873;
   var $tsize_1_i = $tsize_0323841_i;label = 199; break;
  case 199: 
   var $tsize_1_i;
   var $875=(($777)>>>(0)) < 2147483647;
   if ($875) { label = 200; break; } else { label = 343; break; }
  case 200: 
   var $877=_sbrk($777);
   var $878=_sbrk(0);
   var $notlhs_i=(($877)|(0))!=-1;
   var $notrhs_i=(($878)|(0))!=-1;
   var $or_cond8_not_i=$notrhs_i & $notlhs_i;
   var $879=(($877)>>>(0)) < (($878)>>>(0));
   var $or_cond9_i=$or_cond8_not_i & $879;
   if ($or_cond9_i) { label = 201; break; } else { label = 343; break; }
  case 201: 
   var $880=$878;
   var $881=$877;
   var $882=((($880)-($881))|0);
   var $883=((($nb_0)+(40))|0);
   var $884=(($882)>>>(0)) > (($883)>>>(0));
   var $_tsize_1_i=$884 ? $882 : $tsize_1_i;
   if ($884) { var $tsize_246_i = $_tsize_1_i;var $tbase_247_i = $877;label = 202; break; } else { label = 343; break; }
  case 202: 
   var $tbase_247_i;
   var $tsize_246_i;
   var $885=HEAP32[((((6200)|0))>>2)];
   var $886=((($885)+($tsize_246_i))|0);
   HEAP32[((((6200)|0))>>2)]=$886;
   var $887=HEAP32[((((6204)|0))>>2)];
   var $888=(($886)>>>(0)) > (($887)>>>(0));
   if ($888) { label = 203; break; } else { label = 204; break; }
  case 203: 
   HEAP32[((((6204)|0))>>2)]=$886;
   label = 204; break;
  case 204: 
   var $890=HEAP32[((((5792)|0))>>2)];
   var $891=(($890)|(0))==0;
   if ($891) { label = 205; break; } else { var $sp_075_i = ((6216)|0);label = 212; break; }
  case 205: 
   var $893=HEAP32[((((5784)|0))>>2)];
   var $894=(($893)|(0))==0;
   var $895=(($tbase_247_i)>>>(0)) < (($893)>>>(0));
   var $or_cond10_i=$894 | $895;
   if ($or_cond10_i) { label = 206; break; } else { label = 207; break; }
  case 206: 
   HEAP32[((((5784)|0))>>2)]=$tbase_247_i;
   label = 207; break;
  case 207: 
   HEAP32[((((6216)|0))>>2)]=$tbase_247_i;
   HEAP32[((((6220)|0))>>2)]=$tsize_246_i;
   HEAP32[((((6228)|0))>>2)]=0;
   var $897=HEAP32[((((4672)|0))>>2)];
   HEAP32[((((5804)|0))>>2)]=$897;
   HEAP32[((((5800)|0))>>2)]=-1;
   var $i_02_i_i = 0;label = 208; break;
  case 208: 
   var $i_02_i_i;
   var $899=$i_02_i_i << 1;
   var $900=((5808+($899<<2))|0);
   var $901=$900;
   var $_sum_i_i=((($899)+(3))|0);
   var $902=((5808+($_sum_i_i<<2))|0);
   HEAP32[(($902)>>2)]=$901;
   var $_sum1_i_i=((($899)+(2))|0);
   var $903=((5808+($_sum1_i_i<<2))|0);
   HEAP32[(($903)>>2)]=$901;
   var $904=((($i_02_i_i)+(1))|0);
   var $905=(($904)>>>(0)) < 32;
   if ($905) { var $i_02_i_i = $904;label = 208; break; } else { label = 209; break; }
  case 209: 
   var $906=((($tsize_246_i)-(40))|0);
   var $907=(($tbase_247_i+8)|0);
   var $908=$907;
   var $909=$908 & 7;
   var $910=(($909)|(0))==0;
   if ($910) { var $914 = 0;label = 211; break; } else { label = 210; break; }
  case 210: 
   var $912=(((-$908))|0);
   var $913=$912 & 7;
   var $914 = $913;label = 211; break;
  case 211: 
   var $914;
   var $915=(($tbase_247_i+$914)|0);
   var $916=$915;
   var $917=((($906)-($914))|0);
   HEAP32[((((5792)|0))>>2)]=$916;
   HEAP32[((((5780)|0))>>2)]=$917;
   var $918=$917 | 1;
   var $_sum_i14_i=((($914)+(4))|0);
   var $919=(($tbase_247_i+$_sum_i14_i)|0);
   var $920=$919;
   HEAP32[(($920)>>2)]=$918;
   var $_sum2_i_i=((($tsize_246_i)-(36))|0);
   var $921=(($tbase_247_i+$_sum2_i_i)|0);
   var $922=$921;
   HEAP32[(($922)>>2)]=40;
   var $923=HEAP32[((((4688)|0))>>2)];
   HEAP32[((((5796)|0))>>2)]=$923;
   label = 341; break;
  case 212: 
   var $sp_075_i;
   var $924=(($sp_075_i)|0);
   var $925=HEAP32[(($924)>>2)];
   var $926=(($sp_075_i+4)|0);
   var $927=HEAP32[(($926)>>2)];
   var $928=(($925+$927)|0);
   var $929=(($tbase_247_i)|(0))==(($928)|(0));
   if ($929) { label = 214; break; } else { label = 213; break; }
  case 213: 
   var $931=(($sp_075_i+8)|0);
   var $932=HEAP32[(($931)>>2)];
   var $933=(($932)|(0))==0;
   if ($933) { label = 219; break; } else { var $sp_075_i = $932;label = 212; break; }
  case 214: 
   var $934=(($sp_075_i+12)|0);
   var $935=HEAP32[(($934)>>2)];
   var $936=$935 & 8;
   var $937=(($936)|(0))==0;
   if ($937) { label = 215; break; } else { label = 219; break; }
  case 215: 
   var $939=$890;
   var $940=(($939)>>>(0)) >= (($925)>>>(0));
   var $941=(($939)>>>(0)) < (($tbase_247_i)>>>(0));
   var $or_cond49_i=$940 & $941;
   if ($or_cond49_i) { label = 216; break; } else { label = 219; break; }
  case 216: 
   var $943=((($927)+($tsize_246_i))|0);
   HEAP32[(($926)>>2)]=$943;
   var $944=HEAP32[((((5792)|0))>>2)];
   var $945=HEAP32[((((5780)|0))>>2)];
   var $946=((($945)+($tsize_246_i))|0);
   var $947=$944;
   var $948=(($944+8)|0);
   var $949=$948;
   var $950=$949 & 7;
   var $951=(($950)|(0))==0;
   if ($951) { var $955 = 0;label = 218; break; } else { label = 217; break; }
  case 217: 
   var $953=(((-$949))|0);
   var $954=$953 & 7;
   var $955 = $954;label = 218; break;
  case 218: 
   var $955;
   var $956=(($947+$955)|0);
   var $957=$956;
   var $958=((($946)-($955))|0);
   HEAP32[((((5792)|0))>>2)]=$957;
   HEAP32[((((5780)|0))>>2)]=$958;
   var $959=$958 | 1;
   var $_sum_i18_i=((($955)+(4))|0);
   var $960=(($947+$_sum_i18_i)|0);
   var $961=$960;
   HEAP32[(($961)>>2)]=$959;
   var $_sum2_i19_i=((($946)+(4))|0);
   var $962=(($947+$_sum2_i19_i)|0);
   var $963=$962;
   HEAP32[(($963)>>2)]=40;
   var $964=HEAP32[((((4688)|0))>>2)];
   HEAP32[((((5796)|0))>>2)]=$964;
   label = 341; break;
  case 219: 
   var $965=HEAP32[((((5784)|0))>>2)];
   var $966=(($tbase_247_i)>>>(0)) < (($965)>>>(0));
   if ($966) { label = 220; break; } else { label = 221; break; }
  case 220: 
   HEAP32[((((5784)|0))>>2)]=$tbase_247_i;
   label = 221; break;
  case 221: 
   var $968=(($tbase_247_i+$tsize_246_i)|0);
   var $sp_168_i = ((6216)|0);label = 222; break;
  case 222: 
   var $sp_168_i;
   var $970=(($sp_168_i)|0);
   var $971=HEAP32[(($970)>>2)];
   var $972=(($971)|(0))==(($968)|(0));
   if ($972) { label = 224; break; } else { label = 223; break; }
  case 223: 
   var $974=(($sp_168_i+8)|0);
   var $975=HEAP32[(($974)>>2)];
   var $976=(($975)|(0))==0;
   if ($976) { label = 306; break; } else { var $sp_168_i = $975;label = 222; break; }
  case 224: 
   var $977=(($sp_168_i+12)|0);
   var $978=HEAP32[(($977)>>2)];
   var $979=$978 & 8;
   var $980=(($979)|(0))==0;
   if ($980) { label = 225; break; } else { label = 306; break; }
  case 225: 
   HEAP32[(($970)>>2)]=$tbase_247_i;
   var $982=(($sp_168_i+4)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=((($983)+($tsize_246_i))|0);
   HEAP32[(($982)>>2)]=$984;
   var $985=(($tbase_247_i+8)|0);
   var $986=$985;
   var $987=$986 & 7;
   var $988=(($987)|(0))==0;
   if ($988) { var $993 = 0;label = 227; break; } else { label = 226; break; }
  case 226: 
   var $990=(((-$986))|0);
   var $991=$990 & 7;
   var $993 = $991;label = 227; break;
  case 227: 
   var $993;
   var $994=(($tbase_247_i+$993)|0);
   var $_sum107_i=((($tsize_246_i)+(8))|0);
   var $995=(($tbase_247_i+$_sum107_i)|0);
   var $996=$995;
   var $997=$996 & 7;
   var $998=(($997)|(0))==0;
   if ($998) { var $1003 = 0;label = 229; break; } else { label = 228; break; }
  case 228: 
   var $1000=(((-$996))|0);
   var $1001=$1000 & 7;
   var $1003 = $1001;label = 229; break;
  case 229: 
   var $1003;
   var $_sum108_i=((($1003)+($tsize_246_i))|0);
   var $1004=(($tbase_247_i+$_sum108_i)|0);
   var $1005=$1004;
   var $1006=$1004;
   var $1007=$994;
   var $1008=((($1006)-($1007))|0);
   var $_sum_i21_i=((($993)+($nb_0))|0);
   var $1009=(($tbase_247_i+$_sum_i21_i)|0);
   var $1010=$1009;
   var $1011=((($1008)-($nb_0))|0);
   var $1012=$nb_0 | 3;
   var $_sum1_i22_i=((($993)+(4))|0);
   var $1013=(($tbase_247_i+$_sum1_i22_i)|0);
   var $1014=$1013;
   HEAP32[(($1014)>>2)]=$1012;
   var $1015=HEAP32[((((5792)|0))>>2)];
   var $1016=(($1005)|(0))==(($1015)|(0));
   if ($1016) { label = 230; break; } else { label = 231; break; }
  case 230: 
   var $1018=HEAP32[((((5780)|0))>>2)];
   var $1019=((($1018)+($1011))|0);
   HEAP32[((((5780)|0))>>2)]=$1019;
   HEAP32[((((5792)|0))>>2)]=$1010;
   var $1020=$1019 | 1;
   var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
   var $1021=(($tbase_247_i+$_sum46_i_i)|0);
   var $1022=$1021;
   HEAP32[(($1022)>>2)]=$1020;
   label = 305; break;
  case 231: 
   var $1024=HEAP32[((((5788)|0))>>2)];
   var $1025=(($1005)|(0))==(($1024)|(0));
   if ($1025) { label = 232; break; } else { label = 233; break; }
  case 232: 
   var $1027=HEAP32[((((5776)|0))>>2)];
   var $1028=((($1027)+($1011))|0);
   HEAP32[((((5776)|0))>>2)]=$1028;
   HEAP32[((((5788)|0))>>2)]=$1010;
   var $1029=$1028 | 1;
   var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
   var $1030=(($tbase_247_i+$_sum44_i_i)|0);
   var $1031=$1030;
   HEAP32[(($1031)>>2)]=$1029;
   var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
   var $1032=(($tbase_247_i+$_sum45_i_i)|0);
   var $1033=$1032;
   HEAP32[(($1033)>>2)]=$1028;
   label = 305; break;
  case 233: 
   var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
   var $_sum109_i=((($_sum2_i23_i)+($1003))|0);
   var $1035=(($tbase_247_i+$_sum109_i)|0);
   var $1036=$1035;
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=$1037 & 3;
   var $1039=(($1038)|(0))==1;
   if ($1039) { label = 234; break; } else { var $oldfirst_0_i_i = $1005;var $qsize_0_i_i = $1011;label = 281; break; }
  case 234: 
   var $1041=$1037 & -8;
   var $1042=$1037 >>> 3;
   var $1043=(($1037)>>>(0)) < 256;
   if ($1043) { label = 235; break; } else { label = 247; break; }
  case 235: 
   var $_sum3940_i_i=$1003 | 8;
   var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
   var $1045=(($tbase_247_i+$_sum119_i)|0);
   var $1046=$1045;
   var $1047=HEAP32[(($1046)>>2)];
   var $_sum41_i_i=((($tsize_246_i)+(12))|0);
   var $_sum120_i=((($_sum41_i_i)+($1003))|0);
   var $1048=(($tbase_247_i+$_sum120_i)|0);
   var $1049=$1048;
   var $1050=HEAP32[(($1049)>>2)];
   var $1051=$1042 << 1;
   var $1052=((5808+($1051<<2))|0);
   var $1053=$1052;
   var $1054=(($1047)|(0))==(($1053)|(0));
   if ($1054) { label = 238; break; } else { label = 236; break; }
  case 236: 
   var $1056=$1047;
   var $1057=HEAP32[((((5784)|0))>>2)];
   var $1058=(($1056)>>>(0)) < (($1057)>>>(0));
   if ($1058) { label = 246; break; } else { label = 237; break; }
  case 237: 
   var $1060=(($1047+12)|0);
   var $1061=HEAP32[(($1060)>>2)];
   var $1062=(($1061)|(0))==(($1005)|(0));
   if ($1062) { label = 238; break; } else { label = 246; break; }
  case 238: 
   var $1063=(($1050)|(0))==(($1047)|(0));
   if ($1063) { label = 239; break; } else { label = 240; break; }
  case 239: 
   var $1065=1 << $1042;
   var $1066=$1065 ^ -1;
   var $1067=HEAP32[((((5768)|0))>>2)];
   var $1068=$1067 & $1066;
   HEAP32[((((5768)|0))>>2)]=$1068;
   label = 280; break;
  case 240: 
   var $1070=(($1050)|(0))==(($1053)|(0));
   if ($1070) { label = 241; break; } else { label = 242; break; }
  case 241: 
   var $_pre61_i_i=(($1050+8)|0);
   var $_pre_phi62_i_i = $_pre61_i_i;label = 244; break;
  case 242: 
   var $1072=$1050;
   var $1073=HEAP32[((((5784)|0))>>2)];
   var $1074=(($1072)>>>(0)) < (($1073)>>>(0));
   if ($1074) { label = 245; break; } else { label = 243; break; }
  case 243: 
   var $1076=(($1050+8)|0);
   var $1077=HEAP32[(($1076)>>2)];
   var $1078=(($1077)|(0))==(($1005)|(0));
   if ($1078) { var $_pre_phi62_i_i = $1076;label = 244; break; } else { label = 245; break; }
  case 244: 
   var $_pre_phi62_i_i;
   var $1079=(($1047+12)|0);
   HEAP32[(($1079)>>2)]=$1050;
   HEAP32[(($_pre_phi62_i_i)>>2)]=$1047;
   label = 280; break;
  case 245: 
   _abort();
   throw "Reached an unreachable!";
  case 246: 
   _abort();
   throw "Reached an unreachable!";
  case 247: 
   var $1081=$1004;
   var $_sum34_i_i=$1003 | 24;
   var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
   var $1082=(($tbase_247_i+$_sum110_i)|0);
   var $1083=$1082;
   var $1084=HEAP32[(($1083)>>2)];
   var $_sum5_i_i=((($tsize_246_i)+(12))|0);
   var $_sum111_i=((($_sum5_i_i)+($1003))|0);
   var $1085=(($tbase_247_i+$_sum111_i)|0);
   var $1086=$1085;
   var $1087=HEAP32[(($1086)>>2)];
   var $1088=(($1087)|(0))==(($1081)|(0));
   if ($1088) { label = 253; break; } else { label = 248; break; }
  case 248: 
   var $_sum3637_i_i=$1003 | 8;
   var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
   var $1090=(($tbase_247_i+$_sum112_i)|0);
   var $1091=$1090;
   var $1092=HEAP32[(($1091)>>2)];
   var $1093=$1092;
   var $1094=HEAP32[((((5784)|0))>>2)];
   var $1095=(($1093)>>>(0)) < (($1094)>>>(0));
   if ($1095) { label = 252; break; } else { label = 249; break; }
  case 249: 
   var $1097=(($1092+12)|0);
   var $1098=HEAP32[(($1097)>>2)];
   var $1099=(($1098)|(0))==(($1081)|(0));
   if ($1099) { label = 250; break; } else { label = 252; break; }
  case 250: 
   var $1101=(($1087+8)|0);
   var $1102=HEAP32[(($1101)>>2)];
   var $1103=(($1102)|(0))==(($1081)|(0));
   if ($1103) { label = 251; break; } else { label = 252; break; }
  case 251: 
   HEAP32[(($1097)>>2)]=$1087;
   HEAP32[(($1101)>>2)]=$1092;
   var $R_1_i_i = $1087;label = 260; break;
  case 252: 
   _abort();
   throw "Reached an unreachable!";
  case 253: 
   var $_sum67_i_i=$1003 | 16;
   var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
   var $1106=(($tbase_247_i+$_sum117_i)|0);
   var $1107=$1106;
   var $1108=HEAP32[(($1107)>>2)];
   var $1109=(($1108)|(0))==0;
   if ($1109) { label = 254; break; } else { var $R_0_i_i = $1108;var $RP_0_i_i = $1107;label = 255; break; }
  case 254: 
   var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
   var $1111=(($tbase_247_i+$_sum118_i)|0);
   var $1112=$1111;
   var $1113=HEAP32[(($1112)>>2)];
   var $1114=(($1113)|(0))==0;
   if ($1114) { var $R_1_i_i = 0;label = 260; break; } else { var $R_0_i_i = $1113;var $RP_0_i_i = $1112;label = 255; break; }
  case 255: 
   var $RP_0_i_i;
   var $R_0_i_i;
   var $1115=(($R_0_i_i+20)|0);
   var $1116=HEAP32[(($1115)>>2)];
   var $1117=(($1116)|(0))==0;
   if ($1117) { label = 256; break; } else { var $R_0_i_i = $1116;var $RP_0_i_i = $1115;label = 255; break; }
  case 256: 
   var $1119=(($R_0_i_i+16)|0);
   var $1120=HEAP32[(($1119)>>2)];
   var $1121=(($1120)|(0))==0;
   if ($1121) { label = 257; break; } else { var $R_0_i_i = $1120;var $RP_0_i_i = $1119;label = 255; break; }
  case 257: 
   var $1123=$RP_0_i_i;
   var $1124=HEAP32[((((5784)|0))>>2)];
   var $1125=(($1123)>>>(0)) < (($1124)>>>(0));
   if ($1125) { label = 259; break; } else { label = 258; break; }
  case 258: 
   HEAP32[(($RP_0_i_i)>>2)]=0;
   var $R_1_i_i = $R_0_i_i;label = 260; break;
  case 259: 
   _abort();
   throw "Reached an unreachable!";
  case 260: 
   var $R_1_i_i;
   var $1129=(($1084)|(0))==0;
   if ($1129) { label = 280; break; } else { label = 261; break; }
  case 261: 
   var $_sum31_i_i=((($tsize_246_i)+(28))|0);
   var $_sum113_i=((($_sum31_i_i)+($1003))|0);
   var $1131=(($tbase_247_i+$_sum113_i)|0);
   var $1132=$1131;
   var $1133=HEAP32[(($1132)>>2)];
   var $1134=((6072+($1133<<2))|0);
   var $1135=HEAP32[(($1134)>>2)];
   var $1136=(($1081)|(0))==(($1135)|(0));
   if ($1136) { label = 262; break; } else { label = 264; break; }
  case 262: 
   HEAP32[(($1134)>>2)]=$R_1_i_i;
   var $cond_i_i=(($R_1_i_i)|(0))==0;
   if ($cond_i_i) { label = 263; break; } else { label = 270; break; }
  case 263: 
   var $1138=HEAP32[(($1132)>>2)];
   var $1139=1 << $1138;
   var $1140=$1139 ^ -1;
   var $1141=HEAP32[((((5772)|0))>>2)];
   var $1142=$1141 & $1140;
   HEAP32[((((5772)|0))>>2)]=$1142;
   label = 280; break;
  case 264: 
   var $1144=$1084;
   var $1145=HEAP32[((((5784)|0))>>2)];
   var $1146=(($1144)>>>(0)) < (($1145)>>>(0));
   if ($1146) { label = 268; break; } else { label = 265; break; }
  case 265: 
   var $1148=(($1084+16)|0);
   var $1149=HEAP32[(($1148)>>2)];
   var $1150=(($1149)|(0))==(($1081)|(0));
   if ($1150) { label = 266; break; } else { label = 267; break; }
  case 266: 
   HEAP32[(($1148)>>2)]=$R_1_i_i;
   label = 269; break;
  case 267: 
   var $1153=(($1084+20)|0);
   HEAP32[(($1153)>>2)]=$R_1_i_i;
   label = 269; break;
  case 268: 
   _abort();
   throw "Reached an unreachable!";
  case 269: 
   var $1156=(($R_1_i_i)|(0))==0;
   if ($1156) { label = 280; break; } else { label = 270; break; }
  case 270: 
   var $1158=$R_1_i_i;
   var $1159=HEAP32[((((5784)|0))>>2)];
   var $1160=(($1158)>>>(0)) < (($1159)>>>(0));
   if ($1160) { label = 279; break; } else { label = 271; break; }
  case 271: 
   var $1162=(($R_1_i_i+24)|0);
   HEAP32[(($1162)>>2)]=$1084;
   var $_sum3233_i_i=$1003 | 16;
   var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
   var $1163=(($tbase_247_i+$_sum114_i)|0);
   var $1164=$1163;
   var $1165=HEAP32[(($1164)>>2)];
   var $1166=(($1165)|(0))==0;
   if ($1166) { label = 275; break; } else { label = 272; break; }
  case 272: 
   var $1168=$1165;
   var $1169=HEAP32[((((5784)|0))>>2)];
   var $1170=(($1168)>>>(0)) < (($1169)>>>(0));
   if ($1170) { label = 274; break; } else { label = 273; break; }
  case 273: 
   var $1172=(($R_1_i_i+16)|0);
   HEAP32[(($1172)>>2)]=$1165;
   var $1173=(($1165+24)|0);
   HEAP32[(($1173)>>2)]=$R_1_i_i;
   label = 275; break;
  case 274: 
   _abort();
   throw "Reached an unreachable!";
  case 275: 
   var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
   var $1176=(($tbase_247_i+$_sum115_i)|0);
   var $1177=$1176;
   var $1178=HEAP32[(($1177)>>2)];
   var $1179=(($1178)|(0))==0;
   if ($1179) { label = 280; break; } else { label = 276; break; }
  case 276: 
   var $1181=$1178;
   var $1182=HEAP32[((((5784)|0))>>2)];
   var $1183=(($1181)>>>(0)) < (($1182)>>>(0));
   if ($1183) { label = 278; break; } else { label = 277; break; }
  case 277: 
   var $1185=(($R_1_i_i+20)|0);
   HEAP32[(($1185)>>2)]=$1178;
   var $1186=(($1178+24)|0);
   HEAP32[(($1186)>>2)]=$R_1_i_i;
   label = 280; break;
  case 278: 
   _abort();
   throw "Reached an unreachable!";
  case 279: 
   _abort();
   throw "Reached an unreachable!";
  case 280: 
   var $_sum9_i_i=$1041 | $1003;
   var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
   var $1190=(($tbase_247_i+$_sum116_i)|0);
   var $1191=$1190;
   var $1192=((($1041)+($1011))|0);
   var $oldfirst_0_i_i = $1191;var $qsize_0_i_i = $1192;label = 281; break;
  case 281: 
   var $qsize_0_i_i;
   var $oldfirst_0_i_i;
   var $1194=(($oldfirst_0_i_i+4)|0);
   var $1195=HEAP32[(($1194)>>2)];
   var $1196=$1195 & -2;
   HEAP32[(($1194)>>2)]=$1196;
   var $1197=$qsize_0_i_i | 1;
   var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
   var $1198=(($tbase_247_i+$_sum10_i_i)|0);
   var $1199=$1198;
   HEAP32[(($1199)>>2)]=$1197;
   var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
   var $1200=(($tbase_247_i+$_sum11_i_i)|0);
   var $1201=$1200;
   HEAP32[(($1201)>>2)]=$qsize_0_i_i;
   var $1202=$qsize_0_i_i >>> 3;
   var $1203=(($qsize_0_i_i)>>>(0)) < 256;
   if ($1203) { label = 282; break; } else { label = 287; break; }
  case 282: 
   var $1205=$1202 << 1;
   var $1206=((5808+($1205<<2))|0);
   var $1207=$1206;
   var $1208=HEAP32[((((5768)|0))>>2)];
   var $1209=1 << $1202;
   var $1210=$1208 & $1209;
   var $1211=(($1210)|(0))==0;
   if ($1211) { label = 283; break; } else { label = 284; break; }
  case 283: 
   var $1213=$1208 | $1209;
   HEAP32[((((5768)|0))>>2)]=$1213;
   var $_sum27_pre_i_i=((($1205)+(2))|0);
   var $_pre_i24_i=((5808+($_sum27_pre_i_i<<2))|0);
   var $F4_0_i_i = $1207;var $_pre_phi_i25_i = $_pre_i24_i;label = 286; break;
  case 284: 
   var $_sum30_i_i=((($1205)+(2))|0);
   var $1215=((5808+($_sum30_i_i<<2))|0);
   var $1216=HEAP32[(($1215)>>2)];
   var $1217=$1216;
   var $1218=HEAP32[((((5784)|0))>>2)];
   var $1219=(($1217)>>>(0)) < (($1218)>>>(0));
   if ($1219) { label = 285; break; } else { var $F4_0_i_i = $1216;var $_pre_phi_i25_i = $1215;label = 286; break; }
  case 285: 
   _abort();
   throw "Reached an unreachable!";
  case 286: 
   var $_pre_phi_i25_i;
   var $F4_0_i_i;
   HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
   var $1222=(($F4_0_i_i+12)|0);
   HEAP32[(($1222)>>2)]=$1010;
   var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
   var $1223=(($tbase_247_i+$_sum28_i_i)|0);
   var $1224=$1223;
   HEAP32[(($1224)>>2)]=$F4_0_i_i;
   var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
   var $1225=(($tbase_247_i+$_sum29_i_i)|0);
   var $1226=$1225;
   HEAP32[(($1226)>>2)]=$1207;
   label = 305; break;
  case 287: 
   var $1228=$1009;
   var $1229=$qsize_0_i_i >>> 8;
   var $1230=(($1229)|(0))==0;
   if ($1230) { var $I7_0_i_i = 0;label = 290; break; } else { label = 288; break; }
  case 288: 
   var $1232=(($qsize_0_i_i)>>>(0)) > 16777215;
   if ($1232) { var $I7_0_i_i = 31;label = 290; break; } else { label = 289; break; }
  case 289: 
   var $1234=((($1229)+(1048320))|0);
   var $1235=$1234 >>> 16;
   var $1236=$1235 & 8;
   var $1237=$1229 << $1236;
   var $1238=((($1237)+(520192))|0);
   var $1239=$1238 >>> 16;
   var $1240=$1239 & 4;
   var $1241=$1240 | $1236;
   var $1242=$1237 << $1240;
   var $1243=((($1242)+(245760))|0);
   var $1244=$1243 >>> 16;
   var $1245=$1244 & 2;
   var $1246=$1241 | $1245;
   var $1247=(((14)-($1246))|0);
   var $1248=$1242 << $1245;
   var $1249=$1248 >>> 15;
   var $1250=((($1247)+($1249))|0);
   var $1251=$1250 << 1;
   var $1252=((($1250)+(7))|0);
   var $1253=$qsize_0_i_i >>> (($1252)>>>(0));
   var $1254=$1253 & 1;
   var $1255=$1254 | $1251;
   var $I7_0_i_i = $1255;label = 290; break;
  case 290: 
   var $I7_0_i_i;
   var $1257=((6072+($I7_0_i_i<<2))|0);
   var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
   var $1258=(($tbase_247_i+$_sum12_i26_i)|0);
   var $1259=$1258;
   HEAP32[(($1259)>>2)]=$I7_0_i_i;
   var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
   var $1260=(($tbase_247_i+$_sum13_i_i)|0);
   var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
   var $1261=(($tbase_247_i+$_sum14_i_i)|0);
   var $1262=$1261;
   HEAP32[(($1262)>>2)]=0;
   var $1263=$1260;
   HEAP32[(($1263)>>2)]=0;
   var $1264=HEAP32[((((5772)|0))>>2)];
   var $1265=1 << $I7_0_i_i;
   var $1266=$1264 & $1265;
   var $1267=(($1266)|(0))==0;
   if ($1267) { label = 291; break; } else { label = 292; break; }
  case 291: 
   var $1269=$1264 | $1265;
   HEAP32[((((5772)|0))>>2)]=$1269;
   HEAP32[(($1257)>>2)]=$1228;
   var $1270=$1257;
   var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
   var $1271=(($tbase_247_i+$_sum15_i_i)|0);
   var $1272=$1271;
   HEAP32[(($1272)>>2)]=$1270;
   var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
   var $1273=(($tbase_247_i+$_sum16_i_i)|0);
   var $1274=$1273;
   HEAP32[(($1274)>>2)]=$1228;
   var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
   var $1275=(($tbase_247_i+$_sum17_i_i)|0);
   var $1276=$1275;
   HEAP32[(($1276)>>2)]=$1228;
   label = 305; break;
  case 292: 
   var $1278=HEAP32[(($1257)>>2)];
   var $1279=(($I7_0_i_i)|(0))==31;
   if ($1279) { var $1284 = 0;label = 294; break; } else { label = 293; break; }
  case 293: 
   var $1281=$I7_0_i_i >>> 1;
   var $1282=(((25)-($1281))|0);
   var $1284 = $1282;label = 294; break;
  case 294: 
   var $1284;
   var $1285=(($1278+4)|0);
   var $1286=HEAP32[(($1285)>>2)];
   var $1287=$1286 & -8;
   var $1288=(($1287)|(0))==(($qsize_0_i_i)|(0));
   if ($1288) { var $T_0_lcssa_i28_i = $1278;label = 301; break; } else { label = 295; break; }
  case 295: 
   var $1289=$qsize_0_i_i << $1284;
   var $T_055_i_i = $1278;var $K8_056_i_i = $1289;label = 297; break;
  case 296: 
   var $1291=$K8_056_i_i << 1;
   var $1292=(($1299+4)|0);
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=$1293 & -8;
   var $1295=(($1294)|(0))==(($qsize_0_i_i)|(0));
   if ($1295) { var $T_0_lcssa_i28_i = $1299;label = 301; break; } else { var $T_055_i_i = $1299;var $K8_056_i_i = $1291;label = 297; break; }
  case 297: 
   var $K8_056_i_i;
   var $T_055_i_i;
   var $1297=$K8_056_i_i >>> 31;
   var $1298=(($T_055_i_i+16+($1297<<2))|0);
   var $1299=HEAP32[(($1298)>>2)];
   var $1300=(($1299)|(0))==0;
   if ($1300) { label = 298; break; } else { label = 296; break; }
  case 298: 
   var $1302=$1298;
   var $1303=HEAP32[((((5784)|0))>>2)];
   var $1304=(($1302)>>>(0)) < (($1303)>>>(0));
   if ($1304) { label = 300; break; } else { label = 299; break; }
  case 299: 
   HEAP32[(($1298)>>2)]=$1228;
   var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
   var $1306=(($tbase_247_i+$_sum24_i_i)|0);
   var $1307=$1306;
   HEAP32[(($1307)>>2)]=$T_055_i_i;
   var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
   var $1308=(($tbase_247_i+$_sum25_i_i)|0);
   var $1309=$1308;
   HEAP32[(($1309)>>2)]=$1228;
   var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
   var $1310=(($tbase_247_i+$_sum26_i_i)|0);
   var $1311=$1310;
   HEAP32[(($1311)>>2)]=$1228;
   label = 305; break;
  case 300: 
   _abort();
   throw "Reached an unreachable!";
  case 301: 
   var $T_0_lcssa_i28_i;
   var $1313=(($T_0_lcssa_i28_i+8)|0);
   var $1314=HEAP32[(($1313)>>2)];
   var $1315=$T_0_lcssa_i28_i;
   var $1316=HEAP32[((((5784)|0))>>2)];
   var $1317=(($1315)>>>(0)) < (($1316)>>>(0));
   if ($1317) { label = 304; break; } else { label = 302; break; }
  case 302: 
   var $1319=$1314;
   var $1320=(($1319)>>>(0)) < (($1316)>>>(0));
   if ($1320) { label = 304; break; } else { label = 303; break; }
  case 303: 
   var $1322=(($1314+12)|0);
   HEAP32[(($1322)>>2)]=$1228;
   HEAP32[(($1313)>>2)]=$1228;
   var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
   var $1323=(($tbase_247_i+$_sum21_i_i)|0);
   var $1324=$1323;
   HEAP32[(($1324)>>2)]=$1314;
   var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
   var $1325=(($tbase_247_i+$_sum22_i_i)|0);
   var $1326=$1325;
   HEAP32[(($1326)>>2)]=$T_0_lcssa_i28_i;
   var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
   var $1327=(($tbase_247_i+$_sum23_i_i)|0);
   var $1328=$1327;
   HEAP32[(($1328)>>2)]=0;
   label = 305; break;
  case 304: 
   _abort();
   throw "Reached an unreachable!";
  case 305: 
   var $_sum1819_i_i=$993 | 8;
   var $1329=(($tbase_247_i+$_sum1819_i_i)|0);
   var $mem_0 = $1329;label = 344; break;
  case 306: 
   var $1330=$890;
   var $sp_0_i_i_i = ((6216)|0);label = 307; break;
  case 307: 
   var $sp_0_i_i_i;
   var $1332=(($sp_0_i_i_i)|0);
   var $1333=HEAP32[(($1332)>>2)];
   var $1334=(($1333)>>>(0)) > (($1330)>>>(0));
   if ($1334) { label = 309; break; } else { label = 308; break; }
  case 308: 
   var $1336=(($sp_0_i_i_i+4)|0);
   var $1337=HEAP32[(($1336)>>2)];
   var $1338=(($1333+$1337)|0);
   var $1339=(($1338)>>>(0)) > (($1330)>>>(0));
   if ($1339) { label = 310; break; } else { label = 309; break; }
  case 309: 
   var $1341=(($sp_0_i_i_i+8)|0);
   var $1342=HEAP32[(($1341)>>2)];
   var $sp_0_i_i_i = $1342;label = 307; break;
  case 310: 
   var $_sum_i15_i=((($1337)-(47))|0);
   var $_sum1_i16_i=((($1337)-(39))|0);
   var $1343=(($1333+$_sum1_i16_i)|0);
   var $1344=$1343;
   var $1345=$1344 & 7;
   var $1346=(($1345)|(0))==0;
   if ($1346) { var $1351 = 0;label = 312; break; } else { label = 311; break; }
  case 311: 
   var $1348=(((-$1344))|0);
   var $1349=$1348 & 7;
   var $1351 = $1349;label = 312; break;
  case 312: 
   var $1351;
   var $_sum2_i17_i=((($_sum_i15_i)+($1351))|0);
   var $1352=(($1333+$_sum2_i17_i)|0);
   var $1353=(($890+16)|0);
   var $1354=$1353;
   var $1355=(($1352)>>>(0)) < (($1354)>>>(0));
   var $1356=$1355 ? $1330 : $1352;
   var $1357=(($1356+8)|0);
   var $1358=$1357;
   var $1359=((($tsize_246_i)-(40))|0);
   var $1360=(($tbase_247_i+8)|0);
   var $1361=$1360;
   var $1362=$1361 & 7;
   var $1363=(($1362)|(0))==0;
   if ($1363) { var $1367 = 0;label = 314; break; } else { label = 313; break; }
  case 313: 
   var $1365=(((-$1361))|0);
   var $1366=$1365 & 7;
   var $1367 = $1366;label = 314; break;
  case 314: 
   var $1367;
   var $1368=(($tbase_247_i+$1367)|0);
   var $1369=$1368;
   var $1370=((($1359)-($1367))|0);
   HEAP32[((((5792)|0))>>2)]=$1369;
   HEAP32[((((5780)|0))>>2)]=$1370;
   var $1371=$1370 | 1;
   var $_sum_i_i_i=((($1367)+(4))|0);
   var $1372=(($tbase_247_i+$_sum_i_i_i)|0);
   var $1373=$1372;
   HEAP32[(($1373)>>2)]=$1371;
   var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
   var $1374=(($tbase_247_i+$_sum2_i_i_i)|0);
   var $1375=$1374;
   HEAP32[(($1375)>>2)]=40;
   var $1376=HEAP32[((((4688)|0))>>2)];
   HEAP32[((((5796)|0))>>2)]=$1376;
   var $1377=(($1356+4)|0);
   var $1378=$1377;
   HEAP32[(($1378)>>2)]=27;
   assert(16 % 1 === 0);HEAP32[(($1357)>>2)]=HEAP32[(((((6216)|0)))>>2)];HEAP32[((($1357)+(4))>>2)]=HEAP32[((((((6216)|0)))+(4))>>2)];HEAP32[((($1357)+(8))>>2)]=HEAP32[((((((6216)|0)))+(8))>>2)];HEAP32[((($1357)+(12))>>2)]=HEAP32[((((((6216)|0)))+(12))>>2)];
   HEAP32[((((6216)|0))>>2)]=$tbase_247_i;
   HEAP32[((((6220)|0))>>2)]=$tsize_246_i;
   HEAP32[((((6228)|0))>>2)]=0;
   HEAP32[((((6224)|0))>>2)]=$1358;
   var $1379=(($1356+28)|0);
   var $1380=$1379;
   HEAP32[(($1380)>>2)]=7;
   var $1381=(($1356+32)|0);
   var $1382=(($1381)>>>(0)) < (($1338)>>>(0));
   if ($1382) { var $1383 = $1380;label = 315; break; } else { label = 316; break; }
  case 315: 
   var $1383;
   var $1384=(($1383+4)|0);
   HEAP32[(($1384)>>2)]=7;
   var $1385=(($1383+8)|0);
   var $1386=$1385;
   var $1387=(($1386)>>>(0)) < (($1338)>>>(0));
   if ($1387) { var $1383 = $1384;label = 315; break; } else { label = 316; break; }
  case 316: 
   var $1388=(($1356)|(0))==(($1330)|(0));
   if ($1388) { label = 341; break; } else { label = 317; break; }
  case 317: 
   var $1390=$1356;
   var $1391=$890;
   var $1392=((($1390)-($1391))|0);
   var $1393=(($1330+$1392)|0);
   var $_sum3_i_i=((($1392)+(4))|0);
   var $1394=(($1330+$_sum3_i_i)|0);
   var $1395=$1394;
   var $1396=HEAP32[(($1395)>>2)];
   var $1397=$1396 & -2;
   HEAP32[(($1395)>>2)]=$1397;
   var $1398=$1392 | 1;
   var $1399=(($890+4)|0);
   HEAP32[(($1399)>>2)]=$1398;
   var $1400=$1393;
   HEAP32[(($1400)>>2)]=$1392;
   var $1401=$1392 >>> 3;
   var $1402=(($1392)>>>(0)) < 256;
   if ($1402) { label = 318; break; } else { label = 323; break; }
  case 318: 
   var $1404=$1401 << 1;
   var $1405=((5808+($1404<<2))|0);
   var $1406=$1405;
   var $1407=HEAP32[((((5768)|0))>>2)];
   var $1408=1 << $1401;
   var $1409=$1407 & $1408;
   var $1410=(($1409)|(0))==0;
   if ($1410) { label = 319; break; } else { label = 320; break; }
  case 319: 
   var $1412=$1407 | $1408;
   HEAP32[((((5768)|0))>>2)]=$1412;
   var $_sum11_pre_i_i=((($1404)+(2))|0);
   var $_pre_i_i=((5808+($_sum11_pre_i_i<<2))|0);
   var $F_0_i_i = $1406;var $_pre_phi_i_i = $_pre_i_i;label = 322; break;
  case 320: 
   var $_sum12_i_i=((($1404)+(2))|0);
   var $1414=((5808+($_sum12_i_i<<2))|0);
   var $1415=HEAP32[(($1414)>>2)];
   var $1416=$1415;
   var $1417=HEAP32[((((5784)|0))>>2)];
   var $1418=(($1416)>>>(0)) < (($1417)>>>(0));
   if ($1418) { label = 321; break; } else { var $F_0_i_i = $1415;var $_pre_phi_i_i = $1414;label = 322; break; }
  case 321: 
   _abort();
   throw "Reached an unreachable!";
  case 322: 
   var $_pre_phi_i_i;
   var $F_0_i_i;
   HEAP32[(($_pre_phi_i_i)>>2)]=$890;
   var $1421=(($F_0_i_i+12)|0);
   HEAP32[(($1421)>>2)]=$890;
   var $1422=(($890+8)|0);
   HEAP32[(($1422)>>2)]=$F_0_i_i;
   var $1423=(($890+12)|0);
   HEAP32[(($1423)>>2)]=$1406;
   label = 341; break;
  case 323: 
   var $1425=$890;
   var $1426=$1392 >>> 8;
   var $1427=(($1426)|(0))==0;
   if ($1427) { var $I1_0_i_i = 0;label = 326; break; } else { label = 324; break; }
  case 324: 
   var $1429=(($1392)>>>(0)) > 16777215;
   if ($1429) { var $I1_0_i_i = 31;label = 326; break; } else { label = 325; break; }
  case 325: 
   var $1431=((($1426)+(1048320))|0);
   var $1432=$1431 >>> 16;
   var $1433=$1432 & 8;
   var $1434=$1426 << $1433;
   var $1435=((($1434)+(520192))|0);
   var $1436=$1435 >>> 16;
   var $1437=$1436 & 4;
   var $1438=$1437 | $1433;
   var $1439=$1434 << $1437;
   var $1440=((($1439)+(245760))|0);
   var $1441=$1440 >>> 16;
   var $1442=$1441 & 2;
   var $1443=$1438 | $1442;
   var $1444=(((14)-($1443))|0);
   var $1445=$1439 << $1442;
   var $1446=$1445 >>> 15;
   var $1447=((($1444)+($1446))|0);
   var $1448=$1447 << 1;
   var $1449=((($1447)+(7))|0);
   var $1450=$1392 >>> (($1449)>>>(0));
   var $1451=$1450 & 1;
   var $1452=$1451 | $1448;
   var $I1_0_i_i = $1452;label = 326; break;
  case 326: 
   var $I1_0_i_i;
   var $1454=((6072+($I1_0_i_i<<2))|0);
   var $1455=(($890+28)|0);
   var $I1_0_c_i_i=$I1_0_i_i;
   HEAP32[(($1455)>>2)]=$I1_0_c_i_i;
   var $1456=(($890+20)|0);
   HEAP32[(($1456)>>2)]=0;
   var $1457=(($890+16)|0);
   HEAP32[(($1457)>>2)]=0;
   var $1458=HEAP32[((((5772)|0))>>2)];
   var $1459=1 << $I1_0_i_i;
   var $1460=$1458 & $1459;
   var $1461=(($1460)|(0))==0;
   if ($1461) { label = 327; break; } else { label = 328; break; }
  case 327: 
   var $1463=$1458 | $1459;
   HEAP32[((((5772)|0))>>2)]=$1463;
   HEAP32[(($1454)>>2)]=$1425;
   var $1464=(($890+24)|0);
   var $_c_i_i=$1454;
   HEAP32[(($1464)>>2)]=$_c_i_i;
   var $1465=(($890+12)|0);
   HEAP32[(($1465)>>2)]=$890;
   var $1466=(($890+8)|0);
   HEAP32[(($1466)>>2)]=$890;
   label = 341; break;
  case 328: 
   var $1468=HEAP32[(($1454)>>2)];
   var $1469=(($I1_0_i_i)|(0))==31;
   if ($1469) { var $1474 = 0;label = 330; break; } else { label = 329; break; }
  case 329: 
   var $1471=$I1_0_i_i >>> 1;
   var $1472=(((25)-($1471))|0);
   var $1474 = $1472;label = 330; break;
  case 330: 
   var $1474;
   var $1475=(($1468+4)|0);
   var $1476=HEAP32[(($1475)>>2)];
   var $1477=$1476 & -8;
   var $1478=(($1477)|(0))==(($1392)|(0));
   if ($1478) { var $T_0_lcssa_i_i = $1468;label = 337; break; } else { label = 331; break; }
  case 331: 
   var $1479=$1392 << $1474;
   var $T_014_i_i = $1468;var $K2_015_i_i = $1479;label = 333; break;
  case 332: 
   var $1481=$K2_015_i_i << 1;
   var $1482=(($1489+4)|0);
   var $1483=HEAP32[(($1482)>>2)];
   var $1484=$1483 & -8;
   var $1485=(($1484)|(0))==(($1392)|(0));
   if ($1485) { var $T_0_lcssa_i_i = $1489;label = 337; break; } else { var $T_014_i_i = $1489;var $K2_015_i_i = $1481;label = 333; break; }
  case 333: 
   var $K2_015_i_i;
   var $T_014_i_i;
   var $1487=$K2_015_i_i >>> 31;
   var $1488=(($T_014_i_i+16+($1487<<2))|0);
   var $1489=HEAP32[(($1488)>>2)];
   var $1490=(($1489)|(0))==0;
   if ($1490) { label = 334; break; } else { label = 332; break; }
  case 334: 
   var $1492=$1488;
   var $1493=HEAP32[((((5784)|0))>>2)];
   var $1494=(($1492)>>>(0)) < (($1493)>>>(0));
   if ($1494) { label = 336; break; } else { label = 335; break; }
  case 335: 
   HEAP32[(($1488)>>2)]=$1425;
   var $1496=(($890+24)|0);
   var $T_0_c8_i_i=$T_014_i_i;
   HEAP32[(($1496)>>2)]=$T_0_c8_i_i;
   var $1497=(($890+12)|0);
   HEAP32[(($1497)>>2)]=$890;
   var $1498=(($890+8)|0);
   HEAP32[(($1498)>>2)]=$890;
   label = 341; break;
  case 336: 
   _abort();
   throw "Reached an unreachable!";
  case 337: 
   var $T_0_lcssa_i_i;
   var $1500=(($T_0_lcssa_i_i+8)|0);
   var $1501=HEAP32[(($1500)>>2)];
   var $1502=$T_0_lcssa_i_i;
   var $1503=HEAP32[((((5784)|0))>>2)];
   var $1504=(($1502)>>>(0)) < (($1503)>>>(0));
   if ($1504) { label = 340; break; } else { label = 338; break; }
  case 338: 
   var $1506=$1501;
   var $1507=(($1506)>>>(0)) < (($1503)>>>(0));
   if ($1507) { label = 340; break; } else { label = 339; break; }
  case 339: 
   var $1509=(($1501+12)|0);
   HEAP32[(($1509)>>2)]=$1425;
   HEAP32[(($1500)>>2)]=$1425;
   var $1510=(($890+8)|0);
   var $_c7_i_i=$1501;
   HEAP32[(($1510)>>2)]=$_c7_i_i;
   var $1511=(($890+12)|0);
   var $T_0_c_i_i=$T_0_lcssa_i_i;
   HEAP32[(($1511)>>2)]=$T_0_c_i_i;
   var $1512=(($890+24)|0);
   HEAP32[(($1512)>>2)]=0;
   label = 341; break;
  case 340: 
   _abort();
   throw "Reached an unreachable!";
  case 341: 
   var $1513=HEAP32[((((5780)|0))>>2)];
   var $1514=(($1513)>>>(0)) > (($nb_0)>>>(0));
   if ($1514) { label = 342; break; } else { label = 343; break; }
  case 342: 
   var $1516=((($1513)-($nb_0))|0);
   HEAP32[((((5780)|0))>>2)]=$1516;
   var $1517=HEAP32[((((5792)|0))>>2)];
   var $1518=$1517;
   var $1519=(($1518+$nb_0)|0);
   var $1520=$1519;
   HEAP32[((((5792)|0))>>2)]=$1520;
   var $1521=$1516 | 1;
   var $_sum_i34=((($nb_0)+(4))|0);
   var $1522=(($1518+$_sum_i34)|0);
   var $1523=$1522;
   HEAP32[(($1523)>>2)]=$1521;
   var $1524=$nb_0 | 3;
   var $1525=(($1517+4)|0);
   HEAP32[(($1525)>>2)]=$1524;
   var $1526=(($1517+8)|0);
   var $1527=$1526;
   var $mem_0 = $1527;label = 344; break;
  case 343: 
   var $1528=___errno_location();
   HEAP32[(($1528)>>2)]=12;
   var $mem_0 = 0;label = 344; break;
  case 344: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($mem)|(0))==0;
   if ($1) { label = 143; break; } else { label = 2; break; }
  case 2: 
   var $3=((($mem)-(8))|0);
   var $4=$3;
   var $5=HEAP32[((((5784)|0))>>2)];
   var $6=(($3)>>>(0)) < (($5)>>>(0));
   if ($6) { label = 142; break; } else { label = 3; break; }
  case 3: 
   var $8=((($mem)-(4))|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 3;
   var $12=(($11)|(0))==1;
   if ($12) { label = 142; break; } else { label = 4; break; }
  case 4: 
   var $14=$10 & -8;
   var $_sum=((($14)-(8))|0);
   var $15=(($mem+$_sum)|0);
   var $16=$15;
   var $17=$10 & 1;
   var $18=(($17)|(0))==0;
   if ($18) { label = 5; break; } else { var $p_0 = $4;var $psize_0 = $14;label = 56; break; }
  case 5: 
   var $20=$3;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($11)|(0))==0;
   if ($22) { label = 143; break; } else { label = 6; break; }
  case 6: 
   var $_sum3=(((-8)-($21))|0);
   var $24=(($mem+$_sum3)|0);
   var $25=$24;
   var $26=((($21)+($14))|0);
   var $27=(($24)>>>(0)) < (($5)>>>(0));
   if ($27) { label = 142; break; } else { label = 7; break; }
  case 7: 
   var $29=HEAP32[((((5788)|0))>>2)];
   var $30=(($25)|(0))==(($29)|(0));
   if ($30) { label = 54; break; } else { label = 8; break; }
  case 8: 
   var $32=$21 >>> 3;
   var $33=(($21)>>>(0)) < 256;
   if ($33) { label = 9; break; } else { label = 21; break; }
  case 9: 
   var $_sum47=((($_sum3)+(8))|0);
   var $35=(($mem+$_sum47)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $_sum48=((($_sum3)+(12))|0);
   var $38=(($mem+$_sum48)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$32 << 1;
   var $42=((5808+($41<<2))|0);
   var $43=$42;
   var $44=(($37)|(0))==(($43)|(0));
   if ($44) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $46=$37;
   var $47=(($46)>>>(0)) < (($5)>>>(0));
   if ($47) { label = 20; break; } else { label = 11; break; }
  case 11: 
   var $49=(($37+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==(($25)|(0));
   if ($51) { label = 12; break; } else { label = 20; break; }
  case 12: 
   var $52=(($40)|(0))==(($37)|(0));
   if ($52) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $54=1 << $32;
   var $55=$54 ^ -1;
   var $56=HEAP32[((((5768)|0))>>2)];
   var $57=$56 & $55;
   HEAP32[((((5768)|0))>>2)]=$57;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 14: 
   var $59=(($40)|(0))==(($43)|(0));
   if ($59) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre81=(($40+8)|0);
   var $_pre_phi82 = $_pre81;label = 18; break;
  case 16: 
   var $61=$40;
   var $62=(($61)>>>(0)) < (($5)>>>(0));
   if ($62) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $64=(($40+8)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))==(($25)|(0));
   if ($66) { var $_pre_phi82 = $64;label = 18; break; } else { label = 19; break; }
  case 18: 
   var $_pre_phi82;
   var $67=(($37+12)|0);
   HEAP32[(($67)>>2)]=$40;
   HEAP32[(($_pre_phi82)>>2)]=$37;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   _abort();
   throw "Reached an unreachable!";
  case 21: 
   var $69=$24;
   var $_sum37=((($_sum3)+(24))|0);
   var $70=(($mem+$_sum37)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $_sum38=((($_sum3)+(12))|0);
   var $73=(($mem+$_sum38)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75)|(0))==(($69)|(0));
   if ($76) { label = 27; break; } else { label = 22; break; }
  case 22: 
   var $_sum44=((($_sum3)+(8))|0);
   var $78=(($mem+$_sum44)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   var $82=(($81)>>>(0)) < (($5)>>>(0));
   if ($82) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $84=(($80+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==(($69)|(0));
   if ($86) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $88=(($75+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0))==(($69)|(0));
   if ($90) { label = 25; break; } else { label = 26; break; }
  case 25: 
   HEAP32[(($84)>>2)]=$75;
   HEAP32[(($88)>>2)]=$80;
   var $R_1 = $75;label = 34; break;
  case 26: 
   _abort();
   throw "Reached an unreachable!";
  case 27: 
   var $_sum40=((($_sum3)+(20))|0);
   var $93=(($mem+$_sum40)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 28; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 29; break; }
  case 28: 
   var $_sum39=((($_sum3)+(16))|0);
   var $98=(($mem+$_sum39)|0);
   var $99=$98;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   if ($101) { var $R_1 = 0;label = 34; break; } else { var $R_0 = $100;var $RP_0 = $99;label = 29; break; }
  case 29: 
   var $RP_0;
   var $R_0;
   var $102=(($R_0+20)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==0;
   if ($104) { label = 30; break; } else { var $R_0 = $103;var $RP_0 = $102;label = 29; break; }
  case 30: 
   var $106=(($R_0+16)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))==0;
   if ($108) { label = 31; break; } else { var $R_0 = $107;var $RP_0 = $106;label = 29; break; }
  case 31: 
   var $110=$RP_0;
   var $111=(($110)>>>(0)) < (($5)>>>(0));
   if ($111) { label = 33; break; } else { label = 32; break; }
  case 32: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 34; break;
  case 33: 
   _abort();
   throw "Reached an unreachable!";
  case 34: 
   var $R_1;
   var $115=(($72)|(0))==0;
   if ($115) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 35; break; }
  case 35: 
   var $_sum41=((($_sum3)+(28))|0);
   var $117=(($mem+$_sum41)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=((6072+($119<<2))|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($69)|(0))==(($121)|(0));
   if ($122) { label = 36; break; } else { label = 38; break; }
  case 36: 
   HEAP32[(($120)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 37; break; } else { label = 44; break; }
  case 37: 
   var $124=HEAP32[(($118)>>2)];
   var $125=1 << $124;
   var $126=$125 ^ -1;
   var $127=HEAP32[((((5772)|0))>>2)];
   var $128=$127 & $126;
   HEAP32[((((5772)|0))>>2)]=$128;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 38: 
   var $130=$72;
   var $131=HEAP32[((((5784)|0))>>2)];
   var $132=(($130)>>>(0)) < (($131)>>>(0));
   if ($132) { label = 42; break; } else { label = 39; break; }
  case 39: 
   var $134=(($72+16)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|(0))==(($69)|(0));
   if ($136) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($134)>>2)]=$R_1;
   label = 43; break;
  case 41: 
   var $139=(($72+20)|0);
   HEAP32[(($139)>>2)]=$R_1;
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   var $142=(($R_1)|(0))==0;
   if ($142) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 44; break; }
  case 44: 
   var $144=$R_1;
   var $145=HEAP32[((((5784)|0))>>2)];
   var $146=(($144)>>>(0)) < (($145)>>>(0));
   if ($146) { label = 53; break; } else { label = 45; break; }
  case 45: 
   var $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   var $_sum42=((($_sum3)+(16))|0);
   var $149=(($mem+$_sum42)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))==0;
   if ($152) { label = 49; break; } else { label = 46; break; }
  case 46: 
   var $154=$151;
   var $155=HEAP32[((((5784)|0))>>2)];
   var $156=(($154)>>>(0)) < (($155)>>>(0));
   if ($156) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $158=(($R_1+16)|0);
   HEAP32[(($158)>>2)]=$151;
   var $159=(($151+24)|0);
   HEAP32[(($159)>>2)]=$R_1;
   label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $_sum43=((($_sum3)+(20))|0);
   var $162=(($mem+$_sum43)|0);
   var $163=$162;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==0;
   if ($165) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 50; break; }
  case 50: 
   var $167=$164;
   var $168=HEAP32[((((5784)|0))>>2)];
   var $169=(($167)>>>(0)) < (($168)>>>(0));
   if ($169) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $171=(($R_1+20)|0);
   HEAP32[(($171)>>2)]=$164;
   var $172=(($164+24)|0);
   HEAP32[(($172)>>2)]=$R_1;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 52: 
   _abort();
   throw "Reached an unreachable!";
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_sum4=((($14)-(4))|0);
   var $176=(($mem+$_sum4)|0);
   var $177=$176;
   var $178=HEAP32[(($177)>>2)];
   var $179=$178 & 3;
   var $180=(($179)|(0))==3;
   if ($180) { label = 55; break; } else { var $p_0 = $25;var $psize_0 = $26;label = 56; break; }
  case 55: 
   HEAP32[((((5776)|0))>>2)]=$26;
   var $182=HEAP32[(($177)>>2)];
   var $183=$182 & -2;
   HEAP32[(($177)>>2)]=$183;
   var $184=$26 | 1;
   var $_sum35=((($_sum3)+(4))|0);
   var $185=(($mem+$_sum35)|0);
   var $186=$185;
   HEAP32[(($186)>>2)]=$184;
   var $187=$15;
   HEAP32[(($187)>>2)]=$26;
   label = 143; break;
  case 56: 
   var $psize_0;
   var $p_0;
   var $189=$p_0;
   var $190=(($189)>>>(0)) < (($15)>>>(0));
   if ($190) { label = 57; break; } else { label = 142; break; }
  case 57: 
   var $_sum34=((($14)-(4))|0);
   var $192=(($mem+$_sum34)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=$194 & 1;
   var $phitmp=(($195)|(0))==0;
   if ($phitmp) { label = 142; break; } else { label = 58; break; }
  case 58: 
   var $197=$194 & 2;
   var $198=(($197)|(0))==0;
   if ($198) { label = 59; break; } else { label = 114; break; }
  case 59: 
   var $200=HEAP32[((((5792)|0))>>2)];
   var $201=(($16)|(0))==(($200)|(0));
   if ($201) { label = 60; break; } else { label = 64; break; }
  case 60: 
   var $203=HEAP32[((((5780)|0))>>2)];
   var $204=((($203)+($psize_0))|0);
   HEAP32[((((5780)|0))>>2)]=$204;
   HEAP32[((((5792)|0))>>2)]=$p_0;
   var $205=$204 | 1;
   var $206=(($p_0+4)|0);
   HEAP32[(($206)>>2)]=$205;
   var $207=HEAP32[((((5788)|0))>>2)];
   var $208=(($p_0)|(0))==(($207)|(0));
   if ($208) { label = 61; break; } else { label = 62; break; }
  case 61: 
   HEAP32[((((5788)|0))>>2)]=0;
   HEAP32[((((5776)|0))>>2)]=0;
   label = 62; break;
  case 62: 
   var $211=HEAP32[((((5796)|0))>>2)];
   var $212=(($204)>>>(0)) > (($211)>>>(0));
   if ($212) { label = 63; break; } else { label = 143; break; }
  case 63: 
   var $214=_sys_trim(0);
   label = 143; break;
  case 64: 
   var $216=HEAP32[((((5788)|0))>>2)];
   var $217=(($16)|(0))==(($216)|(0));
   if ($217) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $219=HEAP32[((((5776)|0))>>2)];
   var $220=((($219)+($psize_0))|0);
   HEAP32[((((5776)|0))>>2)]=$220;
   HEAP32[((((5788)|0))>>2)]=$p_0;
   var $221=$220 | 1;
   var $222=(($p_0+4)|0);
   HEAP32[(($222)>>2)]=$221;
   var $223=(($189+$220)|0);
   var $224=$223;
   HEAP32[(($224)>>2)]=$220;
   label = 143; break;
  case 66: 
   var $226=$194 & -8;
   var $227=((($226)+($psize_0))|0);
   var $228=$194 >>> 3;
   var $229=(($194)>>>(0)) < 256;
   if ($229) { label = 67; break; } else { label = 79; break; }
  case 67: 
   var $231=(($mem+$14)|0);
   var $232=$231;
   var $233=HEAP32[(($232)>>2)];
   var $_sum2829=$14 | 4;
   var $234=(($mem+$_sum2829)|0);
   var $235=$234;
   var $236=HEAP32[(($235)>>2)];
   var $237=$228 << 1;
   var $238=((5808+($237<<2))|0);
   var $239=$238;
   var $240=(($233)|(0))==(($239)|(0));
   if ($240) { label = 70; break; } else { label = 68; break; }
  case 68: 
   var $242=$233;
   var $243=HEAP32[((((5784)|0))>>2)];
   var $244=(($242)>>>(0)) < (($243)>>>(0));
   if ($244) { label = 78; break; } else { label = 69; break; }
  case 69: 
   var $246=(($233+12)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247)|(0))==(($16)|(0));
   if ($248) { label = 70; break; } else { label = 78; break; }
  case 70: 
   var $249=(($236)|(0))==(($233)|(0));
   if ($249) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $251=1 << $228;
   var $252=$251 ^ -1;
   var $253=HEAP32[((((5768)|0))>>2)];
   var $254=$253 & $252;
   HEAP32[((((5768)|0))>>2)]=$254;
   label = 112; break;
  case 72: 
   var $256=(($236)|(0))==(($239)|(0));
   if ($256) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $_pre79=(($236+8)|0);
   var $_pre_phi80 = $_pre79;label = 76; break;
  case 74: 
   var $258=$236;
   var $259=HEAP32[((((5784)|0))>>2)];
   var $260=(($258)>>>(0)) < (($259)>>>(0));
   if ($260) { label = 77; break; } else { label = 75; break; }
  case 75: 
   var $262=(($236+8)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=(($263)|(0))==(($16)|(0));
   if ($264) { var $_pre_phi80 = $262;label = 76; break; } else { label = 77; break; }
  case 76: 
   var $_pre_phi80;
   var $265=(($233+12)|0);
   HEAP32[(($265)>>2)]=$236;
   HEAP32[(($_pre_phi80)>>2)]=$233;
   label = 112; break;
  case 77: 
   _abort();
   throw "Reached an unreachable!";
  case 78: 
   _abort();
   throw "Reached an unreachable!";
  case 79: 
   var $267=$15;
   var $_sum6=((($14)+(16))|0);
   var $268=(($mem+$_sum6)|0);
   var $269=$268;
   var $270=HEAP32[(($269)>>2)];
   var $_sum78=$14 | 4;
   var $271=(($mem+$_sum78)|0);
   var $272=$271;
   var $273=HEAP32[(($272)>>2)];
   var $274=(($273)|(0))==(($267)|(0));
   if ($274) { label = 85; break; } else { label = 80; break; }
  case 80: 
   var $276=(($mem+$14)|0);
   var $277=$276;
   var $278=HEAP32[(($277)>>2)];
   var $279=$278;
   var $280=HEAP32[((((5784)|0))>>2)];
   var $281=(($279)>>>(0)) < (($280)>>>(0));
   if ($281) { label = 84; break; } else { label = 81; break; }
  case 81: 
   var $283=(($278+12)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($284)|(0))==(($267)|(0));
   if ($285) { label = 82; break; } else { label = 84; break; }
  case 82: 
   var $287=(($273+8)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288)|(0))==(($267)|(0));
   if ($289) { label = 83; break; } else { label = 84; break; }
  case 83: 
   HEAP32[(($283)>>2)]=$273;
   HEAP32[(($287)>>2)]=$278;
   var $R7_1 = $273;label = 92; break;
  case 84: 
   _abort();
   throw "Reached an unreachable!";
  case 85: 
   var $_sum10=((($14)+(12))|0);
   var $292=(($mem+$_sum10)|0);
   var $293=$292;
   var $294=HEAP32[(($293)>>2)];
   var $295=(($294)|(0))==0;
   if ($295) { label = 86; break; } else { var $R7_0 = $294;var $RP9_0 = $293;label = 87; break; }
  case 86: 
   var $_sum9=((($14)+(8))|0);
   var $297=(($mem+$_sum9)|0);
   var $298=$297;
   var $299=HEAP32[(($298)>>2)];
   var $300=(($299)|(0))==0;
   if ($300) { var $R7_1 = 0;label = 92; break; } else { var $R7_0 = $299;var $RP9_0 = $298;label = 87; break; }
  case 87: 
   var $RP9_0;
   var $R7_0;
   var $301=(($R7_0+20)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=(($302)|(0))==0;
   if ($303) { label = 88; break; } else { var $R7_0 = $302;var $RP9_0 = $301;label = 87; break; }
  case 88: 
   var $305=(($R7_0+16)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306)|(0))==0;
   if ($307) { label = 89; break; } else { var $R7_0 = $306;var $RP9_0 = $305;label = 87; break; }
  case 89: 
   var $309=$RP9_0;
   var $310=HEAP32[((((5784)|0))>>2)];
   var $311=(($309)>>>(0)) < (($310)>>>(0));
   if ($311) { label = 91; break; } else { label = 90; break; }
  case 90: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 92; break;
  case 91: 
   _abort();
   throw "Reached an unreachable!";
  case 92: 
   var $R7_1;
   var $315=(($270)|(0))==0;
   if ($315) { label = 112; break; } else { label = 93; break; }
  case 93: 
   var $_sum21=((($14)+(20))|0);
   var $317=(($mem+$_sum21)|0);
   var $318=$317;
   var $319=HEAP32[(($318)>>2)];
   var $320=((6072+($319<<2))|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=(($267)|(0))==(($321)|(0));
   if ($322) { label = 94; break; } else { label = 96; break; }
  case 94: 
   HEAP32[(($320)>>2)]=$R7_1;
   var $cond69=(($R7_1)|(0))==0;
   if ($cond69) { label = 95; break; } else { label = 102; break; }
  case 95: 
   var $324=HEAP32[(($318)>>2)];
   var $325=1 << $324;
   var $326=$325 ^ -1;
   var $327=HEAP32[((((5772)|0))>>2)];
   var $328=$327 & $326;
   HEAP32[((((5772)|0))>>2)]=$328;
   label = 112; break;
  case 96: 
   var $330=$270;
   var $331=HEAP32[((((5784)|0))>>2)];
   var $332=(($330)>>>(0)) < (($331)>>>(0));
   if ($332) { label = 100; break; } else { label = 97; break; }
  case 97: 
   var $334=(($270+16)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=(($335)|(0))==(($267)|(0));
   if ($336) { label = 98; break; } else { label = 99; break; }
  case 98: 
   HEAP32[(($334)>>2)]=$R7_1;
   label = 101; break;
  case 99: 
   var $339=(($270+20)|0);
   HEAP32[(($339)>>2)]=$R7_1;
   label = 101; break;
  case 100: 
   _abort();
   throw "Reached an unreachable!";
  case 101: 
   var $342=(($R7_1)|(0))==0;
   if ($342) { label = 112; break; } else { label = 102; break; }
  case 102: 
   var $344=$R7_1;
   var $345=HEAP32[((((5784)|0))>>2)];
   var $346=(($344)>>>(0)) < (($345)>>>(0));
   if ($346) { label = 111; break; } else { label = 103; break; }
  case 103: 
   var $348=(($R7_1+24)|0);
   HEAP32[(($348)>>2)]=$270;
   var $_sum22=((($14)+(8))|0);
   var $349=(($mem+$_sum22)|0);
   var $350=$349;
   var $351=HEAP32[(($350)>>2)];
   var $352=(($351)|(0))==0;
   if ($352) { label = 107; break; } else { label = 104; break; }
  case 104: 
   var $354=$351;
   var $355=HEAP32[((((5784)|0))>>2)];
   var $356=(($354)>>>(0)) < (($355)>>>(0));
   if ($356) { label = 106; break; } else { label = 105; break; }
  case 105: 
   var $358=(($R7_1+16)|0);
   HEAP32[(($358)>>2)]=$351;
   var $359=(($351+24)|0);
   HEAP32[(($359)>>2)]=$R7_1;
   label = 107; break;
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   var $_sum23=((($14)+(12))|0);
   var $362=(($mem+$_sum23)|0);
   var $363=$362;
   var $364=HEAP32[(($363)>>2)];
   var $365=(($364)|(0))==0;
   if ($365) { label = 112; break; } else { label = 108; break; }
  case 108: 
   var $367=$364;
   var $368=HEAP32[((((5784)|0))>>2)];
   var $369=(($367)>>>(0)) < (($368)>>>(0));
   if ($369) { label = 110; break; } else { label = 109; break; }
  case 109: 
   var $371=(($R7_1+20)|0);
   HEAP32[(($371)>>2)]=$364;
   var $372=(($364+24)|0);
   HEAP32[(($372)>>2)]=$R7_1;
   label = 112; break;
  case 110: 
   _abort();
   throw "Reached an unreachable!";
  case 111: 
   _abort();
   throw "Reached an unreachable!";
  case 112: 
   var $376=$227 | 1;
   var $377=(($p_0+4)|0);
   HEAP32[(($377)>>2)]=$376;
   var $378=(($189+$227)|0);
   var $379=$378;
   HEAP32[(($379)>>2)]=$227;
   var $380=HEAP32[((((5788)|0))>>2)];
   var $381=(($p_0)|(0))==(($380)|(0));
   if ($381) { label = 113; break; } else { var $psize_1 = $227;label = 115; break; }
  case 113: 
   HEAP32[((((5776)|0))>>2)]=$227;
   label = 143; break;
  case 114: 
   var $384=$194 & -2;
   HEAP32[(($193)>>2)]=$384;
   var $385=$psize_0 | 1;
   var $386=(($p_0+4)|0);
   HEAP32[(($386)>>2)]=$385;
   var $387=(($189+$psize_0)|0);
   var $388=$387;
   HEAP32[(($388)>>2)]=$psize_0;
   var $psize_1 = $psize_0;label = 115; break;
  case 115: 
   var $psize_1;
   var $390=$psize_1 >>> 3;
   var $391=(($psize_1)>>>(0)) < 256;
   if ($391) { label = 116; break; } else { label = 121; break; }
  case 116: 
   var $393=$390 << 1;
   var $394=((5808+($393<<2))|0);
   var $395=$394;
   var $396=HEAP32[((((5768)|0))>>2)];
   var $397=1 << $390;
   var $398=$396 & $397;
   var $399=(($398)|(0))==0;
   if ($399) { label = 117; break; } else { label = 118; break; }
  case 117: 
   var $401=$396 | $397;
   HEAP32[((((5768)|0))>>2)]=$401;
   var $_sum19_pre=((($393)+(2))|0);
   var $_pre=((5808+($_sum19_pre<<2))|0);
   var $F16_0 = $395;var $_pre_phi = $_pre;label = 120; break;
  case 118: 
   var $_sum20=((($393)+(2))|0);
   var $403=((5808+($_sum20<<2))|0);
   var $404=HEAP32[(($403)>>2)];
   var $405=$404;
   var $406=HEAP32[((((5784)|0))>>2)];
   var $407=(($405)>>>(0)) < (($406)>>>(0));
   if ($407) { label = 119; break; } else { var $F16_0 = $404;var $_pre_phi = $403;label = 120; break; }
  case 119: 
   _abort();
   throw "Reached an unreachable!";
  case 120: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$p_0;
   var $410=(($F16_0+12)|0);
   HEAP32[(($410)>>2)]=$p_0;
   var $411=(($p_0+8)|0);
   HEAP32[(($411)>>2)]=$F16_0;
   var $412=(($p_0+12)|0);
   HEAP32[(($412)>>2)]=$395;
   label = 143; break;
  case 121: 
   var $414=$p_0;
   var $415=$psize_1 >>> 8;
   var $416=(($415)|(0))==0;
   if ($416) { var $I18_0 = 0;label = 124; break; } else { label = 122; break; }
  case 122: 
   var $418=(($psize_1)>>>(0)) > 16777215;
   if ($418) { var $I18_0 = 31;label = 124; break; } else { label = 123; break; }
  case 123: 
   var $420=((($415)+(1048320))|0);
   var $421=$420 >>> 16;
   var $422=$421 & 8;
   var $423=$415 << $422;
   var $424=((($423)+(520192))|0);
   var $425=$424 >>> 16;
   var $426=$425 & 4;
   var $427=$426 | $422;
   var $428=$423 << $426;
   var $429=((($428)+(245760))|0);
   var $430=$429 >>> 16;
   var $431=$430 & 2;
   var $432=$427 | $431;
   var $433=(((14)-($432))|0);
   var $434=$428 << $431;
   var $435=$434 >>> 15;
   var $436=((($433)+($435))|0);
   var $437=$436 << 1;
   var $438=((($436)+(7))|0);
   var $439=$psize_1 >>> (($438)>>>(0));
   var $440=$439 & 1;
   var $441=$440 | $437;
   var $I18_0 = $441;label = 124; break;
  case 124: 
   var $I18_0;
   var $443=((6072+($I18_0<<2))|0);
   var $444=(($p_0+28)|0);
   var $I18_0_c=$I18_0;
   HEAP32[(($444)>>2)]=$I18_0_c;
   var $445=(($p_0+20)|0);
   HEAP32[(($445)>>2)]=0;
   var $446=(($p_0+16)|0);
   HEAP32[(($446)>>2)]=0;
   var $447=HEAP32[((((5772)|0))>>2)];
   var $448=1 << $I18_0;
   var $449=$447 & $448;
   var $450=(($449)|(0))==0;
   if ($450) { label = 125; break; } else { label = 126; break; }
  case 125: 
   var $452=$447 | $448;
   HEAP32[((((5772)|0))>>2)]=$452;
   HEAP32[(($443)>>2)]=$414;
   var $453=(($p_0+24)|0);
   var $_c=$443;
   HEAP32[(($453)>>2)]=$_c;
   var $454=(($p_0+12)|0);
   HEAP32[(($454)>>2)]=$p_0;
   var $455=(($p_0+8)|0);
   HEAP32[(($455)>>2)]=$p_0;
   label = 139; break;
  case 126: 
   var $457=HEAP32[(($443)>>2)];
   var $458=(($I18_0)|(0))==31;
   if ($458) { var $463 = 0;label = 128; break; } else { label = 127; break; }
  case 127: 
   var $460=$I18_0 >>> 1;
   var $461=(((25)-($460))|0);
   var $463 = $461;label = 128; break;
  case 128: 
   var $463;
   var $464=(($457+4)|0);
   var $465=HEAP32[(($464)>>2)];
   var $466=$465 & -8;
   var $467=(($466)|(0))==(($psize_1)|(0));
   if ($467) { var $T_0_lcssa = $457;label = 135; break; } else { label = 129; break; }
  case 129: 
   var $468=$psize_1 << $463;
   var $T_071 = $457;var $K19_072 = $468;label = 131; break;
  case 130: 
   var $470=$K19_072 << 1;
   var $471=(($478+4)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=$472 & -8;
   var $474=(($473)|(0))==(($psize_1)|(0));
   if ($474) { var $T_0_lcssa = $478;label = 135; break; } else { var $T_071 = $478;var $K19_072 = $470;label = 131; break; }
  case 131: 
   var $K19_072;
   var $T_071;
   var $476=$K19_072 >>> 31;
   var $477=(($T_071+16+($476<<2))|0);
   var $478=HEAP32[(($477)>>2)];
   var $479=(($478)|(0))==0;
   if ($479) { label = 132; break; } else { label = 130; break; }
  case 132: 
   var $481=$477;
   var $482=HEAP32[((((5784)|0))>>2)];
   var $483=(($481)>>>(0)) < (($482)>>>(0));
   if ($483) { label = 134; break; } else { label = 133; break; }
  case 133: 
   HEAP32[(($477)>>2)]=$414;
   var $485=(($p_0+24)|0);
   var $T_0_c16=$T_071;
   HEAP32[(($485)>>2)]=$T_0_c16;
   var $486=(($p_0+12)|0);
   HEAP32[(($486)>>2)]=$p_0;
   var $487=(($p_0+8)|0);
   HEAP32[(($487)>>2)]=$p_0;
   label = 139; break;
  case 134: 
   _abort();
   throw "Reached an unreachable!";
  case 135: 
   var $T_0_lcssa;
   var $489=(($T_0_lcssa+8)|0);
   var $490=HEAP32[(($489)>>2)];
   var $491=$T_0_lcssa;
   var $492=HEAP32[((((5784)|0))>>2)];
   var $493=(($491)>>>(0)) < (($492)>>>(0));
   if ($493) { label = 138; break; } else { label = 136; break; }
  case 136: 
   var $495=$490;
   var $496=(($495)>>>(0)) < (($492)>>>(0));
   if ($496) { label = 138; break; } else { label = 137; break; }
  case 137: 
   var $498=(($490+12)|0);
   HEAP32[(($498)>>2)]=$414;
   HEAP32[(($489)>>2)]=$414;
   var $499=(($p_0+8)|0);
   var $_c15=$490;
   HEAP32[(($499)>>2)]=$_c15;
   var $500=(($p_0+12)|0);
   var $T_0_c=$T_0_lcssa;
   HEAP32[(($500)>>2)]=$T_0_c;
   var $501=(($p_0+24)|0);
   HEAP32[(($501)>>2)]=0;
   label = 139; break;
  case 138: 
   _abort();
   throw "Reached an unreachable!";
  case 139: 
   var $503=HEAP32[((((5800)|0))>>2)];
   var $504=((($503)-(1))|0);
   HEAP32[((((5800)|0))>>2)]=$504;
   var $505=(($504)|(0))==0;
   if ($505) { var $sp_0_in_i = ((6224)|0);label = 140; break; } else { label = 143; break; }
  case 140: 
   var $sp_0_in_i;
   var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
   var $506=(($sp_0_i)|(0))==0;
   var $507=(($sp_0_i+8)|0);
   if ($506) { label = 141; break; } else { var $sp_0_in_i = $507;label = 140; break; }
  case 141: 
   HEAP32[((((5800)|0))>>2)]=-1;
   label = 143; break;
  case 142: 
   _abort();
   throw "Reached an unreachable!";
  case 143: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _calloc($n_elements, $elem_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($n_elements)|(0))==0;
   if ($1) { var $req_0 = 0;label = 4; break; } else { label = 2; break; }
  case 2: 
   var $3=(Math.imul($elem_size,$n_elements)|0);
   var $4=$elem_size | $n_elements;
   var $5=(($4)>>>(0)) > 65535;
   if ($5) { label = 3; break; } else { var $req_0 = $3;label = 4; break; }
  case 3: 
   var $7=((((($3)>>>(0)))/((($n_elements)>>>(0))))&-1);
   var $8=(($7)|(0))==(($elem_size)|(0));
   var $_=$8 ? $3 : -1;
   var $req_0 = $_;label = 4; break;
  case 4: 
   var $req_0;
   var $10=_malloc($req_0);
   var $11=(($10)|(0))==0;
   if ($11) { label = 7; break; } else { label = 5; break; }
  case 5: 
   var $13=((($10)-(4))|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 3;
   var $17=(($16)|(0))==0;
   if ($17) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _memset($10, 0, $req_0);
   label = 7; break;
  case 7: 
   return $10;
  default: assert(0, "bad label: " + label);
 }
}
Module["_calloc"] = _calloc;
function _realloc($oldmem, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($oldmem)|(0))==0;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=_malloc($bytes);
   var $mem_0 = $3;label = 11; break;
  case 3: 
   var $5=(($bytes)>>>(0)) > 4294967231;
   if ($5) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $7=___errno_location();
   HEAP32[(($7)>>2)]=12;
   var $mem_0 = 0;label = 11; break;
  case 5: 
   var $9=(($bytes)>>>(0)) < 11;
   if ($9) { var $14 = 16;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $11=((($bytes)+(11))|0);
   var $12=$11 & -8;
   var $14 = $12;label = 7; break;
  case 7: 
   var $14;
   var $15=((($oldmem)-(8))|0);
   var $16=$15;
   var $17=_try_realloc_chunk($16, $14);
   var $18=(($17)|(0))==0;
   if ($18) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $20=(($17+8)|0);
   var $21=$20;
   var $mem_0 = $21;label = 11; break;
  case 9: 
   var $23=_malloc($bytes);
   var $24=(($23)|(0))==0;
   if ($24) { var $mem_0 = 0;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $26=((($oldmem)-(4))|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=$28 & -8;
   var $30=$28 & 3;
   var $31=(($30)|(0))==0;
   var $32=$31 ? 8 : 4;
   var $33=((($29)-($32))|0);
   var $34=(($33)>>>(0)) < (($bytes)>>>(0));
   var $35=$34 ? $33 : $bytes;
   assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
   _free($oldmem);
   var $mem_0 = $23;label = 11; break;
  case 11: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _realloc_in_place($oldmem, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($oldmem)|(0))==0;
   if ($1) { label = 7; break; } else { label = 2; break; }
  case 2: 
   var $3=(($bytes)>>>(0)) > 4294967231;
   if ($3) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $5=___errno_location();
   HEAP32[(($5)>>2)]=12;
   label = 7; break;
  case 4: 
   var $7=(($bytes)>>>(0)) < 11;
   if ($7) { var $12 = 16;label = 6; break; } else { label = 5; break; }
  case 5: 
   var $9=((($bytes)+(11))|0);
   var $10=$9 & -8;
   var $12 = $10;label = 6; break;
  case 6: 
   var $12;
   var $13=((($oldmem)-(8))|0);
   var $14=$13;
   var $15=_try_realloc_chunk($14, $12);
   var $16=(($15)|(0))==(($14)|(0));
   var $oldmem_=$16 ? $oldmem : 0;
   return $oldmem_;
  case 7: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _memalign($alignment, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($alignment)>>>(0)) < 9;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=_malloc($bytes);
   var $_0 = $3;label = 4; break;
  case 3: 
   var $5=_internal_memalign($alignment, $bytes);
   var $_0 = $5;label = 4; break;
  case 4: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _internal_memalign($alignment, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($alignment)>>>(0)) < 16;
   var $_alignment=$1 ? 16 : $alignment;
   var $2=((($_alignment)-(1))|0);
   var $3=$2 & $_alignment;
   var $4=(($3)|(0))==0;
   if ($4) { var $_1 = $_alignment;label = 3; break; } else { var $a_0 = 16;label = 2; break; }
  case 2: 
   var $a_0;
   var $5=(($a_0)>>>(0)) < (($_alignment)>>>(0));
   var $6=$a_0 << 1;
   if ($5) { var $a_0 = $6;label = 2; break; } else { var $_1 = $a_0;label = 3; break; }
  case 3: 
   var $_1;
   var $7=(((-64)-($_1))|0);
   var $8=(($7)>>>(0)) > (($bytes)>>>(0));
   if ($8) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $10=___errno_location();
   HEAP32[(($10)>>2)]=12;
   var $mem_0 = 0;label = 18; break;
  case 5: 
   var $12=(($bytes)>>>(0)) < 11;
   if ($12) { var $17 = 16;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $14=((($bytes)+(11))|0);
   var $15=$14 & -8;
   var $17 = $15;label = 7; break;
  case 7: 
   var $17;
   var $18=((($_1)+(12))|0);
   var $19=((($18)+($17))|0);
   var $20=_malloc($19);
   var $21=(($20)|(0))==0;
   if ($21) { var $mem_0 = 0;label = 18; break; } else { label = 8; break; }
  case 8: 
   var $23=((($20)-(8))|0);
   var $24=$23;
   var $25=$20;
   var $26=((($_1)-(1))|0);
   var $27=$25 & $26;
   var $28=(($27)|(0))==0;
   if ($28) { var $p_0 = $24;label = 14; break; } else { label = 9; break; }
  case 9: 
   var $30=(($20+$26)|0);
   var $31=$30;
   var $32=(((-$_1))|0);
   var $33=$31 & $32;
   var $34=$33;
   var $35=((($34)-(8))|0);
   var $36=$35;
   var $37=$23;
   var $38=((($36)-($37))|0);
   var $39=(($38)>>>(0)) > 15;
   if ($39) { var $43 = $35;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $_sum3=((($_1)-(8))|0);
   var $41=(($34+$_sum3)|0);
   var $43 = $41;label = 11; break;
  case 11: 
   var $43;
   var $44=$43;
   var $45=$43;
   var $46=((($45)-($37))|0);
   var $47=((($20)-(4))|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 & -8;
   var $51=((($50)-($46))|0);
   var $52=$49 & 3;
   var $53=(($52)|(0))==0;
   if ($53) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $55=$23;
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)+($46))|0);
   var $58=$43;
   HEAP32[(($58)>>2)]=$57;
   var $59=(($43+4)|0);
   var $60=$59;
   HEAP32[(($60)>>2)]=$51;
   var $p_0 = $44;label = 14; break;
  case 13: 
   var $62=(($43+4)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=$64 & 1;
   var $66=$51 | $65;
   var $67=$66 | 2;
   HEAP32[(($63)>>2)]=$67;
   var $_sum4=((($51)+(4))|0);
   var $68=(($43+$_sum4)|0);
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=$70 | 1;
   HEAP32[(($69)>>2)]=$71;
   var $72=HEAP32[(($48)>>2)];
   var $73=$72 & 1;
   var $74=$46 | $73;
   var $75=$74 | 2;
   HEAP32[(($48)>>2)]=$75;
   var $_sum6=((($46)-(4))|0);
   var $76=(($20+$_sum6)|0);
   var $77=$76;
   var $78=HEAP32[(($77)>>2)];
   var $79=$78 | 1;
   HEAP32[(($77)>>2)]=$79;
   _dispose_chunk($24, $46);
   var $p_0 = $44;label = 14; break;
  case 14: 
   var $p_0;
   var $81=(($p_0+4)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=$82 & 3;
   var $84=(($83)|(0))==0;
   if ($84) { label = 17; break; } else { label = 15; break; }
  case 15: 
   var $86=$82 & -8;
   var $87=((($17)+(16))|0);
   var $88=(($86)>>>(0)) > (($87)>>>(0));
   if ($88) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $90=((($86)-($17))|0);
   var $91=$p_0;
   var $92=(($91+$17)|0);
   var $93=$92;
   var $94=$82 & 1;
   var $95=$17 | $94;
   var $96=$95 | 2;
   HEAP32[(($81)>>2)]=$96;
   var $_sum1=$17 | 4;
   var $97=(($91+$_sum1)|0);
   var $98=$97;
   var $99=$90 | 3;
   HEAP32[(($98)>>2)]=$99;
   var $_sum2=$86 | 4;
   var $100=(($91+$_sum2)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=$102 | 1;
   HEAP32[(($101)>>2)]=$103;
   _dispose_chunk($93, $90);
   label = 17; break;
  case 17: 
   var $105=(($p_0+8)|0);
   var $106=$105;
   var $mem_0 = $106;label = 18; break;
  case 18: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
function _sys_trim($pad) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=(($pad)>>>(0)) < 4294967232;
   if ($13) { label = 6; break; } else { var $released_2 = 0;label = 21; break; }
  case 6: 
   var $15=HEAP32[((((5792)|0))>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { var $released_2 = 0;label = 21; break; } else { label = 7; break; }
  case 7: 
   var $18=((($pad)+(40))|0);
   var $19=HEAP32[((((5780)|0))>>2)];
   var $20=(($19)>>>(0)) > (($18)>>>(0));
   if ($20) { label = 8; break; } else { label = 19; break; }
  case 8: 
   var $22=HEAP32[((((4680)|0))>>2)];
   var $_neg=(((-40)-($pad))|0);
   var $23=((($_neg)-(1))|0);
   var $24=((($23)+($19))|0);
   var $25=((($24)+($22))|0);
   var $26=((((($25)>>>(0)))/((($22)>>>(0))))&-1);
   var $27=((($26)-(1))|0);
   var $28=$15;
   var $sp_0_i = ((6216)|0);label = 9; break;
  case 9: 
   var $sp_0_i;
   var $30=(($sp_0_i)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)>>>(0)) > (($28)>>>(0));
   if ($32) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $34=(($sp_0_i+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($31+$35)|0);
   var $37=(($36)>>>(0)) > (($28)>>>(0));
   if ($37) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $39=(($sp_0_i+8)|0);
   var $40=HEAP32[(($39)>>2)];
   var $sp_0_i = $40;label = 9; break;
  case 12: 
   var $41=(Math.imul($27,$22)|0);
   var $42=(($sp_0_i+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$43 & 8;
   var $45=(($44)|(0))==0;
   if ($45) { label = 13; break; } else { label = 19; break; }
  case 13: 
   var $47=_sbrk(0);
   var $48=HEAP32[(($30)>>2)];
   var $49=HEAP32[(($34)>>2)];
   var $50=(($48+$49)|0);
   var $51=(($47)|(0))==(($50)|(0));
   if ($51) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $53=(((-2147483648)-($22))|0);
   var $54=(($41)>>>(0)) > 2147483646;
   var $_=$54 ? $53 : $41;
   var $55=(((-$_))|0);
   var $56=_sbrk($55);
   var $57=_sbrk(0);
   var $58=(($56)|(0))!=-1;
   var $59=(($57)>>>(0)) < (($47)>>>(0));
   var $or_cond=$58 & $59;
   if ($or_cond) { label = 15; break; } else { label = 19; break; }
  case 15: 
   var $61=$47;
   var $62=$57;
   var $63=((($61)-($62))|0);
   var $64=(($47)|(0))==(($57)|(0));
   if ($64) { label = 19; break; } else { label = 16; break; }
  case 16: 
   var $66=HEAP32[(($34)>>2)];
   var $67=((($66)-($63))|0);
   HEAP32[(($34)>>2)]=$67;
   var $68=HEAP32[((((6200)|0))>>2)];
   var $69=((($68)-($63))|0);
   HEAP32[((((6200)|0))>>2)]=$69;
   var $70=HEAP32[((((5792)|0))>>2)];
   var $71=HEAP32[((((5780)|0))>>2)];
   var $72=((($71)-($63))|0);
   var $73=$70;
   var $74=(($70+8)|0);
   var $75=$74;
   var $76=$75 & 7;
   var $77=(($76)|(0))==0;
   if ($77) { var $82 = 0;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $79=(((-$75))|0);
   var $80=$79 & 7;
   var $82 = $80;label = 18; break;
  case 18: 
   var $82;
   var $83=(($73+$82)|0);
   var $84=$83;
   var $85=((($72)-($82))|0);
   HEAP32[((((5792)|0))>>2)]=$84;
   HEAP32[((((5780)|0))>>2)]=$85;
   var $86=$85 | 1;
   var $_sum_i=((($82)+(4))|0);
   var $87=(($73+$_sum_i)|0);
   var $88=$87;
   HEAP32[(($88)>>2)]=$86;
   var $_sum2_i=((($72)+(4))|0);
   var $89=(($73+$_sum2_i)|0);
   var $90=$89;
   HEAP32[(($90)>>2)]=40;
   var $91=HEAP32[((((4688)|0))>>2)];
   HEAP32[((((5796)|0))>>2)]=$91;
   var $phitmp=(($47)|(0))!=(($57)|(0));
   var $phitmp8=(($phitmp)&(1));
   var $released_2 = $phitmp8;label = 21; break;
  case 19: 
   var $92=HEAP32[((((5780)|0))>>2)];
   var $93=HEAP32[((((5796)|0))>>2)];
   var $94=(($92)>>>(0)) > (($93)>>>(0));
   if ($94) { label = 20; break; } else { var $released_2 = 0;label = 21; break; }
  case 20: 
   HEAP32[((((5796)|0))>>2)]=-1;
   var $released_2 = 0;label = 21; break;
  case 21: 
   var $released_2;
   return $released_2;
  default: assert(0, "bad label: " + label);
 }
}
function _try_realloc_chunk($p, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($p+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$2 & -8;
   var $4=$p;
   var $5=(($4+$3)|0);
   var $6=$5;
   var $7=HEAP32[((((5784)|0))>>2)];
   var $8=(($4)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 72; break; } else { label = 2; break; }
  case 2: 
   var $10=$2 & 3;
   var $11=(($10)|(0))!=1;
   var $12=(($4)>>>(0)) < (($5)>>>(0));
   var $or_cond=$11 & $12;
   if ($or_cond) { label = 3; break; } else { label = 72; break; }
  case 3: 
   var $_sum3334=$3 | 4;
   var $14=(($4+$_sum3334)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 1;
   var $phitmp=(($17)|(0))==0;
   if ($phitmp) { label = 72; break; } else { label = 4; break; }
  case 4: 
   var $19=(($10)|(0))==0;
   if ($19) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $21=(($nb)>>>(0)) < 256;
   if ($21) { var $newp_0 = 0;label = 73; break; } else { label = 6; break; }
  case 6: 
   var $23=((($nb)+(4))|0);
   var $24=(($3)>>>(0)) < (($23)>>>(0));
   if ($24) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $26=((($3)-($nb))|0);
   var $27=HEAP32[((((4680)|0))>>2)];
   var $28=$27 << 1;
   var $29=(($26)>>>(0)) > (($28)>>>(0));
   if ($29) { label = 8; break; } else { var $newp_0 = $p;label = 73; break; }
  case 8: 
   var $newp_0 = 0;label = 73; break;
  case 9: 
   var $32=(($3)>>>(0)) < (($nb)>>>(0));
   if ($32) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $34=((($3)-($nb))|0);
   var $35=(($34)>>>(0)) > 15;
   if ($35) { label = 11; break; } else { var $newp_0 = $p;label = 73; break; }
  case 11: 
   var $37=(($4+$nb)|0);
   var $38=$37;
   var $39=$2 & 1;
   var $40=$39 | $nb;
   var $41=$40 | 2;
   HEAP32[(($1)>>2)]=$41;
   var $_sum29=((($nb)+(4))|0);
   var $42=(($4+$_sum29)|0);
   var $43=$42;
   var $44=$34 | 3;
   HEAP32[(($43)>>2)]=$44;
   var $45=HEAP32[(($15)>>2)];
   var $46=$45 | 1;
   HEAP32[(($15)>>2)]=$46;
   _dispose_chunk($38, $34);
   var $newp_0 = $p;label = 73; break;
  case 12: 
   var $48=HEAP32[((((5792)|0))>>2)];
   var $49=(($6)|(0))==(($48)|(0));
   if ($49) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $51=HEAP32[((((5780)|0))>>2)];
   var $52=((($51)+($3))|0);
   var $53=(($52)>>>(0)) > (($nb)>>>(0));
   if ($53) { label = 14; break; } else { var $newp_0 = 0;label = 73; break; }
  case 14: 
   var $55=((($52)-($nb))|0);
   var $56=(($4+$nb)|0);
   var $57=$56;
   var $58=$2 & 1;
   var $59=$58 | $nb;
   var $60=$59 | 2;
   HEAP32[(($1)>>2)]=$60;
   var $_sum28=((($nb)+(4))|0);
   var $61=(($4+$_sum28)|0);
   var $62=$61;
   var $63=$55 | 1;
   HEAP32[(($62)>>2)]=$63;
   HEAP32[((((5792)|0))>>2)]=$57;
   HEAP32[((((5780)|0))>>2)]=$55;
   var $newp_0 = $p;label = 73; break;
  case 15: 
   var $65=HEAP32[((((5788)|0))>>2)];
   var $66=(($6)|(0))==(($65)|(0));
   if ($66) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $68=HEAP32[((((5776)|0))>>2)];
   var $69=((($68)+($3))|0);
   var $70=(($69)>>>(0)) < (($nb)>>>(0));
   if ($70) { var $newp_0 = 0;label = 73; break; } else { label = 17; break; }
  case 17: 
   var $72=((($69)-($nb))|0);
   var $73=(($72)>>>(0)) > 15;
   if ($73) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $75=(($4+$nb)|0);
   var $76=$75;
   var $77=(($4+$69)|0);
   var $78=$2 & 1;
   var $79=$78 | $nb;
   var $80=$79 | 2;
   HEAP32[(($1)>>2)]=$80;
   var $_sum25=((($nb)+(4))|0);
   var $81=(($4+$_sum25)|0);
   var $82=$81;
   var $83=$72 | 1;
   HEAP32[(($82)>>2)]=$83;
   var $84=$77;
   HEAP32[(($84)>>2)]=$72;
   var $_sum26=((($69)+(4))|0);
   var $85=(($4+$_sum26)|0);
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=$87 & -2;
   HEAP32[(($86)>>2)]=$88;
   var $storemerge = $76;var $storemerge27 = $72;label = 20; break;
  case 19: 
   var $90=$2 & 1;
   var $91=$90 | $69;
   var $92=$91 | 2;
   HEAP32[(($1)>>2)]=$92;
   var $_sum23=((($69)+(4))|0);
   var $93=(($4+$_sum23)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=$95 | 1;
   HEAP32[(($94)>>2)]=$96;
   var $storemerge = 0;var $storemerge27 = 0;label = 20; break;
  case 20: 
   var $storemerge27;
   var $storemerge;
   HEAP32[((((5776)|0))>>2)]=$storemerge27;
   HEAP32[((((5788)|0))>>2)]=$storemerge;
   var $newp_0 = $p;label = 73; break;
  case 21: 
   var $99=$16 & 2;
   var $100=(($99)|(0))==0;
   if ($100) { label = 22; break; } else { var $newp_0 = 0;label = 73; break; }
  case 22: 
   var $102=$16 & -8;
   var $103=((($102)+($3))|0);
   var $104=(($103)>>>(0)) < (($nb)>>>(0));
   if ($104) { var $newp_0 = 0;label = 73; break; } else { label = 23; break; }
  case 23: 
   var $106=((($103)-($nb))|0);
   var $107=$16 >>> 3;
   var $108=(($16)>>>(0)) < 256;
   if ($108) { label = 24; break; } else { label = 36; break; }
  case 24: 
   var $_sum17=((($3)+(8))|0);
   var $110=(($4+$_sum17)|0);
   var $111=$110;
   var $112=HEAP32[(($111)>>2)];
   var $_sum18=((($3)+(12))|0);
   var $113=(($4+$_sum18)|0);
   var $114=$113;
   var $115=HEAP32[(($114)>>2)];
   var $116=$107 << 1;
   var $117=((5808+($116<<2))|0);
   var $118=$117;
   var $119=(($112)|(0))==(($118)|(0));
   if ($119) { label = 27; break; } else { label = 25; break; }
  case 25: 
   var $121=$112;
   var $122=(($121)>>>(0)) < (($7)>>>(0));
   if ($122) { label = 35; break; } else { label = 26; break; }
  case 26: 
   var $124=(($112+12)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125)|(0))==(($6)|(0));
   if ($126) { label = 27; break; } else { label = 35; break; }
  case 27: 
   var $127=(($115)|(0))==(($112)|(0));
   if ($127) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $129=1 << $107;
   var $130=$129 ^ -1;
   var $131=HEAP32[((((5768)|0))>>2)];
   var $132=$131 & $130;
   HEAP32[((((5768)|0))>>2)]=$132;
   label = 69; break;
  case 29: 
   var $134=(($115)|(0))==(($118)|(0));
   if ($134) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $_pre=(($115+8)|0);
   var $_pre_phi = $_pre;label = 33; break;
  case 31: 
   var $136=$115;
   var $137=(($136)>>>(0)) < (($7)>>>(0));
   if ($137) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $139=(($115+8)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140)|(0))==(($6)|(0));
   if ($141) { var $_pre_phi = $139;label = 33; break; } else { label = 34; break; }
  case 33: 
   var $_pre_phi;
   var $142=(($112+12)|0);
   HEAP32[(($142)>>2)]=$115;
   HEAP32[(($_pre_phi)>>2)]=$112;
   label = 69; break;
  case 34: 
   _abort();
   throw "Reached an unreachable!";
  case 35: 
   _abort();
   throw "Reached an unreachable!";
  case 36: 
   var $144=$5;
   var $_sum=((($3)+(24))|0);
   var $145=(($4+$_sum)|0);
   var $146=$145;
   var $147=HEAP32[(($146)>>2)];
   var $_sum2=((($3)+(12))|0);
   var $148=(($4+$_sum2)|0);
   var $149=$148;
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150)|(0))==(($144)|(0));
   if ($151) { label = 42; break; } else { label = 37; break; }
  case 37: 
   var $_sum14=((($3)+(8))|0);
   var $153=(($4+$_sum14)|0);
   var $154=$153;
   var $155=HEAP32[(($154)>>2)];
   var $156=$155;
   var $157=(($156)>>>(0)) < (($7)>>>(0));
   if ($157) { label = 41; break; } else { label = 38; break; }
  case 38: 
   var $159=(($155+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=(($160)|(0))==(($144)|(0));
   if ($161) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $163=(($150+8)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==(($144)|(0));
   if ($165) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($159)>>2)]=$150;
   HEAP32[(($163)>>2)]=$155;
   var $R_1 = $150;label = 49; break;
  case 41: 
   _abort();
   throw "Reached an unreachable!";
  case 42: 
   var $_sum4=((($3)+(20))|0);
   var $168=(($4+$_sum4)|0);
   var $169=$168;
   var $170=HEAP32[(($169)>>2)];
   var $171=(($170)|(0))==0;
   if ($171) { label = 43; break; } else { var $R_0 = $170;var $RP_0 = $169;label = 44; break; }
  case 43: 
   var $_sum3=((($3)+(16))|0);
   var $173=(($4+$_sum3)|0);
   var $174=$173;
   var $175=HEAP32[(($174)>>2)];
   var $176=(($175)|(0))==0;
   if ($176) { var $R_1 = 0;label = 49; break; } else { var $R_0 = $175;var $RP_0 = $174;label = 44; break; }
  case 44: 
   var $RP_0;
   var $R_0;
   var $177=(($R_0+20)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178)|(0))==0;
   if ($179) { label = 45; break; } else { var $R_0 = $178;var $RP_0 = $177;label = 44; break; }
  case 45: 
   var $181=(($R_0+16)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182)|(0))==0;
   if ($183) { label = 46; break; } else { var $R_0 = $182;var $RP_0 = $181;label = 44; break; }
  case 46: 
   var $185=$RP_0;
   var $186=(($185)>>>(0)) < (($7)>>>(0));
   if ($186) { label = 48; break; } else { label = 47; break; }
  case 47: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $R_1;
   var $190=(($147)|(0))==0;
   if ($190) { label = 69; break; } else { label = 50; break; }
  case 50: 
   var $_sum11=((($3)+(28))|0);
   var $192=(($4+$_sum11)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=((6072+($194<<2))|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($144)|(0))==(($196)|(0));
   if ($197) { label = 51; break; } else { label = 53; break; }
  case 51: 
   HEAP32[(($195)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 52; break; } else { label = 59; break; }
  case 52: 
   var $199=HEAP32[(($193)>>2)];
   var $200=1 << $199;
   var $201=$200 ^ -1;
   var $202=HEAP32[((((5772)|0))>>2)];
   var $203=$202 & $201;
   HEAP32[((((5772)|0))>>2)]=$203;
   label = 69; break;
  case 53: 
   var $205=$147;
   var $206=HEAP32[((((5784)|0))>>2)];
   var $207=(($205)>>>(0)) < (($206)>>>(0));
   if ($207) { label = 57; break; } else { label = 54; break; }
  case 54: 
   var $209=(($147+16)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=(($210)|(0))==(($144)|(0));
   if ($211) { label = 55; break; } else { label = 56; break; }
  case 55: 
   HEAP32[(($209)>>2)]=$R_1;
   label = 58; break;
  case 56: 
   var $214=(($147+20)|0);
   HEAP32[(($214)>>2)]=$R_1;
   label = 58; break;
  case 57: 
   _abort();
   throw "Reached an unreachable!";
  case 58: 
   var $217=(($R_1)|(0))==0;
   if ($217) { label = 69; break; } else { label = 59; break; }
  case 59: 
   var $219=$R_1;
   var $220=HEAP32[((((5784)|0))>>2)];
   var $221=(($219)>>>(0)) < (($220)>>>(0));
   if ($221) { label = 68; break; } else { label = 60; break; }
  case 60: 
   var $223=(($R_1+24)|0);
   HEAP32[(($223)>>2)]=$147;
   var $_sum12=((($3)+(16))|0);
   var $224=(($4+$_sum12)|0);
   var $225=$224;
   var $226=HEAP32[(($225)>>2)];
   var $227=(($226)|(0))==0;
   if ($227) { label = 64; break; } else { label = 61; break; }
  case 61: 
   var $229=$226;
   var $230=HEAP32[((((5784)|0))>>2)];
   var $231=(($229)>>>(0)) < (($230)>>>(0));
   if ($231) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $233=(($R_1+16)|0);
   HEAP32[(($233)>>2)]=$226;
   var $234=(($226+24)|0);
   HEAP32[(($234)>>2)]=$R_1;
   label = 64; break;
  case 63: 
   _abort();
   throw "Reached an unreachable!";
  case 64: 
   var $_sum13=((($3)+(20))|0);
   var $237=(($4+$_sum13)|0);
   var $238=$237;
   var $239=HEAP32[(($238)>>2)];
   var $240=(($239)|(0))==0;
   if ($240) { label = 69; break; } else { label = 65; break; }
  case 65: 
   var $242=$239;
   var $243=HEAP32[((((5784)|0))>>2)];
   var $244=(($242)>>>(0)) < (($243)>>>(0));
   if ($244) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $246=(($R_1+20)|0);
   HEAP32[(($246)>>2)]=$239;
   var $247=(($239+24)|0);
   HEAP32[(($247)>>2)]=$R_1;
   label = 69; break;
  case 67: 
   _abort();
   throw "Reached an unreachable!";
  case 68: 
   _abort();
   throw "Reached an unreachable!";
  case 69: 
   var $251=(($106)>>>(0)) < 16;
   if ($251) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $253=HEAP32[(($1)>>2)];
   var $254=$253 & 1;
   var $255=$103 | $254;
   var $256=$255 | 2;
   HEAP32[(($1)>>2)]=$256;
   var $_sum910=$103 | 4;
   var $257=(($4+$_sum910)|0);
   var $258=$257;
   var $259=HEAP32[(($258)>>2)];
   var $260=$259 | 1;
   HEAP32[(($258)>>2)]=$260;
   var $newp_0 = $p;label = 73; break;
  case 71: 
   var $262=(($4+$nb)|0);
   var $263=$262;
   var $264=HEAP32[(($1)>>2)];
   var $265=$264 & 1;
   var $266=$265 | $nb;
   var $267=$266 | 2;
   HEAP32[(($1)>>2)]=$267;
   var $_sum5=((($nb)+(4))|0);
   var $268=(($4+$_sum5)|0);
   var $269=$268;
   var $270=$106 | 3;
   HEAP32[(($269)>>2)]=$270;
   var $_sum78=$103 | 4;
   var $271=(($4+$_sum78)|0);
   var $272=$271;
   var $273=HEAP32[(($272)>>2)];
   var $274=$273 | 1;
   HEAP32[(($272)>>2)]=$274;
   _dispose_chunk($263, $106);
   var $newp_0 = $p;label = 73; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  case 73: 
   var $newp_0;
   return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc_footprint() {
 var label = 0;
 var $1=HEAP32[((((6200)|0))>>2)];
 return $1;
}
function _malloc_max_footprint() {
 var label = 0;
 var $1=HEAP32[((((6204)|0))>>2)];
 return $1;
}
function _malloc_footprint_limit() {
 var label = 0;
 var $1=HEAP32[((((6208)|0))>>2)];
 var $2=(($1)|(0))==0;
 var $3=$2 ? -1 : $1;
 return $3;
}
function _malloc_set_footprint_limit($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($bytes)|(0))==-1;
   if ($1) { var $result_0 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=HEAP32[((((4680)|0))>>2)];
   var $4=((($bytes)-(1))|0);
   var $5=((($4)+($3))|0);
   var $6=(((-$3))|0);
   var $7=$5 & $6;
   var $result_0 = $7;label = 3; break;
  case 3: 
   var $result_0;
   HEAP32[((((6208)|0))>>2)]=$result_0;
   return $result_0;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc_usable_size($mem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($mem)|(0))==0;
   if ($1) { var $_0 = 0;label = 4; break; } else { label = 2; break; }
  case 2: 
   var $3=((($mem)-(4))|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 3;
   var $7=(($6)|(0))==1;
   if ($7) { var $_0 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=$5 & -8;
   var $10=(($6)|(0))==0;
   var $11=$10 ? 8 : 4;
   var $12=((($9)-($11))|0);
   var $_0 = $12;label = 4; break;
  case 4: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _posix_memalign($pp, $alignment, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($alignment)|(0))==8;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=_malloc($bytes);
   var $mem_0 = $3;label = 7; break;
  case 3: 
   var $5=$alignment >>> 2;
   var $6=$alignment & 3;
   var $7=(($6)|(0))!=0;
   var $8=(($5)|(0))==0;
   var $or_cond=$7 | $8;
   if ($or_cond) { var $_0 = 22;label = 9; break; } else { label = 4; break; }
  case 4: 
   var $10=((($5)+(1073741823))|0);
   var $11=$10 & $5;
   var $12=(($11)|(0))==0;
   if ($12) { label = 5; break; } else { var $_0 = 22;label = 9; break; }
  case 5: 
   var $14=(((-64)-($alignment))|0);
   var $15=(($14)>>>(0)) < (($bytes)>>>(0));
   if ($15) { var $_0 = 12;label = 9; break; } else { label = 6; break; }
  case 6: 
   var $17=(($alignment)>>>(0)) < 16;
   var $_alignment=$17 ? 16 : $alignment;
   var $18=_internal_memalign($_alignment, $bytes);
   var $mem_0 = $18;label = 7; break;
  case 7: 
   var $mem_0;
   var $20=(($mem_0)|(0))==0;
   if ($20) { var $_0 = 12;label = 9; break; } else { label = 8; break; }
  case 8: 
   HEAP32[(($pp)>>2)]=$mem_0;
   var $_0 = 0;label = 9; break;
  case 9: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _independent_calloc($n_elements, $elem_size, $chunks) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $sz=sp;
 HEAP32[(($sz)>>2)]=$elem_size;
 var $1=_ialloc($n_elements, $sz, 3, $chunks);
 STACKTOP = sp;
 return $1;
}
function _independent_comalloc($n_elements, $sizes, $chunks) {
 var label = 0;
 var $1=_ialloc($n_elements, $sizes, 0, $chunks);
 return $1;
}
function _valloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=HEAP32[((((4676)|0))>>2)];
   var $14=_memalign($13, $bytes);
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function _pvalloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=HEAP32[((((4676)|0))>>2)];
   var $14=((($bytes)-(1))|0);
   var $15=((($14)+($13))|0);
   var $16=(((-$13))|0);
   var $17=$15 & $16;
   var $18=_memalign($13, $17);
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _ialloc($n_elements, $sizes, $opts, $chunks) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=(($chunks)|(0))==0;
   var $14=(($n_elements)|(0))==0;
   if ($13) { label = 7; break; } else { label = 6; break; }
  case 6: 
   if ($14) { var $_0 = $chunks;label = 31; break; } else { var $marray_0 = $chunks;var $array_size_0 = 0;label = 11; break; }
  case 7: 
   if ($14) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $18=_malloc(0);
   var $19=$18;
   var $_0 = $19;label = 31; break;
  case 9: 
   var $21=$n_elements << 2;
   var $22=(($21)>>>(0)) < 11;
   if ($22) { var $marray_0 = 0;var $array_size_0 = 16;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $24=((($21)+(11))|0);
   var $25=$24 & -8;
   var $marray_0 = 0;var $array_size_0 = $25;label = 11; break;
  case 11: 
   var $array_size_0;
   var $marray_0;
   var $27=$opts & 1;
   var $28=(($27)|(0))==0;
   if ($28) { label = 12; break; } else { label = 13; break; }
  case 12: 
   if ($14) { var $element_size_0 = 0;var $contents_size_1 = 0;label = 19; break; } else { var $contents_size_07 = 0;var $i_08 = 0;label = 16; break; }
  case 13: 
   var $30=HEAP32[(($sizes)>>2)];
   var $31=(($30)>>>(0)) < 11;
   if ($31) { var $36 = 16;label = 15; break; } else { label = 14; break; }
  case 14: 
   var $33=((($30)+(11))|0);
   var $34=$33 & -8;
   var $36 = $34;label = 15; break;
  case 15: 
   var $36;
   var $37=(Math.imul($36,$n_elements)|0);
   var $element_size_0 = $36;var $contents_size_1 = $37;label = 19; break;
  case 16: 
   var $i_08;
   var $contents_size_07;
   var $38=(($sizes+($i_08<<2))|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)>>>(0)) < 11;
   if ($40) { var $45 = 16;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $42=((($39)+(11))|0);
   var $43=$42 & -8;
   var $45 = $43;label = 18; break;
  case 18: 
   var $45;
   var $46=((($45)+($contents_size_07))|0);
   var $47=((($i_08)+(1))|0);
   var $48=(($47)|(0))==(($n_elements)|(0));
   if ($48) { var $element_size_0 = 0;var $contents_size_1 = $46;label = 19; break; } else { var $contents_size_07 = $46;var $i_08 = $47;label = 16; break; }
  case 19: 
   var $contents_size_1;
   var $element_size_0;
   var $49=((($array_size_0)-(4))|0);
   var $50=((($49)+($contents_size_1))|0);
   var $51=_malloc($50);
   var $52=(($51)|(0))==0;
   if ($52) { var $_0 = 0;label = 31; break; } else { label = 20; break; }
  case 20: 
   var $54=((($51)-(8))|0);
   var $55=((($51)-(4))|0);
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=$57 & -8;
   var $59=$opts & 2;
   var $60=(($59)|(0))==0;
   if ($60) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $62=(((-4)-($array_size_0))|0);
   var $63=((($62)+($58))|0);
   _memset($51, 0, $63);
   label = 22; break;
  case 22: 
   var $65=(($marray_0)|(0))==0;
   if ($65) { label = 23; break; } else { var $marray_1 = $marray_0;var $remainder_size_0 = $58;label = 24; break; }
  case 23: 
   var $67=((($58)-($contents_size_1))|0);
   var $68=(($51+$contents_size_1)|0);
   var $69=$68;
   var $70=$67 | 3;
   var $_sum2=((($contents_size_1)-(4))|0);
   var $71=(($51+$_sum2)|0);
   var $72=$71;
   HEAP32[(($72)>>2)]=$70;
   var $marray_1 = $69;var $remainder_size_0 = $contents_size_1;label = 24; break;
  case 24: 
   var $remainder_size_0;
   var $marray_1;
   HEAP32[(($marray_1)>>2)]=$51;
   var $74=((($n_elements)-(1))|0);
   var $75=(($74)|(0))==0;
   if ($75) { var $p_0_in_lcssa = $54;var $remainder_size_1_lcssa = $remainder_size_0;label = 30; break; } else { label = 25; break; }
  case 25: 
   var $76=(($element_size_0)|(0))==0;
   if ($76) { var $p_0_in3_us = $54;var $remainder_size_14_us = $remainder_size_0;var $i_15_us = 0;label = 26; break; } else { var $p_0_in3 = $54;var $remainder_size_14 = $remainder_size_0;var $i_15 = 0;label = 29; break; }
  case 26: 
   var $i_15_us;
   var $remainder_size_14_us;
   var $p_0_in3_us;
   var $77=(($sizes+($i_15_us<<2))|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78)>>>(0)) < 11;
   if ($79) { var $size_0_us = 16;label = 28; break; } else { label = 27; break; }
  case 27: 
   var $81=((($78)+(11))|0);
   var $82=$81 & -8;
   var $size_0_us = $82;label = 28; break;
  case 28: 
   var $size_0_us;
   var $84=((($remainder_size_14_us)-($size_0_us))|0);
   var $85=$size_0_us | 3;
   var $86=(($p_0_in3_us+4)|0);
   var $87=$86;
   HEAP32[(($87)>>2)]=$85;
   var $88=(($p_0_in3_us+$size_0_us)|0);
   var $89=((($i_15_us)+(1))|0);
   var $_sum11=((($size_0_us)+(8))|0);
   var $90=(($p_0_in3_us+$_sum11)|0);
   var $91=(($marray_1+($89<<2))|0);
   HEAP32[(($91)>>2)]=$90;
   var $92=(($89)|(0))==(($74)|(0));
   if ($92) { var $p_0_in_lcssa = $88;var $remainder_size_1_lcssa = $84;label = 30; break; } else { var $p_0_in3_us = $88;var $remainder_size_14_us = $84;var $i_15_us = $89;label = 26; break; }
  case 29: 
   var $i_15;
   var $remainder_size_14;
   var $p_0_in3;
   var $94=((($remainder_size_14)-($element_size_0))|0);
   var $95=$element_size_0 | 3;
   var $96=(($p_0_in3+4)|0);
   var $97=$96;
   HEAP32[(($97)>>2)]=$95;
   var $98=(($p_0_in3+$element_size_0)|0);
   var $99=((($i_15)+(1))|0);
   var $_sum=((($element_size_0)+(8))|0);
   var $100=(($p_0_in3+$_sum)|0);
   var $101=(($marray_1+($99<<2))|0);
   HEAP32[(($101)>>2)]=$100;
   var $102=(($99)|(0))==(($74)|(0));
   if ($102) { var $p_0_in_lcssa = $98;var $remainder_size_1_lcssa = $94;label = 30; break; } else { var $p_0_in3 = $98;var $remainder_size_14 = $94;var $i_15 = $99;label = 29; break; }
  case 30: 
   var $remainder_size_1_lcssa;
   var $p_0_in_lcssa;
   var $103=$remainder_size_1_lcssa | 3;
   var $104=(($p_0_in_lcssa+4)|0);
   var $105=$104;
   HEAP32[(($105)>>2)]=$103;
   var $_0 = $marray_1;label = 31; break;
  case 31: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _bulk_free($array, $nelem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($array+($nelem<<2))|0);
   var $2=(($nelem)|(0))==0;
   if ($2) { label = 12; break; } else { var $a_07_i = $array;label = 2; break; }
  case 2: 
   var $a_07_i;
   var $3=HEAP32[(($a_07_i)>>2)];
   var $4=(($3)|(0))==0;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $_pre_i=(($a_07_i+4)|0);
   var $_pre_phi_i = $_pre_i;label = 11; break;
  case 4: 
   var $6=((($3)-(8))|0);
   var $7=$6;
   var $8=((($3)-(4))|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & -8;
   HEAP32[(($a_07_i)>>2)]=0;
   var $12=HEAP32[((((5784)|0))>>2)];
   var $13=(($6)>>>(0)) < (($12)>>>(0));
   if ($13) { label = 10; break; } else { label = 5; break; }
  case 5: 
   var $15=HEAP32[(($9)>>2)];
   var $16=$15 & 3;
   var $17=(($16)|(0))==1;
   if ($17) { label = 10; break; } else { label = 6; break; }
  case 6: 
   var $19=(($a_07_i+4)|0);
   var $20=((($15)-(8))|0);
   var $_sum_i=$20 & -8;
   var $21=(($19)|(0))==(($1)|(0));
   if ($21) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $23=HEAP32[(($19)>>2)];
   var $_sum2_i=((($_sum_i)+(8))|0);
   var $24=(($3+$_sum2_i)|0);
   var $25=(($23)|(0))==(($24)|(0));
   if ($25) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $_sum34_i=$_sum_i | 4;
   var $27=(($3+$_sum34_i)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 & -8;
   var $31=((($30)+($11))|0);
   var $32=$15 & 1;
   var $33=$32 | $31;
   var $34=$33 | 2;
   HEAP32[(($9)>>2)]=$34;
   var $_sum6_i=((($31)-(4))|0);
   var $35=(($3+$_sum6_i)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37 | 1;
   HEAP32[(($36)>>2)]=$38;
   HEAP32[(($19)>>2)]=$3;
   var $_pre_phi_i = $19;label = 11; break;
  case 9: 
   _dispose_chunk($7, $11);
   var $_pre_phi_i = $19;label = 11; break;
  case 10: 
   _abort();
   throw "Reached an unreachable!";
  case 11: 
   var $_pre_phi_i;
   var $41=(($_pre_phi_i)|(0))==(($1)|(0));
   if ($41) { label = 12; break; } else { var $a_07_i = $_pre_phi_i;label = 2; break; }
  case 12: 
   var $42=HEAP32[((((5780)|0))>>2)];
   var $43=HEAP32[((((5796)|0))>>2)];
   var $44=(($42)>>>(0)) > (($43)>>>(0));
   if ($44) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $46=_sys_trim(0);
   label = 14; break;
  case 14: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc_trim($pad) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=_sys_trim($pad);
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _mallinfo($agg_result) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=HEAP32[((((5792)|0))>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { var $nm_sroa_8_0_i = 0;var $nm_sroa_0_0_i = 0;var $nm_sroa_1_0_i = 0;var $nm_sroa_3_0_i = 0;var $nm_sroa_4_0_i = 0;var $nm_sroa_6_0_i = 0;var $nm_sroa_7_0_i = 0;label = 17; break; } else { label = 6; break; }
  case 6: 
   var $16=HEAP32[((((5780)|0))>>2)];
   var $17=((($16)+(40))|0);
   var $nfree_08_i = 1;var $mfree_09_i = $17;var $sum_010_i = $17;var $s_011_i = ((6216)|0);label = 7; break;
  case 7: 
   var $s_011_i;
   var $sum_010_i;
   var $mfree_09_i;
   var $nfree_08_i;
   var $19=(($s_011_i)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+8)|0);
   var $22=$21;
   var $23=$22 & 7;
   var $24=(($23)|(0))==0;
   if ($24) { var $28 = 0;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $26=(((-$22))|0);
   var $27=$26 & 7;
   var $28 = $27;label = 9; break;
  case 9: 
   var $28;
   var $29=(($20+$28)|0);
   var $30=(($s_011_i+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($20+$31)|0);
   var $nfree_12_i = $nfree_08_i;var $mfree_13_i = $mfree_09_i;var $sum_14_i = $sum_010_i;var $q_0_in5_i = $29;label = 10; break;
  case 10: 
   var $q_0_in5_i;
   var $sum_14_i;
   var $mfree_13_i;
   var $nfree_12_i;
   var $q_0_i=$q_0_in5_i;
   var $34=(($q_0_in5_i)>>>(0)) >= (($32)>>>(0));
   var $35=(($q_0_i)|(0))==(($13)|(0));
   var $or_cond_i=$34 | $35;
   if ($or_cond_i) { var $nfree_1_lcssa_i = $nfree_12_i;var $mfree_1_lcssa_i = $mfree_13_i;var $sum_1_lcssa_i = $sum_14_i;label = 15; break; } else { label = 11; break; }
  case 11: 
   var $37=(($q_0_in5_i+4)|0);
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==7;
   if ($40) { var $nfree_1_lcssa_i = $nfree_12_i;var $mfree_1_lcssa_i = $mfree_13_i;var $sum_1_lcssa_i = $sum_14_i;label = 15; break; } else { label = 12; break; }
  case 12: 
   var $42=$39 & -8;
   var $43=((($42)+($sum_14_i))|0);
   var $44=$39 & 3;
   var $45=(($44)|(0))==1;
   if ($45) { label = 13; break; } else { var $mfree_2_i = $mfree_13_i;var $nfree_2_i = $nfree_12_i;label = 14; break; }
  case 13: 
   var $47=((($42)+($mfree_13_i))|0);
   var $48=((($nfree_12_i)+(1))|0);
   var $mfree_2_i = $47;var $nfree_2_i = $48;label = 14; break;
  case 14: 
   var $nfree_2_i;
   var $mfree_2_i;
   var $50=(($q_0_in5_i+$42)|0);
   var $51=(($50)>>>(0)) < (($20)>>>(0));
   if ($51) { var $nfree_1_lcssa_i = $nfree_2_i;var $mfree_1_lcssa_i = $mfree_2_i;var $sum_1_lcssa_i = $43;label = 15; break; } else { var $nfree_12_i = $nfree_2_i;var $mfree_13_i = $mfree_2_i;var $sum_14_i = $43;var $q_0_in5_i = $50;label = 10; break; }
  case 15: 
   var $sum_1_lcssa_i;
   var $mfree_1_lcssa_i;
   var $nfree_1_lcssa_i;
   var $52=(($s_011_i+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53)|(0))==0;
   if ($54) { label = 16; break; } else { var $nfree_08_i = $nfree_1_lcssa_i;var $mfree_09_i = $mfree_1_lcssa_i;var $sum_010_i = $sum_1_lcssa_i;var $s_011_i = $53;label = 7; break; }
  case 16: 
   var $56=HEAP32[((((6200)|0))>>2)];
   var $57=((($56)-($sum_1_lcssa_i))|0);
   var $58=HEAP32[((((6204)|0))>>2)];
   var $59=((($56)-($mfree_1_lcssa_i))|0);
   var $nm_sroa_8_0_i = $16;var $nm_sroa_0_0_i = $sum_1_lcssa_i;var $nm_sroa_1_0_i = $nfree_1_lcssa_i;var $nm_sroa_3_0_i = $57;var $nm_sroa_4_0_i = $58;var $nm_sroa_6_0_i = $59;var $nm_sroa_7_0_i = $mfree_1_lcssa_i;label = 17; break;
  case 17: 
   var $nm_sroa_7_0_i;
   var $nm_sroa_6_0_i;
   var $nm_sroa_4_0_i;
   var $nm_sroa_3_0_i;
   var $nm_sroa_1_0_i;
   var $nm_sroa_0_0_i;
   var $nm_sroa_8_0_i;
   var $60=(($agg_result)|0);
   HEAP32[(($60)>>2)]=$nm_sroa_0_0_i;
   var $61=(($agg_result+4)|0);
   HEAP32[(($61)>>2)]=$nm_sroa_1_0_i;
   var $62=(($agg_result+8)|0);
   var $63=$62;
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $st$1$0=(($63)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($63+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   var $64=(($agg_result+16)|0);
   HEAP32[(($64)>>2)]=$nm_sroa_3_0_i;
   var $65=(($agg_result+20)|0);
   HEAP32[(($65)>>2)]=$nm_sroa_4_0_i;
   var $66=(($agg_result+24)|0);
   HEAP32[(($66)>>2)]=0;
   var $67=(($agg_result+28)|0);
   HEAP32[(($67)>>2)]=$nm_sroa_6_0_i;
   var $68=(($agg_result+32)|0);
   HEAP32[(($68)>>2)]=$nm_sroa_7_0_i;
   var $69=(($agg_result+36)|0);
   HEAP32[(($69)>>2)]=$nm_sroa_8_0_i;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc_stats() {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=HEAP32[((((5792)|0))>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { var $used_3_i = 0;var $fp_0_i = 0;var $maxfp_0_i = 0;label = 14; break; } else { label = 6; break; }
  case 6: 
   var $16=HEAP32[((((6204)|0))>>2)];
   var $17=HEAP32[((((6200)|0))>>2)];
   var $18=HEAP32[((((5780)|0))>>2)];
   var $_neg2_i=((($17)-(40))|0);
   var $19=((($_neg2_i)-($18))|0);
   var $used_05_i = $19;var $s_06_i = ((6216)|0);label = 7; break;
  case 7: 
   var $s_06_i;
   var $used_05_i;
   var $21=(($s_06_i)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=$23;
   var $25=$24 & 7;
   var $26=(($25)|(0))==0;
   if ($26) { var $30 = 0;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $28=(((-$24))|0);
   var $29=$28 & 7;
   var $30 = $29;label = 9; break;
  case 9: 
   var $30;
   var $31=(($22+$30)|0);
   var $32=(($s_06_i+4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($22+$33)|0);
   var $used_13_i = $used_05_i;var $q_0_in4_i = $31;label = 10; break;
  case 10: 
   var $q_0_in4_i;
   var $used_13_i;
   var $q_0_i=$q_0_in4_i;
   var $36=(($q_0_in4_i)>>>(0)) >= (($34)>>>(0));
   var $37=(($q_0_i)|(0))==(($13)|(0));
   var $or_cond_i=$36 | $37;
   if ($or_cond_i) { var $used_1_lcssa_i = $used_13_i;label = 13; break; } else { label = 11; break; }
  case 11: 
   var $39=(($q_0_in4_i+4)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))==7;
   if ($42) { var $used_1_lcssa_i = $used_13_i;label = 13; break; } else { label = 12; break; }
  case 12: 
   var $43=$41 & 3;
   var $44=(($43)|(0))==1;
   var $45=$41 & -8;
   var $46=$44 ? $45 : 0;
   var $used_2_i=((($used_13_i)-($46))|0);
   var $47=(($q_0_in4_i+$45)|0);
   var $48=(($47)>>>(0)) < (($22)>>>(0));
   if ($48) { var $used_1_lcssa_i = $used_2_i;label = 13; break; } else { var $used_13_i = $used_2_i;var $q_0_in4_i = $47;label = 10; break; }
  case 13: 
   var $used_1_lcssa_i;
   var $49=(($s_06_i+8)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==0;
   if ($51) { var $used_3_i = $used_1_lcssa_i;var $fp_0_i = $17;var $maxfp_0_i = $16;label = 14; break; } else { var $used_05_i = $used_1_lcssa_i;var $s_06_i = $50;label = 7; break; }
  case 14: 
   var $maxfp_0_i;
   var $fp_0_i;
   var $used_3_i;
   var $52=HEAP32[((_stderr)>>2)];
   var $53=_fprintf($52, ((2176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$maxfp_0_i,tempInt));
   var $54=HEAP32[((_stderr)>>2)];
   var $55=_fprintf($54, ((3248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$fp_0_i,tempInt));
   var $56=HEAP32[((_stderr)>>2)];
   var $57=_fprintf($56, ((2744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$used_3_i,tempInt));
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mallopt($param_number, $value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((4672)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((4680)|0))>>2)]=$4;
   HEAP32[((((4676)|0))>>2)]=$4;
   HEAP32[((((4684)|0))>>2)]=-1;
   HEAP32[((((4688)|0))>>2)]=2097152;
   HEAP32[((((4692)|0))>>2)]=0;
   HEAP32[((((6212)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((4672)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   if ((($param_number)|(0))==-1) {
    label = 6; break;
   }
   else if ((($param_number)|(0))==-2) {
    label = 7; break;
   }
   else if ((($param_number)|(0))==-3) {
    label = 10; break;
   }
   else {
   var $_0_i = 0;label = 11; break;
   }
  case 6: 
   HEAP32[((((4688)|0))>>2)]=$value;
   var $_0_i = 1;label = 11; break;
  case 7: 
   var $15=HEAP32[((((4676)|0))>>2)];
   var $16=(($15)>>>(0)) > (($value)>>>(0));
   if ($16) { var $_0_i = 0;label = 11; break; } else { label = 8; break; }
  case 8: 
   var $18=((($value)-(1))|0);
   var $19=$18 & $value;
   var $20=(($19)|(0))==0;
   if ($20) { label = 9; break; } else { var $_0_i = 0;label = 11; break; }
  case 9: 
   HEAP32[((((4680)|0))>>2)]=$value;
   var $_0_i = 1;label = 11; break;
  case 10: 
   HEAP32[((((4684)|0))>>2)]=$value;
   var $_0_i = 1;label = 11; break;
  case 11: 
   var $_0_i;
   return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZSt15get_new_handlerv() {
 var label = 0;
 var $1=(tempValue=HEAP32[((6248)>>2)],HEAP32[((6248)>>2)]=tempValue+0,tempValue);
 var $2=$1;
 return $2;
}
function _dispose_chunk($p, $psize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$p;
   var $2=(($1+$psize)|0);
   var $3=$2;
   var $4=(($p+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 1;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { var $_0 = $p;var $_02 = $psize;label = 54; break; }
  case 2: 
   var $9=(($p)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$5 & 3;
   var $12=(($11)|(0))==0;
   if ($12) { label = 135; break; } else { label = 3; break; }
  case 3: 
   var $14=(((-$10))|0);
   var $15=(($1+$14)|0);
   var $16=$15;
   var $17=((($10)+($psize))|0);
   var $18=HEAP32[((((5784)|0))>>2)];
   var $19=(($15)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 53; break; } else { label = 4; break; }
  case 4: 
   var $21=HEAP32[((((5788)|0))>>2)];
   var $22=(($16)|(0))==(($21)|(0));
   if ($22) { label = 51; break; } else { label = 5; break; }
  case 5: 
   var $24=$10 >>> 3;
   var $25=(($10)>>>(0)) < 256;
   if ($25) { label = 6; break; } else { label = 18; break; }
  case 6: 
   var $_sum35=(((8)-($10))|0);
   var $27=(($1+$_sum35)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $_sum36=(((12)-($10))|0);
   var $30=(($1+$_sum36)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$24 << 1;
   var $34=((5808+($33<<2))|0);
   var $35=$34;
   var $36=(($29)|(0))==(($35)|(0));
   if ($36) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $38=$29;
   var $39=(($38)>>>(0)) < (($18)>>>(0));
   if ($39) { label = 17; break; } else { label = 8; break; }
  case 8: 
   var $41=(($29+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==(($16)|(0));
   if ($43) { label = 9; break; } else { label = 17; break; }
  case 9: 
   var $44=(($32)|(0))==(($29)|(0));
   if ($44) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $46=1 << $24;
   var $47=$46 ^ -1;
   var $48=HEAP32[((((5768)|0))>>2)];
   var $49=$48 & $47;
   HEAP32[((((5768)|0))>>2)]=$49;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 11: 
   var $51=(($32)|(0))==(($35)|(0));
   if ($51) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $_pre68=(($32+8)|0);
   var $_pre_phi69 = $_pre68;label = 15; break;
  case 13: 
   var $53=$32;
   var $54=(($53)>>>(0)) < (($18)>>>(0));
   if ($54) { label = 16; break; } else { label = 14; break; }
  case 14: 
   var $56=(($32+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|(0))==(($16)|(0));
   if ($58) { var $_pre_phi69 = $56;label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre_phi69;
   var $59=(($29+12)|0);
   HEAP32[(($59)>>2)]=$32;
   HEAP32[(($_pre_phi69)>>2)]=$29;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 16: 
   _abort();
   throw "Reached an unreachable!";
  case 17: 
   _abort();
   throw "Reached an unreachable!";
  case 18: 
   var $61=$15;
   var $_sum26=(((24)-($10))|0);
   var $62=(($1+$_sum26)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $_sum27=(((12)-($10))|0);
   var $65=(($1+$_sum27)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))==(($61)|(0));
   if ($68) { label = 24; break; } else { label = 19; break; }
  case 19: 
   var $_sum33=(((8)-($10))|0);
   var $70=(($1+$_sum33)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $73=$72;
   var $74=(($73)>>>(0)) < (($18)>>>(0));
   if ($74) { label = 23; break; } else { label = 20; break; }
  case 20: 
   var $76=(($72+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|(0))==(($61)|(0));
   if ($78) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $80=(($67+8)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0))==(($61)|(0));
   if ($82) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[(($76)>>2)]=$67;
   HEAP32[(($80)>>2)]=$72;
   var $R_1 = $67;label = 31; break;
  case 23: 
   _abort();
   throw "Reached an unreachable!";
  case 24: 
   var $_sum28=(((16)-($10))|0);
   var $_sum29=((($_sum28)+(4))|0);
   var $85=(($1+$_sum29)|0);
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))==0;
   if ($88) { label = 25; break; } else { var $R_0 = $87;var $RP_0 = $86;label = 26; break; }
  case 25: 
   var $90=(($1+$_sum28)|0);
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))==0;
   if ($93) { var $R_1 = 0;label = 31; break; } else { var $R_0 = $92;var $RP_0 = $91;label = 26; break; }
  case 26: 
   var $RP_0;
   var $R_0;
   var $94=(($R_0+20)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 27; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 26; break; }
  case 27: 
   var $98=(($R_0+16)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==0;
   if ($100) { label = 28; break; } else { var $R_0 = $99;var $RP_0 = $98;label = 26; break; }
  case 28: 
   var $102=$RP_0;
   var $103=(($102)>>>(0)) < (($18)>>>(0));
   if ($103) { label = 30; break; } else { label = 29; break; }
  case 29: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 31; break;
  case 30: 
   _abort();
   throw "Reached an unreachable!";
  case 31: 
   var $R_1;
   var $107=(($64)|(0))==0;
   if ($107) { var $_0 = $16;var $_02 = $17;label = 54; break; } else { label = 32; break; }
  case 32: 
   var $_sum30=(((28)-($10))|0);
   var $109=(($1+$_sum30)|0);
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=((6072+($111<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($61)|(0))==(($113)|(0));
   if ($114) { label = 33; break; } else { label = 35; break; }
  case 33: 
   HEAP32[(($112)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 34; break; } else { label = 41; break; }
  case 34: 
   var $116=HEAP32[(($110)>>2)];
   var $117=1 << $116;
   var $118=$117 ^ -1;
   var $119=HEAP32[((((5772)|0))>>2)];
   var $120=$119 & $118;
   HEAP32[((((5772)|0))>>2)]=$120;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 35: 
   var $122=$64;
   var $123=HEAP32[((((5784)|0))>>2)];
   var $124=(($122)>>>(0)) < (($123)>>>(0));
   if ($124) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $126=(($64+16)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127)|(0))==(($61)|(0));
   if ($128) { label = 37; break; } else { label = 38; break; }
  case 37: 
   HEAP32[(($126)>>2)]=$R_1;
   label = 40; break;
  case 38: 
   var $131=(($64+20)|0);
   HEAP32[(($131)>>2)]=$R_1;
   label = 40; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $134=(($R_1)|(0))==0;
   if ($134) { var $_0 = $16;var $_02 = $17;label = 54; break; } else { label = 41; break; }
  case 41: 
   var $136=$R_1;
   var $137=HEAP32[((((5784)|0))>>2)];
   var $138=(($136)>>>(0)) < (($137)>>>(0));
   if ($138) { label = 50; break; } else { label = 42; break; }
  case 42: 
   var $140=(($R_1+24)|0);
   HEAP32[(($140)>>2)]=$64;
   var $_sum31=(((16)-($10))|0);
   var $141=(($1+$_sum31)|0);
   var $142=$141;
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143)|(0))==0;
   if ($144) { label = 46; break; } else { label = 43; break; }
  case 43: 
   var $146=$143;
   var $147=HEAP32[((((5784)|0))>>2)];
   var $148=(($146)>>>(0)) < (($147)>>>(0));
   if ($148) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $150=(($R_1+16)|0);
   HEAP32[(($150)>>2)]=$143;
   var $151=(($143+24)|0);
   HEAP32[(($151)>>2)]=$R_1;
   label = 46; break;
  case 45: 
   _abort();
   throw "Reached an unreachable!";
  case 46: 
   var $_sum32=((($_sum31)+(4))|0);
   var $154=(($1+$_sum32)|0);
   var $155=$154;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156)|(0))==0;
   if ($157) { var $_0 = $16;var $_02 = $17;label = 54; break; } else { label = 47; break; }
  case 47: 
   var $159=$156;
   var $160=HEAP32[((((5784)|0))>>2)];
   var $161=(($159)>>>(0)) < (($160)>>>(0));
   if ($161) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $163=(($R_1+20)|0);
   HEAP32[(($163)>>2)]=$156;
   var $164=(($156+24)|0);
   HEAP32[(($164)>>2)]=$R_1;
   var $_0 = $16;var $_02 = $17;label = 54; break;
  case 49: 
   _abort();
   throw "Reached an unreachable!";
  case 50: 
   _abort();
   throw "Reached an unreachable!";
  case 51: 
   var $_sum=((($psize)+(4))|0);
   var $168=(($1+$_sum)|0);
   var $169=$168;
   var $170=HEAP32[(($169)>>2)];
   var $171=$170 & 3;
   var $172=(($171)|(0))==3;
   if ($172) { label = 52; break; } else { var $_0 = $16;var $_02 = $17;label = 54; break; }
  case 52: 
   HEAP32[((((5776)|0))>>2)]=$17;
   var $174=HEAP32[(($169)>>2)];
   var $175=$174 & -2;
   HEAP32[(($169)>>2)]=$175;
   var $176=$17 | 1;
   var $_sum24=(((4)-($10))|0);
   var $177=(($1+$_sum24)|0);
   var $178=$177;
   HEAP32[(($178)>>2)]=$176;
   var $179=$2;
   HEAP32[(($179)>>2)]=$17;
   label = 135; break;
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_02;
   var $_0;
   var $181=HEAP32[((((5784)|0))>>2)];
   var $182=(($2)>>>(0)) < (($181)>>>(0));
   if ($182) { label = 134; break; } else { label = 55; break; }
  case 55: 
   var $_sum1=((($psize)+(4))|0);
   var $184=(($1+$_sum1)|0);
   var $185=$184;
   var $186=HEAP32[(($185)>>2)];
   var $187=$186 & 2;
   var $188=(($187)|(0))==0;
   if ($188) { label = 56; break; } else { label = 109; break; }
  case 56: 
   var $190=HEAP32[((((5792)|0))>>2)];
   var $191=(($3)|(0))==(($190)|(0));
   if ($191) { label = 57; break; } else { label = 59; break; }
  case 57: 
   var $193=HEAP32[((((5780)|0))>>2)];
   var $194=((($193)+($_02))|0);
   HEAP32[((((5780)|0))>>2)]=$194;
   HEAP32[((((5792)|0))>>2)]=$_0;
   var $195=$194 | 1;
   var $196=(($_0+4)|0);
   HEAP32[(($196)>>2)]=$195;
   var $197=HEAP32[((((5788)|0))>>2)];
   var $198=(($_0)|(0))==(($197)|(0));
   if ($198) { label = 58; break; } else { label = 135; break; }
  case 58: 
   HEAP32[((((5788)|0))>>2)]=0;
   HEAP32[((((5776)|0))>>2)]=0;
   label = 135; break;
  case 59: 
   var $201=HEAP32[((((5788)|0))>>2)];
   var $202=(($3)|(0))==(($201)|(0));
   if ($202) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $204=HEAP32[((((5776)|0))>>2)];
   var $205=((($204)+($_02))|0);
   HEAP32[((((5776)|0))>>2)]=$205;
   HEAP32[((((5788)|0))>>2)]=$_0;
   var $206=$205 | 1;
   var $207=(($_0+4)|0);
   HEAP32[(($207)>>2)]=$206;
   var $208=$_0;
   var $209=(($208+$205)|0);
   var $210=$209;
   HEAP32[(($210)>>2)]=$205;
   label = 135; break;
  case 61: 
   var $212=$186 & -8;
   var $213=((($212)+($_02))|0);
   var $214=$186 >>> 3;
   var $215=(($186)>>>(0)) < 256;
   if ($215) { label = 62; break; } else { label = 74; break; }
  case 62: 
   var $_sum20=((($psize)+(8))|0);
   var $217=(($1+$_sum20)|0);
   var $218=$217;
   var $219=HEAP32[(($218)>>2)];
   var $_sum21=((($psize)+(12))|0);
   var $220=(($1+$_sum21)|0);
   var $221=$220;
   var $222=HEAP32[(($221)>>2)];
   var $223=$214 << 1;
   var $224=((5808+($223<<2))|0);
   var $225=$224;
   var $226=(($219)|(0))==(($225)|(0));
   if ($226) { label = 65; break; } else { label = 63; break; }
  case 63: 
   var $228=$219;
   var $229=(($228)>>>(0)) < (($181)>>>(0));
   if ($229) { label = 73; break; } else { label = 64; break; }
  case 64: 
   var $231=(($219+12)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==(($3)|(0));
   if ($233) { label = 65; break; } else { label = 73; break; }
  case 65: 
   var $234=(($222)|(0))==(($219)|(0));
   if ($234) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $236=1 << $214;
   var $237=$236 ^ -1;
   var $238=HEAP32[((((5768)|0))>>2)];
   var $239=$238 & $237;
   HEAP32[((((5768)|0))>>2)]=$239;
   label = 107; break;
  case 67: 
   var $241=(($222)|(0))==(($225)|(0));
   if ($241) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $_pre66=(($222+8)|0);
   var $_pre_phi67 = $_pre66;label = 71; break;
  case 69: 
   var $243=$222;
   var $244=(($243)>>>(0)) < (($181)>>>(0));
   if ($244) { label = 72; break; } else { label = 70; break; }
  case 70: 
   var $246=(($222+8)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247)|(0))==(($3)|(0));
   if ($248) { var $_pre_phi67 = $246;label = 71; break; } else { label = 72; break; }
  case 71: 
   var $_pre_phi67;
   var $249=(($219+12)|0);
   HEAP32[(($249)>>2)]=$222;
   HEAP32[(($_pre_phi67)>>2)]=$219;
   label = 107; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $251=$2;
   var $_sum2=((($psize)+(24))|0);
   var $252=(($1+$_sum2)|0);
   var $253=$252;
   var $254=HEAP32[(($253)>>2)];
   var $_sum3=((($psize)+(12))|0);
   var $255=(($1+$_sum3)|0);
   var $256=$255;
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257)|(0))==(($251)|(0));
   if ($258) { label = 80; break; } else { label = 75; break; }
  case 75: 
   var $_sum18=((($psize)+(8))|0);
   var $260=(($1+$_sum18)|0);
   var $261=$260;
   var $262=HEAP32[(($261)>>2)];
   var $263=$262;
   var $264=(($263)>>>(0)) < (($181)>>>(0));
   if ($264) { label = 79; break; } else { label = 76; break; }
  case 76: 
   var $266=(($262+12)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($267)|(0))==(($251)|(0));
   if ($268) { label = 77; break; } else { label = 79; break; }
  case 77: 
   var $270=(($257+8)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))==(($251)|(0));
   if ($272) { label = 78; break; } else { label = 79; break; }
  case 78: 
   HEAP32[(($266)>>2)]=$257;
   HEAP32[(($270)>>2)]=$262;
   var $R7_1 = $257;label = 87; break;
  case 79: 
   _abort();
   throw "Reached an unreachable!";
  case 80: 
   var $_sum5=((($psize)+(20))|0);
   var $275=(($1+$_sum5)|0);
   var $276=$275;
   var $277=HEAP32[(($276)>>2)];
   var $278=(($277)|(0))==0;
   if ($278) { label = 81; break; } else { var $R7_0 = $277;var $RP9_0 = $276;label = 82; break; }
  case 81: 
   var $_sum4=((($psize)+(16))|0);
   var $280=(($1+$_sum4)|0);
   var $281=$280;
   var $282=HEAP32[(($281)>>2)];
   var $283=(($282)|(0))==0;
   if ($283) { var $R7_1 = 0;label = 87; break; } else { var $R7_0 = $282;var $RP9_0 = $281;label = 82; break; }
  case 82: 
   var $RP9_0;
   var $R7_0;
   var $284=(($R7_0+20)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(($285)|(0))==0;
   if ($286) { label = 83; break; } else { var $R7_0 = $285;var $RP9_0 = $284;label = 82; break; }
  case 83: 
   var $288=(($R7_0+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289)|(0))==0;
   if ($290) { label = 84; break; } else { var $R7_0 = $289;var $RP9_0 = $288;label = 82; break; }
  case 84: 
   var $292=$RP9_0;
   var $293=(($292)>>>(0)) < (($181)>>>(0));
   if ($293) { label = 86; break; } else { label = 85; break; }
  case 85: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 87; break;
  case 86: 
   _abort();
   throw "Reached an unreachable!";
  case 87: 
   var $R7_1;
   var $297=(($254)|(0))==0;
   if ($297) { label = 107; break; } else { label = 88; break; }
  case 88: 
   var $_sum15=((($psize)+(28))|0);
   var $299=(($1+$_sum15)|0);
   var $300=$299;
   var $301=HEAP32[(($300)>>2)];
   var $302=((6072+($301<<2))|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=(($251)|(0))==(($303)|(0));
   if ($304) { label = 89; break; } else { label = 91; break; }
  case 89: 
   HEAP32[(($302)>>2)]=$R7_1;
   var $cond53=(($R7_1)|(0))==0;
   if ($cond53) { label = 90; break; } else { label = 97; break; }
  case 90: 
   var $306=HEAP32[(($300)>>2)];
   var $307=1 << $306;
   var $308=$307 ^ -1;
   var $309=HEAP32[((((5772)|0))>>2)];
   var $310=$309 & $308;
   HEAP32[((((5772)|0))>>2)]=$310;
   label = 107; break;
  case 91: 
   var $312=$254;
   var $313=HEAP32[((((5784)|0))>>2)];
   var $314=(($312)>>>(0)) < (($313)>>>(0));
   if ($314) { label = 95; break; } else { label = 92; break; }
  case 92: 
   var $316=(($254+16)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($317)|(0))==(($251)|(0));
   if ($318) { label = 93; break; } else { label = 94; break; }
  case 93: 
   HEAP32[(($316)>>2)]=$R7_1;
   label = 96; break;
  case 94: 
   var $321=(($254+20)|0);
   HEAP32[(($321)>>2)]=$R7_1;
   label = 96; break;
  case 95: 
   _abort();
   throw "Reached an unreachable!";
  case 96: 
   var $324=(($R7_1)|(0))==0;
   if ($324) { label = 107; break; } else { label = 97; break; }
  case 97: 
   var $326=$R7_1;
   var $327=HEAP32[((((5784)|0))>>2)];
   var $328=(($326)>>>(0)) < (($327)>>>(0));
   if ($328) { label = 106; break; } else { label = 98; break; }
  case 98: 
   var $330=(($R7_1+24)|0);
   HEAP32[(($330)>>2)]=$254;
   var $_sum16=((($psize)+(16))|0);
   var $331=(($1+$_sum16)|0);
   var $332=$331;
   var $333=HEAP32[(($332)>>2)];
   var $334=(($333)|(0))==0;
   if ($334) { label = 102; break; } else { label = 99; break; }
  case 99: 
   var $336=$333;
   var $337=HEAP32[((((5784)|0))>>2)];
   var $338=(($336)>>>(0)) < (($337)>>>(0));
   if ($338) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $340=(($R7_1+16)|0);
   HEAP32[(($340)>>2)]=$333;
   var $341=(($333+24)|0);
   HEAP32[(($341)>>2)]=$R7_1;
   label = 102; break;
  case 101: 
   _abort();
   throw "Reached an unreachable!";
  case 102: 
   var $_sum17=((($psize)+(20))|0);
   var $344=(($1+$_sum17)|0);
   var $345=$344;
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   if ($347) { label = 107; break; } else { label = 103; break; }
  case 103: 
   var $349=$346;
   var $350=HEAP32[((((5784)|0))>>2)];
   var $351=(($349)>>>(0)) < (($350)>>>(0));
   if ($351) { label = 105; break; } else { label = 104; break; }
  case 104: 
   var $353=(($R7_1+20)|0);
   HEAP32[(($353)>>2)]=$346;
   var $354=(($346+24)|0);
   HEAP32[(($354)>>2)]=$R7_1;
   label = 107; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   var $358=$213 | 1;
   var $359=(($_0+4)|0);
   HEAP32[(($359)>>2)]=$358;
   var $360=$_0;
   var $361=(($360+$213)|0);
   var $362=$361;
   HEAP32[(($362)>>2)]=$213;
   var $363=HEAP32[((((5788)|0))>>2)];
   var $364=(($_0)|(0))==(($363)|(0));
   if ($364) { label = 108; break; } else { var $_1 = $213;label = 110; break; }
  case 108: 
   HEAP32[((((5776)|0))>>2)]=$213;
   label = 135; break;
  case 109: 
   var $367=$186 & -2;
   HEAP32[(($185)>>2)]=$367;
   var $368=$_02 | 1;
   var $369=(($_0+4)|0);
   HEAP32[(($369)>>2)]=$368;
   var $370=$_0;
   var $371=(($370+$_02)|0);
   var $372=$371;
   HEAP32[(($372)>>2)]=$_02;
   var $_1 = $_02;label = 110; break;
  case 110: 
   var $_1;
   var $374=$_1 >>> 3;
   var $375=(($_1)>>>(0)) < 256;
   if ($375) { label = 111; break; } else { label = 116; break; }
  case 111: 
   var $377=$374 << 1;
   var $378=((5808+($377<<2))|0);
   var $379=$378;
   var $380=HEAP32[((((5768)|0))>>2)];
   var $381=1 << $374;
   var $382=$380 & $381;
   var $383=(($382)|(0))==0;
   if ($383) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $385=$380 | $381;
   HEAP32[((((5768)|0))>>2)]=$385;
   var $_sum13_pre=((($377)+(2))|0);
   var $_pre=((5808+($_sum13_pre<<2))|0);
   var $F16_0 = $379;var $_pre_phi = $_pre;label = 115; break;
  case 113: 
   var $_sum14=((($377)+(2))|0);
   var $387=((5808+($_sum14<<2))|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=$388;
   var $390=HEAP32[((((5784)|0))>>2)];
   var $391=(($389)>>>(0)) < (($390)>>>(0));
   if ($391) { label = 114; break; } else { var $F16_0 = $388;var $_pre_phi = $387;label = 115; break; }
  case 114: 
   _abort();
   throw "Reached an unreachable!";
  case 115: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$_0;
   var $394=(($F16_0+12)|0);
   HEAP32[(($394)>>2)]=$_0;
   var $395=(($_0+8)|0);
   HEAP32[(($395)>>2)]=$F16_0;
   var $396=(($_0+12)|0);
   HEAP32[(($396)>>2)]=$379;
   label = 135; break;
  case 116: 
   var $398=$_0;
   var $399=$_1 >>> 8;
   var $400=(($399)|(0))==0;
   if ($400) { var $I19_0 = 0;label = 119; break; } else { label = 117; break; }
  case 117: 
   var $402=(($_1)>>>(0)) > 16777215;
   if ($402) { var $I19_0 = 31;label = 119; break; } else { label = 118; break; }
  case 118: 
   var $404=((($399)+(1048320))|0);
   var $405=$404 >>> 16;
   var $406=$405 & 8;
   var $407=$399 << $406;
   var $408=((($407)+(520192))|0);
   var $409=$408 >>> 16;
   var $410=$409 & 4;
   var $411=$410 | $406;
   var $412=$407 << $410;
   var $413=((($412)+(245760))|0);
   var $414=$413 >>> 16;
   var $415=$414 & 2;
   var $416=$411 | $415;
   var $417=(((14)-($416))|0);
   var $418=$412 << $415;
   var $419=$418 >>> 15;
   var $420=((($417)+($419))|0);
   var $421=$420 << 1;
   var $422=((($420)+(7))|0);
   var $423=$_1 >>> (($422)>>>(0));
   var $424=$423 & 1;
   var $425=$424 | $421;
   var $I19_0 = $425;label = 119; break;
  case 119: 
   var $I19_0;
   var $427=((6072+($I19_0<<2))|0);
   var $428=(($_0+28)|0);
   var $I19_0_c=$I19_0;
   HEAP32[(($428)>>2)]=$I19_0_c;
   var $429=(($_0+20)|0);
   HEAP32[(($429)>>2)]=0;
   var $430=(($_0+16)|0);
   HEAP32[(($430)>>2)]=0;
   var $431=HEAP32[((((5772)|0))>>2)];
   var $432=1 << $I19_0;
   var $433=$431 & $432;
   var $434=(($433)|(0))==0;
   if ($434) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $436=$431 | $432;
   HEAP32[((((5772)|0))>>2)]=$436;
   HEAP32[(($427)>>2)]=$398;
   var $437=(($_0+24)|0);
   var $_c=$427;
   HEAP32[(($437)>>2)]=$_c;
   var $438=(($_0+12)|0);
   HEAP32[(($438)>>2)]=$_0;
   var $439=(($_0+8)|0);
   HEAP32[(($439)>>2)]=$_0;
   label = 135; break;
  case 121: 
   var $441=HEAP32[(($427)>>2)];
   var $442=(($I19_0)|(0))==31;
   if ($442) { var $447 = 0;label = 123; break; } else { label = 122; break; }
  case 122: 
   var $444=$I19_0 >>> 1;
   var $445=(((25)-($444))|0);
   var $447 = $445;label = 123; break;
  case 123: 
   var $447;
   var $448=(($441+4)|0);
   var $449=HEAP32[(($448)>>2)];
   var $450=$449 & -8;
   var $451=(($450)|(0))==(($_1)|(0));
   if ($451) { var $T_0_lcssa = $441;label = 130; break; } else { label = 124; break; }
  case 124: 
   var $452=$_1 << $447;
   var $T_055 = $441;var $K20_056 = $452;label = 126; break;
  case 125: 
   var $454=$K20_056 << 1;
   var $455=(($462+4)|0);
   var $456=HEAP32[(($455)>>2)];
   var $457=$456 & -8;
   var $458=(($457)|(0))==(($_1)|(0));
   if ($458) { var $T_0_lcssa = $462;label = 130; break; } else { var $T_055 = $462;var $K20_056 = $454;label = 126; break; }
  case 126: 
   var $K20_056;
   var $T_055;
   var $460=$K20_056 >>> 31;
   var $461=(($T_055+16+($460<<2))|0);
   var $462=HEAP32[(($461)>>2)];
   var $463=(($462)|(0))==0;
   if ($463) { label = 127; break; } else { label = 125; break; }
  case 127: 
   var $465=$461;
   var $466=HEAP32[((((5784)|0))>>2)];
   var $467=(($465)>>>(0)) < (($466)>>>(0));
   if ($467) { label = 129; break; } else { label = 128; break; }
  case 128: 
   HEAP32[(($461)>>2)]=$398;
   var $469=(($_0+24)|0);
   var $T_0_c10=$T_055;
   HEAP32[(($469)>>2)]=$T_0_c10;
   var $470=(($_0+12)|0);
   HEAP32[(($470)>>2)]=$_0;
   var $471=(($_0+8)|0);
   HEAP32[(($471)>>2)]=$_0;
   label = 135; break;
  case 129: 
   _abort();
   throw "Reached an unreachable!";
  case 130: 
   var $T_0_lcssa;
   var $473=(($T_0_lcssa+8)|0);
   var $474=HEAP32[(($473)>>2)];
   var $475=$T_0_lcssa;
   var $476=HEAP32[((((5784)|0))>>2)];
   var $477=(($475)>>>(0)) < (($476)>>>(0));
   if ($477) { label = 133; break; } else { label = 131; break; }
  case 131: 
   var $479=$474;
   var $480=(($479)>>>(0)) < (($476)>>>(0));
   if ($480) { label = 133; break; } else { label = 132; break; }
  case 132: 
   var $482=(($474+12)|0);
   HEAP32[(($482)>>2)]=$398;
   HEAP32[(($473)>>2)]=$398;
   var $483=(($_0+8)|0);
   var $_c9=$474;
   HEAP32[(($483)>>2)]=$_c9;
   var $484=(($_0+12)|0);
   var $T_0_c=$T_0_lcssa;
   HEAP32[(($484)>>2)]=$T_0_c;
   var $485=(($_0+24)|0);
   HEAP32[(($485)>>2)]=0;
   label = 135; break;
  case 133: 
   _abort();
   throw "Reached an unreachable!";
  case 134: 
   _abort();
   throw "Reached an unreachable!";
  case 135: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($size)|(0))==0;
   var $_size=$1 ? 1 : $size;
   label = 2; break;
  case 2: 
   var $3=_malloc($_size);
   var $4=(($3)|(0))==0;
   if ($4) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $6=(tempValue=HEAP32[((6248)>>2)],HEAP32[((6248)>>2)]=tempValue+0,tempValue);
   var $7=(($6)|(0))==0;
   if ($7) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $9=$6;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 5: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 7; break;
  case 6: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 7; break;
  case 7: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   var $11=$lpad_phi$1;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $14=$lpad_phi$0;
   ___cxa_call_unexpected($14);
   throw "Reached an unreachable!";
  case 9: 
   var $16=___cxa_allocate_exception(4);
   var $17=$16;
   HEAP32[(($17)>>2)]=(((3792)|0));
   (function() { try { __THREW__ = 0; return ___cxa_throw($16, 3920, (16)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 6; break; }
  case 10: 
   return $3;
  case 11: 
   ___resumeException($lpad_phi$0)
  case 12: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9bad_allocD2Ev($this) {
 var label = 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 var label = 0;
 return ((2424)|0);
}
function __ZNKSt20bad_array_new_length4whatEv($this) {
 var label = 0;
 return ((3448)|0);
}
function __ZSt15set_new_handlerPFvvE($handler) {
 var label = 0;
 var $1=$handler;
 var $2=(tempValue=HEAP32[((6248)>>2)],HEAP32[((6248)>>2)]=$1,tempValue);
 var $3=$2;
 return $3;
}
function __ZNSt9bad_allocC2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((3792)|0));
 return;
}
function __ZNSt20bad_array_new_lengthC2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=(((3824)|0));
 return;
}
function __ZdlPv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($ptr)|(0))==0;
   if ($1) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _free($ptr);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdlPvRKSt9nothrow_t($ptr, $0) {
 var label = 0;
 __ZdlPv($ptr);
 return;
}
function __ZdaPv($ptr) {
 var label = 0;
 __ZdlPv($ptr);
 return;
}
function __ZdaPvRKSt9nothrow_t($ptr, $0) {
 var label = 0;
 __ZdaPv($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 var label = 0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt20bad_array_new_lengthD0Ev($this) {
 var label = 0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function _getopt($nargc, $nargv, $options) {
 var label = 0;
 var $1=_getopt_internal($nargc, $nargv, $options, 0, 0, 0);
 return $1;
}
function _getopt_internal($nargc, $nargv, $options, $long_options, $idx, $flags) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($options)|(0))==0;
   if ($1) { var $_04 = -1;label = 106; break; } else { label = 2; break; }
  case 2: 
   var $3=HEAP32[((1584)>>2)];
   var $4=(($3)|(0))==0;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[((4656)>>2)]=1;
   HEAP32[((1584)>>2)]=1;
   var $11 = 1;var $10 = 1;label = 5; break;
  case 4: 
   var $_pre55=HEAP32[((4656)>>2)];
   var $6=HEAP32[((1808)>>2)];
   var $7=(($6)|(0))==-1;
   var $8=(($_pre55)|(0))!=0;
   var $or_cond=$7 | $8;
   if ($or_cond) { var $11 = $_pre55;var $10 = $3;label = 5; break; } else { var $18 = $6;var $17 = $_pre55;var $16 = $3;label = 6; break; }
  case 5: 
   var $10;
   var $11;
   var $12=_getenv(((2320)|0));
   var $13=(($12)|(0))!=0;
   var $14=(($13)&(1));
   HEAP32[((1808)>>2)]=$14;
   var $18 = $14;var $17 = $11;var $16 = $10;label = 6; break;
  case 6: 
   var $16;
   var $17;
   var $18;
   var $19=HEAP8[($options)];
   var $20=(($19 << 24) >> 24)==45;
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $21=$flags | 2;
   var $_064 = $21;label = 9; break;
  case 8: 
   var $23=(($18)|(0))!=0;
   var $24=(($19 << 24) >> 24)==43;
   var $or_cond6=$23 | $24;
   var $25=$flags & -2;
   var $_flags=$or_cond6 ? $25 : $flags;
   var $cond=(($19 << 24) >> 24)==43;
   if ($cond) { var $_064 = $_flags;label = 9; break; } else { var $_05 = $options;var $_065 = $_flags;label = 10; break; }
  case 9: 
   var $_064;
   var $27=(($options+1)|0);
   var $_05 = $27;var $_065 = $_064;label = 10; break;
  case 10: 
   var $_065;
   var $_05;
   HEAP32[((4664)>>2)]=0;
   var $29=(($17)|(0))==0;
   if ($29) { var $32 = $16;label = 13; break; } else { label = 11; break; }
  case 11: 
   HEAP32[((1608)>>2)]=-1;
   HEAP32[((1600)>>2)]=-1;
   var $31 = $16;var $_pr = $17;label = 12; break;
  case 12: 
   var $_pr;
   var $31;
   var $phitmp=(($_pr)|(0))==0;
   if ($phitmp) { var $32 = $31;label = 13; break; } else { var $37 = $31;label = 14; break; }
  case 13: 
   var $32;
   var $33=HEAP32[((1568)>>2)];
   var $34=HEAP8[($33)];
   var $35=(($34 << 24) >> 24)==0;
   if ($35) { var $37 = $32;label = 14; break; } else { var $187 = $33;var $186 = $32;label = 63; break; }
  case 14: 
   var $37;
   HEAP32[((4656)>>2)]=0;
   var $38=(($37)|(0)) < (($nargc)|(0));
   if ($38) { label = 28; break; } else { label = 15; break; }
  case 15: 
   HEAP32[((1568)>>2)]=((5760)|0);
   var $40=HEAP32[((1608)>>2)];
   var $41=(($40)|(0))==-1;
   var $42=HEAP32[((1600)>>2)];
   if ($41) { label = 25; break; } else { label = 16; break; }
  case 16: 
   var $44=((($40)-($42))|0);
   var $45=((($37)-($40))|0);
   var $46=((((($44)|(0)))%((($45)|(0))))&-1);
   var $47=(($46)|(0))==0;
   if ($47) { var $_0_lcssa_i_i = $45;label = 18; break; } else { var $_01_i_i = $45;var $c_02_i_i = $46;label = 17; break; }
  case 17: 
   var $c_02_i_i;
   var $_01_i_i;
   var $48=((((($_01_i_i)|(0)))%((($c_02_i_i)|(0))))&-1);
   var $49=(($48)|(0))==0;
   if ($49) { var $_0_lcssa_i_i = $c_02_i_i;label = 18; break; } else { var $_01_i_i = $c_02_i_i;var $c_02_i_i = $48;label = 17; break; }
  case 18: 
   var $_0_lcssa_i_i;
   var $50=((($37)-($42))|0);
   var $51=((((($50)|(0)))/((($_0_lcssa_i_i)|(0))))&-1);
   var $52=(($_0_lcssa_i_i)|(0)) > 0;
   if ($52) { label = 19; break; } else { var $69 = $40;var $68 = $42;var $67 = $37;label = 24; break; }
  case 19: 
   var $53=(($51)|(0)) > 0;
   var $54=(((-$44))|0);
   if ($53) { var $i_03_us_i = 0;label = 22; break; } else { var $69 = $40;var $68 = $42;var $67 = $37;label = 24; break; }
  case 20: 
   var $56=((($i_03_us_i)+(1))|0);
   var $57=(($56)|(0)) < (($_0_lcssa_i_i)|(0));
   if ($57) { var $i_03_us_i = $56;label = 22; break; } else { label = 23; break; }
  case 21: 
   var $59;
   var $pos_02_us_i;
   var $j_01_us_i;
   var $60=(($pos_02_us_i)|(0)) < (($40)|(0));
   var $pos_1_p_us_i=$60 ? $45 : $54;
   var $pos_1_us_i=((($pos_1_p_us_i)+($pos_02_us_i))|0);
   var $61=(($nargv+($pos_1_us_i<<2))|0);
   var $62=HEAP32[(($61)>>2)];
   HEAP32[(($61)>>2)]=$59;
   HEAP32[(($66)>>2)]=$62;
   var $63=((($j_01_us_i)+(1))|0);
   var $64=(($63)|(0)) < (($51)|(0));
   if ($64) { var $j_01_us_i = $63;var $pos_02_us_i = $pos_1_us_i;var $59 = $62;label = 21; break; } else { label = 20; break; }
  case 22: 
   var $i_03_us_i;
   var $65=((($i_03_us_i)+($40))|0);
   var $66=(($nargv+($65<<2))|0);
   var $_pre_i=HEAP32[(($66)>>2)];
   var $j_01_us_i = 0;var $pos_02_us_i = $65;var $59 = $_pre_i;label = 21; break;
  case 23: 
   var $_pre44=HEAP32[((1608)>>2)];
   var $_pre45=HEAP32[((1600)>>2)];
   var $_pre46=HEAP32[((1584)>>2)];
   var $69 = $_pre44;var $68 = $_pre45;var $67 = $_pre46;label = 24; break;
  case 24: 
   var $67;
   var $68;
   var $69;
   var $70=((($68)-($69))|0);
   var $71=((($70)+($67))|0);
   HEAP32[((1584)>>2)]=$71;
   label = 27; break;
  case 25: 
   var $73=(($42)|(0))==-1;
   if ($73) { label = 27; break; } else { label = 26; break; }
  case 26: 
   HEAP32[((1584)>>2)]=$42;
   label = 27; break;
  case 27: 
   HEAP32[((1608)>>2)]=-1;
   HEAP32[((1600)>>2)]=-1;
   var $_04 = -1;label = 106; break;
  case 28: 
   var $77=(($nargv+($37<<2))|0);
   var $78=HEAP32[(($77)>>2)];
   HEAP32[((1568)>>2)]=$78;
   var $79=HEAP8[($78)];
   var $80=(($79 << 24) >> 24)==45;
   if ($80) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $82=(($78+1)|0);
   var $83=HEAP8[($82)];
   var $84=(($83 << 24) >> 24)==0;
   if ($84) { label = 30; break; } else { label = 47; break; }
  case 30: 
   var $86=_strchr($_05, 45);
   var $87=(($86)|(0))==0;
   if ($87) { label = 31; break; } else { label = 47; break; }
  case 31: 
   HEAP32[((1568)>>2)]=((5760)|0);
   var $89=$_065 & 2;
   var $90=(($89)|(0))==0;
   if ($90) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $92=((($37)+(1))|0);
   HEAP32[((1584)>>2)]=$92;
   var $93=HEAP32[(($77)>>2)];
   HEAP32[((4664)>>2)]=$93;
   var $_04 = 1;label = 106; break;
  case 33: 
   var $95=$_065 & 1;
   var $96=(($95)|(0))==0;
   if ($96) { var $_04 = -1;label = 106; break; } else { label = 34; break; }
  case 34: 
   var $98=HEAP32[((1600)>>2)];
   var $99=(($98)|(0))==-1;
   if ($99) { label = 35; break; } else { label = 36; break; }
  case 35: 
   HEAP32[((1600)>>2)]=$37;
   var $134 = $37;var $_pr_pre = 0;label = 46; break;
  case 36: 
   var $102=HEAP32[((1608)>>2)];
   var $103=(($102)|(0))==-1;
   if ($103) { var $134 = $37;var $_pr_pre = 0;label = 46; break; } else { label = 37; break; }
  case 37: 
   var $105=((($102)-($98))|0);
   var $106=((($37)-($102))|0);
   var $107=((((($105)|(0)))%((($106)|(0))))&-1);
   var $108=(($107)|(0))==0;
   if ($108) { var $_0_lcssa_i_i11 = $106;label = 39; break; } else { var $_01_i_i9 = $106;var $c_02_i_i8 = $107;label = 38; break; }
  case 38: 
   var $c_02_i_i8;
   var $_01_i_i9;
   var $109=((((($_01_i_i9)|(0)))%((($c_02_i_i8)|(0))))&-1);
   var $110=(($109)|(0))==0;
   if ($110) { var $_0_lcssa_i_i11 = $c_02_i_i8;label = 39; break; } else { var $_01_i_i9 = $c_02_i_i8;var $c_02_i_i8 = $109;label = 38; break; }
  case 39: 
   var $_0_lcssa_i_i11;
   var $111=((($37)-($98))|0);
   var $112=((((($111)|(0)))/((($_0_lcssa_i_i11)|(0))))&-1);
   var $113=(($_0_lcssa_i_i11)|(0)) > 0;
   if ($113) { label = 40; break; } else { var $130 = $37;var $129 = $102;var $128 = $98;var $_pr_pre_pre = 0;label = 45; break; }
  case 40: 
   var $114=(($112)|(0)) > 0;
   var $115=(((-$105))|0);
   if ($114) { var $i_03_us_i18 = 0;label = 43; break; } else { var $130 = $37;var $129 = $102;var $128 = $98;var $_pr_pre_pre = 0;label = 45; break; }
  case 41: 
   var $117=((($i_03_us_i18)+(1))|0);
   var $118=(($117)|(0)) < (($_0_lcssa_i_i11)|(0));
   if ($118) { var $i_03_us_i18 = $117;label = 43; break; } else { label = 44; break; }
  case 42: 
   var $120;
   var $pos_02_us_i14;
   var $j_01_us_i15;
   var $121=(($pos_02_us_i14)|(0)) < (($102)|(0));
   var $pos_1_p_us_i16=$121 ? $106 : $115;
   var $pos_1_us_i17=((($pos_1_p_us_i16)+($pos_02_us_i14))|0);
   var $122=(($nargv+($pos_1_us_i17<<2))|0);
   var $123=HEAP32[(($122)>>2)];
   HEAP32[(($122)>>2)]=$120;
   HEAP32[(($127)>>2)]=$123;
   var $124=((($j_01_us_i15)+(1))|0);
   var $125=(($124)|(0)) < (($112)|(0));
   if ($125) { var $j_01_us_i15 = $124;var $pos_02_us_i14 = $pos_1_us_i17;var $120 = $123;label = 42; break; } else { label = 41; break; }
  case 43: 
   var $i_03_us_i18;
   var $126=((($i_03_us_i18)+($102))|0);
   var $127=(($nargv+($126<<2))|0);
   var $_pre_i19=HEAP32[(($127)>>2)];
   var $j_01_us_i15 = 0;var $pos_02_us_i14 = $126;var $120 = $_pre_i19;label = 42; break;
  case 44: 
   var $_pre41=HEAP32[((1584)>>2)];
   var $_pre42=HEAP32[((1608)>>2)];
   var $_pre43=HEAP32[((1600)>>2)];
   var $_pr_pre_pre_pre=HEAP32[((4656)>>2)];
   var $130 = $_pre41;var $129 = $_pre42;var $128 = $_pre43;var $_pr_pre_pre = $_pr_pre_pre_pre;label = 45; break;
  case 45: 
   var $_pr_pre_pre;
   var $128;
   var $129;
   var $130;
   var $131=((($130)-($129))|0);
   var $132=((($131)+($128))|0);
   HEAP32[((1600)>>2)]=$132;
   HEAP32[((1608)>>2)]=-1;
   var $134 = $130;var $_pr_pre = $_pr_pre_pre;label = 46; break;
  case 46: 
   var $_pr_pre;
   var $134;
   var $135=((($134)+(1))|0);
   HEAP32[((1584)>>2)]=$135;
   var $31 = $135;var $_pr = $_pr_pre;label = 12; break;
  case 47: 
   var $136=HEAP32[((1600)>>2)];
   var $137=(($136)|(0))!=-1;
   var $138=HEAP32[((1608)>>2)];
   var $139=(($138)|(0))==-1;
   var $or_cond3=$137 & $139;
   if ($or_cond3) { label = 48; break; } else { var $143 = $83;var $142 = $138;label = 49; break; }
  case 48: 
   HEAP32[((1608)>>2)]=$37;
   var $_pre=HEAP8[($82)];
   var $143 = $_pre;var $142 = $37;label = 49; break;
  case 49: 
   var $142;
   var $143;
   var $144=(($143 << 24) >> 24)==0;
   if ($144) { var $187 = $78;var $186 = $37;label = 63; break; } else { label = 50; break; }
  case 50: 
   HEAP32[((1568)>>2)]=$82;
   var $146=HEAP8[($82)];
   var $147=(($146 << 24) >> 24)==45;
   if ($147) { label = 51; break; } else { var $187 = $82;var $186 = $37;label = 63; break; }
  case 51: 
   var $149=(($78+2)|0);
   var $150=HEAP8[($149)];
   var $151=(($150 << 24) >> 24)==0;
   if ($151) { label = 52; break; } else { var $187 = $82;var $186 = $37;label = 63; break; }
  case 52: 
   var $153=((($37)+(1))|0);
   HEAP32[((1584)>>2)]=$153;
   HEAP32[((1568)>>2)]=((5760)|0);
   var $154=(($142)|(0))==-1;
   if ($154) { label = 62; break; } else { label = 53; break; }
  case 53: 
   var $156=((($142)-($136))|0);
   var $157=((($153)-($142))|0);
   var $158=((((($156)|(0)))%((($157)|(0))))&-1);
   var $159=(($158)|(0))==0;
   if ($159) { var $_0_lcssa_i_i25 = $157;label = 55; break; } else { var $_01_i_i23 = $157;var $c_02_i_i22 = $158;label = 54; break; }
  case 54: 
   var $c_02_i_i22;
   var $_01_i_i23;
   var $160=((((($_01_i_i23)|(0)))%((($c_02_i_i22)|(0))))&-1);
   var $161=(($160)|(0))==0;
   if ($161) { var $_0_lcssa_i_i25 = $c_02_i_i22;label = 55; break; } else { var $_01_i_i23 = $c_02_i_i22;var $c_02_i_i22 = $160;label = 54; break; }
  case 55: 
   var $_0_lcssa_i_i25;
   var $162=((($153)-($136))|0);
   var $163=((((($162)|(0)))/((($_0_lcssa_i_i25)|(0))))&-1);
   var $164=(($_0_lcssa_i_i25)|(0)) > 0;
   if ($164) { label = 56; break; } else { var $181 = $142;var $180 = $136;var $179 = $153;label = 61; break; }
  case 56: 
   var $165=(($163)|(0)) > 0;
   var $166=(((-$156))|0);
   if ($165) { var $i_03_us_i32 = 0;label = 59; break; } else { var $181 = $142;var $180 = $136;var $179 = $153;label = 61; break; }
  case 57: 
   var $168=((($i_03_us_i32)+(1))|0);
   var $169=(($168)|(0)) < (($_0_lcssa_i_i25)|(0));
   if ($169) { var $i_03_us_i32 = $168;label = 59; break; } else { label = 60; break; }
  case 58: 
   var $171;
   var $pos_02_us_i28;
   var $j_01_us_i29;
   var $172=(($pos_02_us_i28)|(0)) < (($142)|(0));
   var $pos_1_p_us_i30=$172 ? $157 : $166;
   var $pos_1_us_i31=((($pos_1_p_us_i30)+($pos_02_us_i28))|0);
   var $173=(($nargv+($pos_1_us_i31<<2))|0);
   var $174=HEAP32[(($173)>>2)];
   HEAP32[(($173)>>2)]=$171;
   HEAP32[(($178)>>2)]=$174;
   var $175=((($j_01_us_i29)+(1))|0);
   var $176=(($175)|(0)) < (($163)|(0));
   if ($176) { var $j_01_us_i29 = $175;var $pos_02_us_i28 = $pos_1_us_i31;var $171 = $174;label = 58; break; } else { label = 57; break; }
  case 59: 
   var $i_03_us_i32;
   var $177=((($i_03_us_i32)+($142))|0);
   var $178=(($nargv+($177<<2))|0);
   var $_pre_i33=HEAP32[(($178)>>2)];
   var $j_01_us_i29 = 0;var $pos_02_us_i28 = $177;var $171 = $_pre_i33;label = 58; break;
  case 60: 
   var $_pre38=HEAP32[((1608)>>2)];
   var $_pre39=HEAP32[((1600)>>2)];
   var $_pre40=HEAP32[((1584)>>2)];
   var $181 = $_pre38;var $180 = $_pre39;var $179 = $_pre40;label = 61; break;
  case 61: 
   var $179;
   var $180;
   var $181;
   var $182=((($180)-($181))|0);
   var $183=((($182)+($179))|0);
   HEAP32[((1584)>>2)]=$183;
   label = 62; break;
  case 62: 
   HEAP32[((1608)>>2)]=-1;
   HEAP32[((1600)>>2)]=-1;
   var $_04 = -1;label = 106; break;
  case 63: 
   var $186;
   var $187;
   var $188=(($long_options)|(0))!=0;
   if ($188) { label = 64; break; } else { var $209 = $187;label = 73; break; }
  case 64: 
   var $190=(($nargv+($186<<2))|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($187)|(0))==(($191)|(0));
   if ($192) { var $209 = $187;label = 73; break; } else { label = 65; break; }
  case 65: 
   var $194=HEAP8[($187)];
   var $195=(($194 << 24) >> 24)==45;
   if ($195) { label = 68; break; } else { label = 66; break; }
  case 66: 
   var $197=$_065 & 4;
   var $198=(($197)|(0))==0;
   if ($198) { var $209 = $187;label = 73; break; } else { label = 67; break; }
  case 67: 
   var $cond70=(($194 << 24) >> 24)==58;
   if ($cond70) { var $short_too_0 = 0;label = 70; break; } else { label = 69; break; }
  case 68: 
   var $200=(($187+1)|0);
   HEAP32[((1568)>>2)]=$200;
   var $short_too_0 = 0;label = 70; break;
  case 69: 
   var $202=(($194 << 24) >> 24);
   var $203=_strchr($_05, $202);
   var $not_=(($203)|(0))!=0;
   var $_=(($not_)&(1));
   var $short_too_0 = $_;label = 70; break;
  case 70: 
   var $short_too_0;
   var $205=_parse_long_options($nargv, $_05, $long_options, $idx, $short_too_0);
   var $206=(($205)|(0))==-1;
   if ($206) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $_pre58=HEAP32[((1568)>>2)];
   var $209 = $_pre58;label = 73; break;
  case 72: 
   HEAP32[((1568)>>2)]=((5760)|0);
   var $_04 = $205;label = 106; break;
  case 73: 
   var $209;
   var $210=(($209+1)|0);
   HEAP32[((1568)>>2)]=$210;
   var $211=HEAP8[($209)];
   var $212=(($211 << 24) >> 24);
   if ((($211 << 24) >> 24)==45) {
    label = 74; break;
   }
   else if ((($211 << 24) >> 24)==58) {
    label = 78; break;
   }
   else {
   label = 75; break;
   }
  case 74: 
   var $214=HEAP8[($210)];
   var $215=(($214 << 24) >> 24)==0;
   if ($215) { label = 75; break; } else { label = 80; break; }
  case 75: 
   var $217=_strchr($_05, $212);
   var $218=(($217)|(0))==0;
   if ($218) { label = 76; break; } else { label = 84; break; }
  case 76: 
   var $220=(($211 << 24) >> 24)==45;
   if ($220) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $_pre60=HEAP8[($210)];
   var $221=(($_pre60 << 24) >> 24)==0;
   if ($221) { var $_04 = -1;label = 106; break; } else { label = 80; break; }
  case 78: 
   var $_pr68_pr=HEAP8[($210)];
   var $222=(($_pr68_pr << 24) >> 24)==0;
   if ($222) { label = 79; break; } else { label = 80; break; }
  case 79: 
   var $224=HEAP32[((1584)>>2)];
   var $225=((($224)+(1))|0);
   HEAP32[((1584)>>2)]=$225;
   label = 80; break;
  case 80: 
   var $226=HEAP32[((1592)>>2)];
   var $227=(($226)|(0))==0;
   if ($227) { label = 83; break; } else { label = 81; break; }
  case 81: 
   var $229=HEAP8[($_05)];
   var $230=(($229 << 24) >> 24)==58;
   if ($230) { label = 83; break; } else { label = 82; break; }
  case 82: 
   __warnx(((1784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$212,tempInt));
   label = 83; break;
  case 83: 
   HEAP32[((1576)>>2)]=$212;
   var $_04 = 63;label = 106; break;
  case 84: 
   var $234=(($211 << 24) >> 24)==87;
   var $or_cond7=$188 & $234;
   var $235=(($217+1)|0);
   var $236=HEAP8[($235)];
   var $237=(($236 << 24) >> 24)==59;
   var $or_cond71=$or_cond7 & $237;
   if ($or_cond71) { label = 85; break; } else { label = 93; break; }
  case 85: 
   var $239=HEAP8[($210)];
   var $240=(($239 << 24) >> 24)==0;
   if ($240) { label = 86; break; } else { label = 92; break; }
  case 86: 
   var $242=HEAP32[((1584)>>2)];
   var $243=((($242)+(1))|0);
   HEAP32[((1584)>>2)]=$243;
   var $244=(($243)|(0)) < (($nargc)|(0));
   if ($244) { label = 91; break; } else { label = 87; break; }
  case 87: 
   HEAP32[((1568)>>2)]=((5760)|0);
   var $246=HEAP32[((1592)>>2)];
   var $247=(($246)|(0))==0;
   if ($247) { label = 90; break; } else { label = 88; break; }
  case 88: 
   var $249=HEAP8[($_05)];
   var $250=(($249 << 24) >> 24)==58;
   if ($250) { label = 90; break; } else { label = 89; break; }
  case 89: 
   __warnx(((360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$212,tempInt));
   label = 90; break;
  case 90: 
   HEAP32[((1576)>>2)]=$212;
   var $253=HEAP8[($_05)];
   var $254=(($253 << 24) >> 24)==58;
   var $255=$254 ? 58 : 63;
   var $_04 = $255;label = 106; break;
  case 91: 
   var $257=(($nargv+($243<<2))|0);
   var $258=HEAP32[(($257)>>2)];
   HEAP32[((1568)>>2)]=$258;
   label = 92; break;
  case 92: 
   var $260=_parse_long_options($nargv, $_05, $long_options, $idx, 0);
   HEAP32[((1568)>>2)]=((5760)|0);
   var $_04 = $260;label = 106; break;
  case 93: 
   var $261=(($236 << 24) >> 24)==58;
   if ($261) { label = 96; break; } else { label = 94; break; }
  case 94: 
   var $263=HEAP8[($210)];
   var $264=(($263 << 24) >> 24)==0;
   if ($264) { label = 95; break; } else { var $_04 = $212;label = 106; break; }
  case 95: 
   var $266=HEAP32[((1584)>>2)];
   var $267=((($266)+(1))|0);
   HEAP32[((1584)>>2)]=$267;
   var $_04 = $212;label = 106; break;
  case 96: 
   HEAP32[((4664)>>2)]=0;
   var $269=HEAP8[($210)];
   var $270=(($269 << 24) >> 24)==0;
   if ($270) { label = 98; break; } else { label = 97; break; }
  case 97: 
   HEAP32[((4664)>>2)]=$210;
   label = 105; break;
  case 98: 
   var $273=(($217+2)|0);
   var $274=HEAP8[($273)];
   var $275=(($274 << 24) >> 24)==58;
   if ($275) { label = 105; break; } else { label = 99; break; }
  case 99: 
   var $277=HEAP32[((1584)>>2)];
   var $278=((($277)+(1))|0);
   HEAP32[((1584)>>2)]=$278;
   var $279=(($278)|(0)) < (($nargc)|(0));
   if ($279) { label = 104; break; } else { label = 100; break; }
  case 100: 
   HEAP32[((1568)>>2)]=((5760)|0);
   var $281=HEAP32[((1592)>>2)];
   var $282=(($281)|(0))==0;
   if ($282) { label = 103; break; } else { label = 101; break; }
  case 101: 
   var $284=HEAP8[($_05)];
   var $285=(($284 << 24) >> 24)==58;
   if ($285) { label = 103; break; } else { label = 102; break; }
  case 102: 
   __warnx(((360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$212,tempInt));
   label = 103; break;
  case 103: 
   HEAP32[((1576)>>2)]=$212;
   var $288=HEAP8[($_05)];
   var $289=(($288 << 24) >> 24)==58;
   var $290=$289 ? 58 : 63;
   var $_04 = $290;label = 106; break;
  case 104: 
   var $292=(($nargv+($278<<2))|0);
   var $293=HEAP32[(($292)>>2)];
   HEAP32[((4664)>>2)]=$293;
   label = 105; break;
  case 105: 
   HEAP32[((1568)>>2)]=((5760)|0);
   var $294=HEAP32[((1584)>>2)];
   var $295=((($294)+(1))|0);
   HEAP32[((1584)>>2)]=$295;
   var $_04 = $212;label = 106; break;
  case 106: 
   var $_04;
   STACKTOP = sp;
   return $_04;
  default: assert(0, "bad label: " + label);
 }
}
function _getopt_long($nargc, $nargv, $options, $long_options, $idx) {
 var label = 0;
 var $1=_getopt_internal($nargc, $nargv, $options, $long_options, $idx, 1);
 return $1;
}
function _getopt_long_only($nargc, $nargv, $options, $long_options, $idx) {
 var label = 0;
 var $1=_getopt_internal($nargc, $nargv, $options, $long_options, $idx, 5);
 return $1;
}
function __ZnwjRKSt9nothrow_t($size, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2 = (function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0 = $2;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   var $6=___cxa_begin_catch($5);
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0 = 0;label = 3; break; } else { label = 4; break; }
  case 3: 
   var $p_0;
   return $p_0;
  case 4: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   var $10=$9$0;
   ___cxa_call_unexpected($10);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return $1;
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1); $4$1 = tempRet0;
   var $5=$4$1;
   var $6=(($5)|(0)) < 0;
   if ($6) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $8=$4$0;
   ___cxa_call_unexpected($8);
   throw "Reached an unreachable!";
  case 5: 
   ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZnajRKSt9nothrow_t($size, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2 = (function() { try { __THREW__ = 0; return __Znaj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0 = $2;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1,0); $4$1 = tempRet0;
   var $5=$4$0;
   var $6=___cxa_begin_catch($5);
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0 = 0;label = 3; break; } else { label = 4; break; }
  case 3: 
   var $p_0;
   return $p_0;
  case 4: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   var $10=$9$0;
   ___cxa_call_unexpected($10);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZSt17__throw_bad_allocv() {
 var label = 0;
 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=(((3792)|0));
 ___cxa_throw($1, 3920, (16));
 throw "Reached an unreachable!";
}
function _parse_long_options($nargv, $options, $long_options, $idx, $short_too) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((1568)>>2)];
   var $2=HEAP32[((1584)>>2)];
   var $3=((($2)+(1))|0);
   HEAP32[((1584)>>2)]=$3;
   var $4=_strchr($1, 61);
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   var $8=$1;
   var $9=((($7)-($8))|0);
   var $10=(($4+1)|0);
   var $current_argv_len_0 = $9;var $has_equal_0 = $10;label = 4; break;
  case 3: 
   var $12=_strlen($1);
   var $current_argv_len_0 = $12;var $has_equal_0 = 0;label = 4; break;
  case 4: 
   var $has_equal_0;
   var $current_argv_len_0;
   var $14=(($long_options)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { label = 37; break; } else { label = 5; break; }
  case 5: 
   var $17=(($short_too)|(0))!=0;
   var $18=(($current_argv_len_0)|(0))==1;
   var $or_cond3=$17 & $18;
   if ($or_cond3) { var $i_05_us = 0;var $19 = $15;label = 6; break; } else { var $i_05 = 0;var $match_06 = -1;var $29 = $15;label = 9; break; }
  case 6: 
   var $19;
   var $i_05_us;
   var $lhsc=HEAP8[($1)];
   var $rhsc=HEAP8[($19)];
   var $20=(($lhsc << 24) >> 24)==(($rhsc << 24) >> 24);
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $22=_strlen($19);
   var $23=(($22)|(0))==1;
   if ($23) { var $match_2 = $i_05_us;label = 17; break; } else { label = 8; break; }
  case 8: 
   var $25=((($i_05_us)+(1))|0);
   var $26=(($long_options+($25<<4))|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))==0;
   if ($28) { label = 37; break; } else { var $i_05_us = $25;var $19 = $27;label = 6; break; }
  case 9: 
   var $29;
   var $match_06;
   var $i_05;
   var $30=_strncmp($1, $29, $current_argv_len_0);
   var $31=(($30)|(0))==0;
   if ($31) { label = 10; break; } else { var $match_1 = $match_06;label = 16; break; }
  case 10: 
   var $33=_strlen($29);
   var $34=(($33)|(0))==(($current_argv_len_0)|(0));
   if ($34) { var $match_2 = $i_05;label = 17; break; } else { label = 11; break; }
  case 11: 
   var $36=(($match_06)|(0))==-1;
   if ($36) { var $match_1 = $i_05;label = 16; break; } else { label = 12; break; }
  case 12: 
   var $37=HEAP32[((1592)>>2)];
   var $38=(($37)|(0))==0;
   if ($38) { label = 15; break; } else { label = 13; break; }
  case 13: 
   var $40=HEAP8[($options)];
   var $41=(($40 << 24) >> 24)==58;
   if ($41) { label = 15; break; } else { label = 14; break; }
  case 14: 
   __warnx(((2080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$current_argv_len_0,HEAP32[(((tempInt)+(8))>>2)]=$1,tempInt));
   label = 15; break;
  case 15: 
   HEAP32[((1576)>>2)]=0;
   var $_0 = 63;label = 47; break;
  case 16: 
   var $match_1;
   var $45=((($i_05)+(1))|0);
   var $46=(($long_options+($45<<4))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==0;
   if ($48) { var $match_2 = $match_1;label = 17; break; } else { var $i_05 = $45;var $match_06 = $match_1;var $29 = $47;label = 9; break; }
  case 17: 
   var $match_2;
   var $49=(($match_2)|(0))==-1;
   if ($49) { label = 37; break; } else { label = 18; break; }
  case 18: 
   var $51=(($long_options+($match_2<<4)+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))!=0;
   var $54=(($has_equal_0)|(0))==0;
   var $or_cond4=$53 | $54;
   if ($or_cond4) { label = 25; break; } else { label = 19; break; }
  case 19: 
   var $56=HEAP32[((1592)>>2)];
   var $57=(($56)|(0))==0;
   if ($57) { label = 22; break; } else { label = 20; break; }
  case 20: 
   var $59=HEAP8[($options)];
   var $60=(($59 << 24) >> 24)==58;
   if ($60) { label = 22; break; } else { label = 21; break; }
  case 21: 
   __warnx(((1616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$current_argv_len_0,HEAP32[(((tempInt)+(8))>>2)]=$1,tempInt));
   label = 22; break;
  case 22: 
   var $63=(($long_options+($match_2<<4)+8)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))==0;
   if ($65) { label = 23; break; } else { var $storemerge2 = 0;label = 24; break; }
  case 23: 
   var $67=(($long_options+($match_2<<4)+12)|0);
   var $68=HEAP32[(($67)>>2)];
   var $storemerge2 = $68;label = 24; break;
  case 24: 
   var $storemerge2;
   HEAP32[((1576)>>2)]=$storemerge2;
   var $70=HEAP8[($options)];
   var $71=(($70 << 24) >> 24)==58;
   var $72=$71 ? 58 : 63;
   var $_0 = $72;label = 47; break;
  case 25: 
   var $_off=((($52)-(1))|0);
   var $switch=(($_off)>>>(0)) < 2;
   if ($switch) { label = 26; break; } else { label = 30; break; }
  case 26: 
   if ($54) { label = 28; break; } else { label = 27; break; }
  case 27: 
   HEAP32[((4664)>>2)]=$has_equal_0;
   label = 30; break;
  case 28: 
   var $77=(($52)|(0))==1;
   if ($77) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $79=((($2)+(2))|0);
   HEAP32[((1584)>>2)]=$79;
   var $80=(($nargv+($3<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   HEAP32[((4664)>>2)]=$81;
   label = 30; break;
  case 30: 
   var $82=HEAP32[(($51)>>2)];
   var $83=(($82)|(0))==1;
   var $84=HEAP32[((4664)>>2)];
   var $85=(($84)|(0))==0;
   var $or_cond=$83 & $85;
   if ($or_cond) { label = 31; break; } else { label = 43; break; }
  case 31: 
   var $87=HEAP32[((1592)>>2)];
   var $88=(($87)|(0))==0;
   if ($88) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $90=HEAP8[($options)];
   var $91=(($90 << 24) >> 24)==58;
   if ($91) { label = 34; break; } else { label = 33; break; }
  case 33: 
   __warnx(((320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1,tempInt));
   label = 34; break;
  case 34: 
   var $94=(($long_options+($match_2<<4)+8)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 35; break; } else { var $storemerge = 0;label = 36; break; }
  case 35: 
   var $98=(($long_options+($match_2<<4)+12)|0);
   var $99=HEAP32[(($98)>>2)];
   var $storemerge = $99;label = 36; break;
  case 36: 
   var $storemerge;
   HEAP32[((1576)>>2)]=$storemerge;
   var $100=HEAP32[((1584)>>2)];
   var $101=((($100)-(1))|0);
   HEAP32[((1584)>>2)]=$101;
   var $102=HEAP8[($options)];
   var $103=(($102 << 24) >> 24)==58;
   var $104=$103 ? 58 : 63;
   var $_0 = $104;label = 47; break;
  case 37: 
   var $105=(($short_too)|(0))==0;
   if ($105) { label = 39; break; } else { label = 38; break; }
  case 38: 
   HEAP32[((1584)>>2)]=$2;
   var $_0 = -1;label = 47; break;
  case 39: 
   var $108=HEAP32[((1592)>>2)];
   var $109=(($108)|(0))==0;
   if ($109) { label = 42; break; } else { label = 40; break; }
  case 40: 
   var $111=HEAP8[($options)];
   var $112=(($111 << 24) >> 24)==58;
   if ($112) { label = 42; break; } else { label = 41; break; }
  case 41: 
   __warnx(((1760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1,tempInt));
   label = 42; break;
  case 42: 
   HEAP32[((1576)>>2)]=0;
   var $_0 = 63;label = 47; break;
  case 43: 
   var $116=(($idx)|(0))==0;
   if ($116) { label = 45; break; } else { label = 44; break; }
  case 44: 
   HEAP32[(($idx)>>2)]=$match_2;
   label = 45; break;
  case 45: 
   var $119=(($long_options+($match_2<<4)+8)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120)|(0))==0;
   var $122=(($long_options+($match_2<<4)+12)|0);
   var $123=HEAP32[(($122)>>2)];
   if ($121) { var $_0 = $123;label = 47; break; } else { label = 46; break; }
  case 46: 
   HEAP32[(($120)>>2)]=$123;
   var $_0 = 0;label = 47; break;
  case 47: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __warn($fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 __vwarn($fmt, $1);
 STACKTOP = sp;
 return;
}
function __warnx($fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 __vwarnx($fmt, $1);
 STACKTOP = sp;
 return;
}
function __vwarn($fmt, $ap) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=___errno_location();
   var $2=HEAP32[(($1)>>2)];
   var $3=HEAP32[((_stderr)>>2)];
   var $4=HEAP32[((___progname)>>2)];
   var $5=_fprintf($3, ((3240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
   var $6=(($fmt)|(0))==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=HEAP32[((_stderr)>>2)];
   var $9=_vfprintf($8, $fmt, $ap);
   var $10=HEAP32[((_stderr)>>2)];
   var $11=_fwrite(((3624)|0), 2, 1, $10);
   label = 3; break;
  case 3: 
   var $13=HEAP32[((_stderr)>>2)];
   var $14=_strerror($2);
   var $15=_fprintf($13, ((3088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __vwarnx($fmt, $ap) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((_stderr)>>2)];
   var $2=HEAP32[((___progname)>>2)];
   var $3=_fprintf($1, ((3056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
   var $4=(($fmt)|(0))==0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=HEAP32[((_stderr)>>2)];
   var $7=_vfprintf($6, $fmt, $ap);
   label = 3; break;
  case 3: 
   var $9=HEAP32[((_stderr)>>2)];
   var $fputc=_fputc(10, $9);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _strtod($string, $endPtr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $p_0 = $string;label = 2; break;
  case 2: 
   var $p_0;
   var $2=HEAP8[($p_0)];
   var $3=(($2 << 24) >> 24);
   var $4=_isspace($3);
   var $5=(($4)|(0))==0;
   var $6=(($p_0+1)|0);
   if ($5) { label = 3; break; } else { var $p_0 = $6;label = 2; break; }
  case 3: 
   var $8=HEAP8[($p_0)];
   if ((($8 << 24) >> 24)==45) {
    label = 4; break;
   }
   else if ((($8 << 24) >> 24)==43) {
    label = 5; break;
   }
   else {
   var $p_2 = $p_0;var $sign_0 = 0;label = 6; break;
   }
  case 4: 
   var $p_2 = $6;var $sign_0 = 1;label = 6; break;
  case 5: 
   var $p_2 = $6;var $sign_0 = 0;label = 6; break;
  case 6: 
   var $sign_0;
   var $p_2;
   var $decPt_0 = -1;var $mantSize_0 = 0;var $p_3 = $p_2;label = 7; break;
  case 7: 
   var $p_3;
   var $mantSize_0;
   var $decPt_0;
   var $13=HEAP8[($p_3)];
   var $14=(($13 << 24) >> 24);
   var $isdigittmp=((($14)-(48))|0);
   var $isdigit=(($isdigittmp)>>>(0)) < 10;
   if ($isdigit) { var $decPt_1 = $decPt_0;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $16=(($13 << 24) >> 24)!=46;
   var $17=(($decPt_0)|(0)) > -1;
   var $or_cond=$16 | $17;
   if ($or_cond) { label = 10; break; } else { var $decPt_1 = $mantSize_0;label = 9; break; }
  case 9: 
   var $decPt_1;
   var $19=(($p_3+1)|0);
   var $20=((($mantSize_0)+(1))|0);
   var $decPt_0 = $decPt_1;var $mantSize_0 = $20;var $p_3 = $19;label = 7; break;
  case 10: 
   var $22=(((-$mantSize_0))|0);
   var $23=(($p_3+$22)|0);
   var $24=(($decPt_0)|(0)) < 0;
   var $not_=$24 ^ 1;
   var $25=(($not_ << 31) >> 31);
   var $mantSize_1=((($25)+($mantSize_0))|0);
   var $decPt_2=$24 ? $mantSize_0 : $decPt_0;
   var $26=(($mantSize_1)|(0)) > 18;
   var $27=(((-$mantSize_1))|0);
   var $fracExp_0_p=$26 ? -18 : $27;
   var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
   var $mantSize_2=$26 ? 18 : $mantSize_1;
   var $28=(($mantSize_2)|(0))==0;
   if ($28) { var $p_11 = $string;var $fraction_0 = 0;label = 37; break; } else { label = 11; break; }
  case 11: 
   var $29=(($mantSize_2)|(0)) > 9;
   if ($29) { var $p_422 = $23;var $mantSize_323 = $mantSize_2;var $frac1_024 = 0;label = 15; break; } else { label = 13; break; }
  case 12: 
   var $phitmp=(($40)|(0));
   var $phitmp29=($phitmp)*(1000000000);
   var $frac1_0_lcssa36 = $phitmp29;var $mantSize_3_lcssa37 = 9;var $p_4_lcssa38 = $p_5;label = 14; break;
  case 13: 
   var $30=(($mantSize_2)|(0)) > 0;
   if ($30) { var $frac1_0_lcssa36 = 0;var $mantSize_3_lcssa37 = $mantSize_2;var $p_4_lcssa38 = $23;label = 14; break; } else { var $frac2_0_lcssa = 0;var $frac1_0_lcssa35 = 0;label = 22; break; }
  case 14: 
   var $p_4_lcssa38;
   var $mantSize_3_lcssa37;
   var $frac1_0_lcssa36;
   var $p_615 = $p_4_lcssa38;var $mantSize_416 = $mantSize_3_lcssa37;var $frac2_017 = 0;label = 18; break;
  case 15: 
   var $frac1_024;
   var $mantSize_323;
   var $p_422;
   var $31=HEAP8[($p_422)];
   var $32=(($p_422+1)|0);
   var $33=(($31 << 24) >> 24)==46;
   if ($33) { label = 16; break; } else { var $c_0_in = $31;var $p_5 = $32;label = 17; break; }
  case 16: 
   var $35=HEAP8[($32)];
   var $36=(($p_422+2)|0);
   var $c_0_in = $35;var $p_5 = $36;label = 17; break;
  case 17: 
   var $p_5;
   var $c_0_in;
   var $c_0=(($c_0_in << 24) >> 24);
   var $38=((($frac1_024)*(10))&-1);
   var $39=((($38)-(48))|0);
   var $40=((($39)+($c_0))|0);
   var $41=((($mantSize_323)-(1))|0);
   var $42=(($41)|(0)) > 9;
   if ($42) { var $p_422 = $p_5;var $mantSize_323 = $41;var $frac1_024 = $40;label = 15; break; } else { label = 12; break; }
  case 18: 
   var $frac2_017;
   var $mantSize_416;
   var $p_615;
   var $44=HEAP8[($p_615)];
   var $45=(($p_615+1)|0);
   var $46=(($44 << 24) >> 24)==46;
   if ($46) { label = 19; break; } else { var $c_1_in = $44;var $p_7 = $45;label = 20; break; }
  case 19: 
   var $48=HEAP8[($45)];
   var $49=(($p_615+2)|0);
   var $c_1_in = $48;var $p_7 = $49;label = 20; break;
  case 20: 
   var $p_7;
   var $c_1_in;
   var $c_1=(($c_1_in << 24) >> 24);
   var $51=((($frac2_017)*(10))&-1);
   var $52=((($51)-(48))|0);
   var $53=((($52)+($c_1))|0);
   var $54=((($mantSize_416)-(1))|0);
   var $55=(($54)|(0)) > 0;
   if ($55) { var $p_615 = $p_7;var $mantSize_416 = $54;var $frac2_017 = $53;label = 18; break; } else { label = 21; break; }
  case 21: 
   var $phitmp30=(($53)|(0));
   var $frac2_0_lcssa = $phitmp30;var $frac1_0_lcssa35 = $frac1_0_lcssa36;label = 22; break;
  case 22: 
   var $frac1_0_lcssa35;
   var $frac2_0_lcssa;
   var $57=($frac1_0_lcssa35)+($frac2_0_lcssa);
   if ((($13 << 24) >> 24)==69 | (($13 << 24) >> 24)==101) {
    label = 23; break;
   }
   else {
   var $exp_1 = 0;var $p_10 = $p_3;var $expSign_1 = 0;label = 28; break;
   }
  case 23: 
   var $59=(($p_3+1)|0);
   var $60=HEAP8[($59)];
   if ((($60 << 24) >> 24)==45) {
    label = 24; break;
   }
   else if ((($60 << 24) >> 24)==43) {
    label = 25; break;
   }
   else {
   var $p_9_ph = $59;var $expSign_0_ph = 0;label = 26; break;
   }
  case 24: 
   var $62=(($p_3+2)|0);
   var $p_9_ph = $62;var $expSign_0_ph = 1;label = 26; break;
  case 25: 
   var $64=(($p_3+2)|0);
   var $p_9_ph = $64;var $expSign_0_ph = 0;label = 26; break;
  case 26: 
   var $expSign_0_ph;
   var $p_9_ph;
   var $65=HEAP8[($p_9_ph)];
   var $66=(($65 << 24) >> 24);
   var $isdigittmp17=((($66)-(48))|0);
   var $isdigit28=(($isdigittmp17)>>>(0)) < 10;
   if ($isdigit28) { var $p_99 = $p_9_ph;var $exp_010 = 0;var $67 = $66;label = 27; break; } else { var $exp_1 = 0;var $p_10 = $p_9_ph;var $expSign_1 = $expSign_0_ph;label = 28; break; }
  case 27: 
   var $67;
   var $exp_010;
   var $p_99;
   var $68=((($exp_010)*(10))&-1);
   var $69=((($68)-(48))|0);
   var $70=((($69)+($67))|0);
   var $71=(($p_99+1)|0);
   var $72=HEAP8[($71)];
   var $73=(($72 << 24) >> 24);
   var $isdigittmp1=((($73)-(48))|0);
   var $isdigit2=(($isdigittmp1)>>>(0)) < 10;
   if ($isdigit2) { var $p_99 = $71;var $exp_010 = $70;var $67 = $73;label = 27; break; } else { var $exp_1 = $70;var $p_10 = $71;var $expSign_1 = $expSign_0_ph;label = 28; break; }
  case 28: 
   var $expSign_1;
   var $p_10;
   var $exp_1;
   var $74=(($expSign_1)|(0))==0;
   var $75=(((-$exp_1))|0);
   var $exp_2_p=$74 ? $exp_1 : $75;
   var $exp_2=((($fracExp_0)+($exp_2_p))|0);
   var $76=(($exp_2)|(0)) < 0;
   var $77=(((-$exp_2))|0);
   var $exp_3=$76 ? $77 : $exp_2;
   var $78=(($exp_3)|(0)) > 511;
   if ($78) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $79=___errno_location();
   HEAP32[(($79)>>2)]=34;
   var $dblExp_03 = 1;var $d_04 = ((1104)|0);var $exp_55 = 511;label = 31; break;
  case 30: 
   var $80=(($exp_3)|(0))==0;
   if ($80) { var $dblExp_0_lcssa = 1;label = 34; break; } else { var $dblExp_03 = 1;var $d_04 = ((1104)|0);var $exp_55 = $exp_3;label = 31; break; }
  case 31: 
   var $exp_55;
   var $d_04;
   var $dblExp_03;
   var $81=$exp_55 & 1;
   var $82=(($81)|(0))==0;
   if ($82) { var $dblExp_1 = $dblExp_03;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $84=HEAPF64[(($d_04)>>3)];
   var $85=($dblExp_03)*($84);
   var $dblExp_1 = $85;label = 33; break;
  case 33: 
   var $dblExp_1;
   var $87=$exp_55 >> 1;
   var $88=(($d_04+8)|0);
   var $89=(($87)|(0))==0;
   if ($89) { var $dblExp_0_lcssa = $dblExp_1;label = 34; break; } else { var $dblExp_03 = $dblExp_1;var $d_04 = $88;var $exp_55 = $87;label = 31; break; }
  case 34: 
   var $dblExp_0_lcssa;
   var $90=(($exp_2)|(0)) > -1;
   if ($90) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $92=($57)/($dblExp_0_lcssa);
   var $p_11 = $p_10;var $fraction_0 = $92;label = 37; break;
  case 36: 
   var $94=($57)*($dblExp_0_lcssa);
   var $p_11 = $p_10;var $fraction_0 = $94;label = 37; break;
  case 37: 
   var $fraction_0;
   var $p_11;
   var $96=(($endPtr)|(0))==0;
   if ($96) { label = 39; break; } else { label = 38; break; }
  case 38: 
   HEAP32[(($endPtr)>>2)]=$p_11;
   label = 39; break;
  case 39: 
   var $99=(($sign_0)|(0))==0;
   if ($99) { var $_0 = $fraction_0;label = 41; break; } else { label = 40; break; }
  case 40: 
   var $101=(-$fraction_0);
   var $_0 = $101;label = 41; break;
  case 41: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold($nptr, $endptr) {
 var label = 0;
 var $1=_strtod($nptr, $endptr);
 return $1;
}
function _strtof($nptr, $endptr) {
 var label = 0;
 var $1=_strtod($nptr, $endptr);
 var $2=$1;
 return $2;
}
function _strtod_l($nptr, $endptr, $loc) {
 var label = 0;
 var $1=_strtod($nptr, $endptr);
 return $1;
}
function _strtold_l($nptr, $endptr, $loc) {
 var label = 0;
 var $1=_strtod($nptr, $endptr);
 return $1;
}
function _atof($str) {
 var label = 0;
 var $1=_strtod($str, 0);
 return $1;
}
function __err($eval, $fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 __verr($eval, $fmt, $1);
 throw "Reached an unreachable!";
}
function __errx($eval, $fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 __verrx($eval, $fmt, $1);
 throw "Reached an unreachable!";
}
function __verr($eval, $fmt, $ap) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=___errno_location();
   var $2=HEAP32[(($1)>>2)];
   var $3=HEAP32[((_stderr)>>2)];
   var $4=HEAP32[((___progname)>>2)];
   var $5=_fprintf($3, ((2112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
   var $6=(($fmt)|(0))==0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=HEAP32[((_stderr)>>2)];
   var $9=_vfprintf($8, $fmt, $ap);
   var $10=HEAP32[((_stderr)>>2)];
   var $11=_fwrite(((3672)|0), 2, 1, $10);
   label = 3; break;
  case 3: 
   var $13=HEAP32[((_stderr)>>2)];
   var $14=_strerror($2);
   var $15=_fprintf($13, ((3160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
   _exit($eval);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __verrx($eval, $fmt, $ap) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((_stderr)>>2)];
   var $2=HEAP32[((___progname)>>2)];
   var $3=_fprintf($1, ((3384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
   var $4=(($fmt)|(0))==0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=HEAP32[((_stderr)>>2)];
   var $7=_vfprintf($6, $fmt, $ap);
   label = 3; break;
  case 3: 
   var $9=HEAP32[((_stderr)>>2)];
   var $fputc=_fputc(10, $9);
   _exit($eval);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math.imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math.imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math.imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math.imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math.imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math.imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
var initialStackTop;
var inMain;
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  inMain = true;
  var ret;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e && typeof e == 'object' && e.type == 'ExitStatus') {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      Module.print('Exit Status: ' + e.value);
      return e.value;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    inMain = false;
  }
  // if we're not running an evented main loop, it's time to exit
  if (!Module['noExitRuntime']) {
    exit(ret);
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  STACKTOP = initialStackTop;
  // TODO call externally added 'exit' callbacks with the status code.
  // It'd be nice to provide the same interface for all Module events (e.g.
  // prerun, premain, postmain). Perhaps an EventEmitter so we can do:
  // Module.on('exit', function (status) {});
  // exit the runtime
  exitRuntime();
  if (inMain) {
    // if we're still inside the callMain's try/catch, we need to throw an
    // exception in order to immediately terminate execution.
    throw { type: 'ExitStatus', value: status };
  }
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
  }
  ABORT = true;
  throw 'abort() at ' + (new Error().stack);
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=_unrar.js.map// export.js

var malloc = cwrap('malloc', 'number', ['number']);
var free = cwrap('free', 'number', ['number']);

var urarlib_list = cwrap('urarlib_list', 'number', ['string', 'number']);
var urarlib_freelist = cwrap('urarlib_freelist', 'number', ['number']);
var urarlib_get = cwrap('urarlib_get', 'number', ['number', 'number', 'number', 'string', 'string']);

var get_item_from_archive_list = cwrap('get_item_from_archive_list', 'number', ['number']);
var get_next_from_archive_list = cwrap('get_next_from_archive_list', 'number', ['number']);

var get_name_from_archive_entry = cwrap('get_name_from_archive_entry', 'number', ['number']);
var get_pack_size_from_archive_entry = cwrap('get_pack_size_from_archive_entry', 'number', ['number']);
var get_unp_size_from_archive_entry = cwrap('get_unp_size_from_archive_entry', 'number', ['number']);
var get_host_os_from_archive_entry = cwrap('get_host_os_from_archive_entry', 'number', ['number']);
var get_file_time_from_archive_entry = cwrap('get_file_time_from_archive_entry', 'number', ['number']);
var get_file_attr_from_archive_entry = cwrap('get_file_attr_from_archive_entry', 'number', ['number']);

var RarArchiveEntry = (function () {
  function RarArchiveEntry(entryPtr) {
    this.entryPtr = entryPtr;
    this.name = Pointer_stringify(get_name_from_archive_entry(this.entryPtr));
    this.packSize = get_pack_size_from_archive_entry(this.entryPtr);
    this.unpackSize = get_unp_size_from_archive_entry(this.entryPtr);
    this.hostOS = get_host_os_from_archive_entry(this.entryPtr);
    this.fileTime = get_file_time_from_archive_entry(this.entryPtr);
    this.fileAttr = get_file_attr_from_archive_entry(this.entryPtr);
  }
  RarArchiveEntry.prototype['isDirectory'] = function () {
    return (get_file_attr_from_archive_entry(this.entryPtr) & 0x10) > 0;
  };
  return RarArchiveEntry;
})();

var Unrar = (function () {
  var fileid = 0;

  function Unrar(arraybuffer, password) {
    this.buffer = arraybuffer;
    this.password = password || '';
    this.archiveName = (++fileid) + '.rar';
    this.listPtr = malloc(0);
    this.filenameToPtr = {};
    this.entries = [];

    FS.createDataFile('/', this.archiveName, new Uint8Array(this.buffer), true, false);

    var fileNum = urarlib_list(this.archiveName, this.listPtr);
    var next = getValue(this.listPtr, 'i32*');
    while (next !== 0) {
      var entry =new RarArchiveEntry(get_item_from_archive_list(next));
      var namePtr = get_name_from_archive_entry(entry.entryPtr);
      this.filenameToPtr[entry.name] = namePtr;
      this.entries.push(entry);
      next = get_next_from_archive_list(next);
    }
  }
  Unrar.prototype['getEntries'] = function () {
    return this.entries;
  };
  Unrar.prototype['close'] = function () {
    urarlib_freelist(getValue(this.listPtr, 'i32*'));
    free(this.listPtr);
    FS.deleteFile('/' + this.archiveName);
  };
  Unrar.prototype['decompress'] = function (filename) {
    var sizePtr = malloc(4);
    var outputPtr = malloc(0);

    var result = urarlib_get(outputPtr, sizePtr,
                             this.filenameToPtr[filename],
                             this.archiveName,
                             this.password);
    var size = getValue(sizePtr, 'i32*');
    var data = null;
    if (result === 1) {
      var begin = getValue(outputPtr, 'i8*');
      data = new Uint8Array(HEAPU8.subarray(begin, begin + size));
    }
    free(getValue(outputPtr, 'i8*'));
    free(outputPtr);
    free(sizePtr);
    return data;
  };
  return Unrar;
})();

if (typeof process === 'object' && typeof require === 'function') { // NODE
  module.exports = Unrar;
} else if (typeof define === "function" && define.amd) { // AMD
  define('unrar', [], function () { return Unrar; });
} else if (typeof window === 'object') { // WEB
  window['Unrar'] = Unrar;
} else if (typeof importScripts === 'function') { // WORKER
  this['Unrar'] = Unrar;
}
